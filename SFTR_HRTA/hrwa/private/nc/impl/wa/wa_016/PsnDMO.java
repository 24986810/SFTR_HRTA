package nc.impl.wa.wa_016;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Vector;

import nc.bs.dao.DAOException;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.wa.wa_016_xhhrp.PsnPrimaryToNameForRefpane;
import nc.jdbc.framework.JdbcSession;
import nc.jdbc.framework.PersistenceManager;
import nc.jdbc.framework.SQLParameter;
import nc.jdbc.framework.exception.DbException;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.lang.UFDate;
import nc.vo.wa.func.FormatVO;
import nc.vo.wa.wa_001.WaGlobalVO;
import nc.vo.wa.wa_001.WaclassHeaderVO;
import nc.vo.wa.wa_009.DataVO;
import nc.vo.wa.wa_009.ReCacuVO;
import nc.vo.wa.wa_016.DeptChangeVO;
import nc.vo.wa.wa_016.ItemsVO;
import nc.vo.wa.wa_016.PsnVO;

/**
 * Psn的DMO类。
 *
 * 创建日期：(2001-6-5)
 * @author：
 */
public class PsnDMO extends DataManageObject {
/**
 * PsnDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public PsnDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * PsnDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public PsnDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
//数据库类型
public final static int DB2 = 0;
public final static int ORACLE = 1;
public final static int SQLSERVER = 2;
public final static int SYBASE = 3;
public final static int UNKOWNDATABASE = -1;
/**
 * 此处插入方法说明。
 * 创建日期：(2005-7-21 15:10:54)
 * @return boolean
 * @param psns nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbin java.lang.String
 * @param waYear java.lang.String
 * @param waPeriod java.lang.String
 */
public boolean checkPsns(PsnVO[] psns, String gzlbin, String waYear, String waPeriod) throws SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"checkPsns",
		new Object[] {psns, gzlbin, waYear, waPeriod});
	/*************************************************************/

	String sql = "select distinct 1 from wa_psn where classid = ?  and cyear = ? and cperiod = ? and psnid in (";
	for(int i = 0; i < psns.length; i++){
		if(i == psns.length - 1){
			sql += "'";
			sql += psns[i].getPsnid();
			sql += "') ";
		}else{
			sql += "'";
			sql += psns[i].getPsnid();
			sql += "', ";
		}
	}

	sql+=" and dr=0 ";

	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		stmt.setString(1, gzlbin);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		ResultSet rs = stmt.executeQuery();

		if (rs.next())
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
		/*************************************************************/
		// 保留的系统管理接口：
		afterCallMethod(
			"nc.impl.wa.wa_016.PsnDMO",
			"checkPsns",
			new Object[] { psns, gzlbin, waYear, waPeriod });
		/*************************************************************/
	}
}
/**
 * 此处插入方法说明。
 * 创建日期：(2005-7-22 13:49:05)
 * @return boolean
 * @param psns nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbin java.lang.String
 * @exception java.sql.SQLException 异常说明。
 */
public boolean checkPsnsForWaDept(PsnVO[] psns, String gzlbin) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"checkPsnsForWaDept",
		new Object[] {psns, gzlbin});
	/*************************************************************/

	String sql = "select distinct 1 from wa_dept where pk_wa_class = ?  and pk_deptdoc = ? ";


	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		for(int i = 0; i < psns.length; i++){
			stmt.setString(1, gzlbin);
			stmt.setString(2, psns[i].getDeptId());
			ResultSet rs = stmt.executeQuery();
			if (!rs.next())
			{
				return true;
			}
		}
		return false;

	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
		/*************************************************************/
		// 保留的系统管理接口：
		afterCallMethod(
			"nc.impl.wa.wa_016.PsnDMO",
			"checkPsnsForWaDept",
			new Object[] { psns, gzlbin});
		/*************************************************************/
	}
}

/**
 * 此处插入方法说明。
 * 创建日期：(2005-7-22 13:49:05)
 * @return boolean
 * @param psns nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbin java.lang.String
 * @exception java.sql.SQLException 异常说明。
 */
public boolean checkPsnsForWaDeptSeal(PsnVO[] psns, String gzlbin) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"checkPsnsForWaDept",
		new Object[] {psns, gzlbin});
	/*************************************************************/

	String sql = "select  ISEALFLAG from wa_dept where pk_wa_class = ?  and pk_deptdoc = ? ";


	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		for(int i = 0; i < psns.length; i++){
			stmt.setString(1, gzlbin);
			stmt.setString(2, psns[i].getDeptId());
			ResultSet rs = stmt.executeQuery();
			while(rs.next()){
				if(rs.getInt(1)==1){//封存
					return true;
				}
			}
		}
		return false;

	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
		/*************************************************************/
		// 保留的系统管理接口：
		afterCallMethod(
			"nc.impl.wa.wa_016.PsnDMO",
			"checkPsnsForWaDept",
			new Object[] { psns, gzlbin});
		/*************************************************************/
	}
}


public String  getPsnVOByPsnCodeAndCorp(String pk_corp, String psncode) throws java.sql.SQLException {



	String sql = "select bd_psndoc.pk_psndoc from bd_psndoc where bd_psndoc.pk_corp = ? and bd_psndoc.psncode = ?";

	String pk_psndoc = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
			con = getConnection();
			stmt = con.prepareStatement(sql);

			stmt.setString(1, pk_corp);
			stmt.setString(2, psncode);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				pk_psndoc = rs.getString(1);

			}

		}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}

	}
	return pk_psndoc;

}


public String[] insertArrayWa_psn(DataVO[] psns)
throws
	java.sql.SQLException,
	nc.bs.pub.SystemException,
	javax.naming.NamingException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "insertArray", new Object[] { psns });
        /*************************************************************/

        String sql = "insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid, ipartflag, pk_om_job, pk_psnbasdoc ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

        String[] keys = null;
        Connection con = null;
        PreparedStatement stmt = null;
        int nbatch = 1000;

        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            keys = getOIDs(psns.length);

            for (int i = 0; i < psns.length; i++) {
                // set PK fields:
                stmt.setString(1, keys[i]);
                // set non PK fields:
                if (psns[i].getClassid() == null) {
                    stmt.setNull(2, Types.CHAR);
                    //stmt.setNull(11, Types.CHAR);
                } else {
                    stmt.setString(2, psns[i].getClassid());
                    //stmt.setString(11, psns[i].getClassid());
                }
                if (psns[i].getCyear() == null) {
                    stmt.setNull(3, Types.CHAR);
                    //stmt.setNull(12, Types.CHAR);
                } else {
                    stmt.setString(3, psns[i].getCyear());
                    //stmt.setString(12, psns[i].getCyear());
                }
                if (psns[i].getCperiod() == null) {
                    stmt.setNull(4, Types.CHAR);
                    //stmt.setNull(13, Types.CHAR);
                } else {
                    stmt.setString(4, psns[i].getCperiod());
                    //stmt.setString(13, psns[i].getCperiod());
                }
                if (psns[i].getIstopFlag() == null) {
                    stmt.setNull(5, Types.INTEGER);
                } else {
                    if (psns[i].getIstopFlag().intValue() == 1) {
                        stmt.setInt(5, 1);
                    } else {
                        stmt.setInt(5, 0);
                    }
                }
                if (psns[i].getAccCode() == null) {
                    stmt.setNull(6, Types.CHAR);
                } else {
                    stmt.setString(6, psns[i].getAccCode());
                }
                if (psns[i].getBankID() == null) {

                    stmt.setString(7, "");
                } else {
                    stmt.setString(7, psns[i].getBankID());

                }
                if (psns[i].getTaxtableid() == null) {
                    stmt.setNull(8, Types.CHAR);
                } else {
                    stmt.setString(8, psns[i].getTaxtableid());
                }
                if (psns[i].getItaxflag() == null) {
                    stmt.setNull(9, Types.INTEGER);
                } else {
                    if (psns[i].getItaxflag().intValue() == 1) {
                        stmt.setInt(9, 1);
                    } else {
                        stmt.setInt(9, 0);
                    }
                }
                if (psns[i].getPsnid() == null) {
                    stmt.setNull(10, Types.CHAR);
                    //stmt.setNull(14, Types.CHAR);
                } else {
                    stmt.setString(10, psns[i].getPsnid());
                    //stmt.setString(14, psns[i].getPsnid());
                }
                stmt.setInt(11, psns[i].getIPartFlag() );
                if (psns[i].getPkOmJob() == null) {
                    stmt.setNull(12, Types.CHAR);
                } else {
                    stmt.setString(12, psns[i].getPkOmJob());
                }
                if (psns[i].getPsnbasid() == null) {
                    stmt.setNull(13, Types.CHAR);
                } else {
                    stmt.setString(13, psns[i].getPsnbasid());
                }

                stmt.addBatch();
                if ( (i+1) % nbatch == 0 || i == psns.length-1 ) {
                    stmt.executeBatch();
                    stmt.clearBatch();
                }
            }

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "insertArray", new Object[] { psns });
        /*************************************************************/

        return keys;
}

/**
 * 删除所有人员，袁野用
 *
 * 创建日期：(2001-6-5)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(String gzlbId, String waYear, String waPeriod)
	throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "delete", new Object[] { gzlbId,waYear,waPeriod });
	/*************************************************************/



	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();

		String sqlwa_psn = "delete from wa_psn where classid = ? and cyear= ? and cperiod = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_psn);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();

		String sqlwa_data = "delete from wa_data where classid = ? and cyear= ? and cperiod = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_data);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();

		String sqlwa_dataz = "delete from wa_dataz where classid = ? and cyear= ? and cperiod = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_dataz);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();

		String sqlwa_dataf = "delete from wa_dataf where classid = ? and cyear= ? and cperiod = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_dataf);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();

		String sqlwa_tax = "delete from wa_tax where pk_wa_class = ? and vcalyear= ? and vcalmonth = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_tax);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();

		String sqlwa_redata = "delete from wa_redata  where classid= ? and cyear = ? and cperiod = ? and dr=0";
		stmt = con.prepareStatement(sqlwa_redata);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.executeUpdate();


	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "delete", new Object[] { gzlbId,waYear,waPeriod });
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-6-12)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(nc.vo.wa.wa_016.PsnVO vo)
	throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_009.DataDMO",
		"deletePsn",
		new Object[] { vo });
	/*************************************************************/

	String sql="delete from wa_psn where  pk_wa_psn=?  and ipartflag= "+(vo.isPartTime() ? 1:0);

	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());

		stmt.executeUpdate();
/*
		if (tableName.equalsIgnoreCase("wa_data"))
		{
			delete("wa_dataz", gzlbId, waYear, waPeriod, psnId);
			delete("wa_dataf", gzlbId, waYear, waPeriod, psnId);

		}
*/
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_009.DataDMO",
		"deletePsn",
		new Object[] {vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-6-5)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public int delete(PsnVO vo, boolean needUpdatePeriod)
	throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "delete", new Object[] { vo });
	/*************************************************************/

	int re = 0;

	String sql = "delete from wa_psn where pk_wa_psn = ?";

	sql+=" and dr=0 and ipartflag= "+(vo.isPartTime() ? 1:0);

	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		re = stmt.executeUpdate();


	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "delete", new Object[] { vo });
	/*************************************************************/

	return re;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"findByPrimaryKey",
		new Object[] { key });
	/*************************************************************/

   String  sql =
		"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname,bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag from wa_psn ";
	sql += "inner join wa_data on wa_psn.psnid=wa_data.psnid and wa_psn.classid=wa_data.classid and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod ";
	sql += "left outer join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
	sql += "left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
	sql+= "left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

	//sql+= " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
	sql+= " left outer join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";

	sql += " where wa_psn.pk_wa_psn = ? ";

	sql+=" and wa_psn.dr=0 and wa_data.dr=0 ";

	PsnVO psn = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next())
		{
			psn = new PsnVO(key);
			// classid :
			String classid = rs.getString(1);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(2);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(3);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = (String) rs.getObject(4);
			{
				if (istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if (istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if (istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(5);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(6);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(7);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = (String) rs.getObject(8);
			{
				if (itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if (itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if (itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(9);
			psn.setPsnid(psnid == null ? null : psnid.trim());
			// psnNum :
			String psnNum = rs.getString(10);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(11);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(12);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(13);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(14);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(15);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(16);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(17);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(18);
			psn.setPartTime(iPartFlag==1);
			psn.setPk_wa_psn(key);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"findByPrimaryKey",
		new Object[] { key });
	/*************************************************************/

	return psn;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String findByPrimaryKeyForUpdate(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"findByPrimaryKeyForUpdate",
		new Object[] { key });
	/*************************************************************/

   String  sql =
		"select wa_psn.pk_wa_psn from wa_psn ";
	sql += " where wa_psn.pk_wa_psn = ? ";

	sql+=" and wa_psn.dr=0";

	String psnid = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();

		if (rs.next())
		{
			psnid = rs.getString(1);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"findByPrimaryKeyForUpdate",
		new Object[] { key });
	/*************************************************************/

	return psnid;
}
/**
 * 根据人员pk,cyear,cperiod,clsid,istopflag=1 dr=0来唯一确定一条纪录
 *
 * 创建日期：(2001-6-5)
 * @param psn nc.vo.wa.wa_016.PsnVO
 * @exception java.sql.SQLException 异常说明。
 */
public String getPkWaPsn(PsnVO psn) throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/

	String sql = "select pk_wa_psn from wa_psn ";
	sql += " where dr=0 and psnid=? and cyear=? and cperiod=? and classid=?";

	Connection con = null;
	PreparedStatement stmt = null;

	String re="";
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1,psn.getPsnid());
		stmt.setString(2,psn.getCyear());
		stmt.setString(3,psn.getCperiod());
		stmt.setString(4,psn.getClassid());
		ResultSet rs = stmt.executeQuery();
		if(rs.next()){
	        re = rs.getString(1);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/
	return re;
}

/**
 * 处理兼职。
 * 创建日期：(2003-9-24 22:01:31)
 * @return nc.vo.wa.wa_016.DeptChangeVO
 * @param psnid java.lang.String
 * @param endDate java.lang.String
 */
public DeptChangeVO getPsnDeptChangeData(String psnid, String endDate) throws Exception
{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getPsnDeptChangeData",
		new Object[] { psnid,endDate });
	/*************************************************************/

   	String  sql ="select hi_psndoc_deptchg.pk_deptdoc,bd_deptdoc.deptname, hi_psndoc_deptchg.pk_psncl, bd_psncl.psnclassname,hi_psndoc_deptchg.pk_postdoc,om_job.jobname, ";
	sql+=" bd_psndoc.psncode, bd_psndoc.psnname,bd_psndoc.pk_corp, hi_psndoc_deptchg.pk_psndoc_sub, bd_psndoc.pk_psnbasdoc ";
	sql+=" from hi_psndoc_deptchg ";
	sql+= " inner join bd_psndoc on  hi_psndoc_deptchg.pk_psndoc=bd_psndoc.pk_psndoc and bd_psndoc.dr=0 ";
	sql+= " inner join bd_deptdoc on  hi_psndoc_deptchg.pk_deptdoc=bd_deptdoc.pk_deptdoc  and bd_deptdoc.dr=0 ";
	sql+= " inner join bd_psncl on  hi_psndoc_deptchg.pk_psncl=bd_psncl.pk_psncl and bd_psncl.dr=0  ";
	sql+= " left join om_job on  hi_psndoc_deptchg.pk_postdoc=om_job.pk_om_job  ";

	sql += " where hi_psndoc_deptchg.pk_psndoc = ? ";

	sql+=" and jobtype > 0 and hi_psndoc_deptchg.recordnum= (";
	sql+=" select coalesce(min(newtbl.recordnum),-1) from hi_psndoc_deptchg newtbl where newtbl.pk_psndoc= ? and  ( newtbl.begindate<= ? or  newtbl.begindate is null ) ";

	sql+=")";

	DeptChangeVO psnChangeVO = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, psnid);
		stmt.setString(2, psnid);
		stmt.setString(3, endDate);

		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next())
		{
			psnChangeVO = new DeptChangeVO();
			// pk_deptdoc :
			String pk_deptdoc = rs.getString(1);
			psnChangeVO.setAttributeValue("pk_deptdoc",pk_deptdoc==null?null:pk_deptdoc.trim());
			// deptname :
			String deptname = rs.getString(2);
			psnChangeVO.setAttributeValue("deptname",deptname==null?null:deptname.trim());
			// pk_psncl :
			String pk_psncl = rs.getString(3);
			psnChangeVO.setAttributeValue("pk_psncl",pk_psncl==null?null:pk_psncl.trim());
			// psnclassname :
			String psnclassname = rs.getString(4);
			psnChangeVO.setAttributeValue("psnclassname",psnclassname==null?null:psnclassname.trim());
			// pk_om_job :
			String pk_om_job = rs.getString(5);
			psnChangeVO.setAttributeValue("pk_om_job",pk_om_job==null?"":pk_om_job.trim());
			// jobname :
			String jobname = rs.getString(6);
			psnChangeVO.setAttributeValue("jobname",jobname==null?"":jobname.trim());

			// psncode,   :
			String psncode = rs.getString(7);
			psnChangeVO.setAttributeValue("psncode",psncode==null?null:psncode.trim());

			// psnname :
			String psnname = rs.getString(8);
			psnChangeVO.setAttributeValue("psnname",psnname==null?null:psnname.trim());

			// pk_corp :
			String pk_corp = rs.getString(9);
			psnChangeVO.setAttributeValue("pk_corp",pk_corp==null?null:pk_corp.trim());

			// pk_psndoc_deptchg
			String pk_psndoc_deptchg = rs.getString(10);
			psnChangeVO.setAttributeValue("pk_psndoc_deptchg",pk_psndoc_deptchg==null?null:pk_psndoc_deptchg.trim());

            // psnbasid
            String psnbasid = rs.getString(11);
            psnChangeVO.setAttributeValue("pk_psnbasdoc",psnbasid);

			psnChangeVO.setAttributeValue("pk_psndoc",psnid);

		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getPsnDeptChangeData",
		new Object[] { psnid,endDate });
	/*************************************************************/

	return psnChangeVO;
}

/**
 * 处理兼职。
 * 创建日期：(2003-9-24 22:01:31)
 * @return nc.vo.wa.wa_016.DeptChangeVO
 * @param psnid java.lang.String
 * @param endDate java.lang.String
 */
public DeptChangeVO getPsnDeptData(String psnid, String endDate) throws Exception
{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getPsnDeptChangeData",
		new Object[] { psnid,endDate });
	/*************************************************************/

   	String  sql ="select bd_psndoc.pk_deptdoc,bd_deptdoc.deptname, bd_psndoc.pk_psncl, bd_psncl.psnclassname,bd_psndoc.pk_om_job,om_job.jobname, ";
	sql+=" bd_psndoc.psncode, bd_psndoc.psnname,bd_psndoc.pk_corp ";
	sql+=" from bd_psndoc ";
	sql+= " inner join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
	sql+= " inner join bd_psncl on  bd_psndoc.pk_psncl=bd_psncl.pk_psncl  ";
	sql+= " left join om_job on  bd_psndoc.pk_om_job =om_job.pk_om_job  ";

	sql += " where bd_psndoc.pk_psndoc = ? ";

	DeptChangeVO psnChangeVO = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, psnid);
		stmt.setString(2, psnid);
		stmt.setString(3, endDate);

		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next())
		{
			psnChangeVO = new DeptChangeVO();
			// pk_deptdoc :
			String pk_deptdoc = rs.getString(1);
			psnChangeVO.setAttributeValue("pk_deptdoc",pk_deptdoc==null?null:pk_deptdoc.trim());
			// deptname :
			String deptname = rs.getString(2);
			psnChangeVO.setAttributeValue("deptname",deptname==null?null:deptname.trim());
			// pk_psncl :
			String pk_psncl = rs.getString(3);
			psnChangeVO.setAttributeValue("pk_psncl",pk_psncl==null?null:pk_psncl.trim());
			// psnclassname :
			String psnclassname = rs.getString(4);
			psnChangeVO.setAttributeValue("psnclassname",psnclassname==null?null:psnclassname.trim());
			// pk_om_job :
			String pk_om_job = rs.getString(5);
			psnChangeVO.setAttributeValue("pk_om_job",pk_om_job==null?"":pk_om_job.trim());
			// jobname :
			String jobname = rs.getString(6);
			psnChangeVO.setAttributeValue("jobname",jobname==null?"":jobname.trim());

			// psncode,   :
			String psncode = rs.getString(7);
			psnChangeVO.setAttributeValue("psncode",psncode==null?null:psncode.trim());

			// psnname :
			String psnname = rs.getString(8);
			psnChangeVO.setAttributeValue("psnname",psnname==null?null:psnname.trim());

			// pk_corp :
			String pk_corp = rs.getString(9);
			psnChangeVO.setAttributeValue("pk_corp",pk_corp==null?null:pk_corp.trim());

			psnChangeVO.setAttributeValue("pk_psndoc",psnid);

		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getPsnDeptChangeData",
		new Object[] { psnid,endDate });
	/*************************************************************/

	return psnChangeVO;
}


/**
 * 得到某公司指定人员所参与的薪资类别主键
 */
public String[] getWaClassPkOfPsn(String pk_corp, String psnId) throws Exception
{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getWaClassPkOfPsn",
		new Object[] { pk_corp,psnId});
	/*************************************************************/

	String sql="select distinct classid from wa_psn where pk_corp='"+pk_corp+"' and psnid='"+psnId+"' ";

	String[] waClassPks=null;

	Connection con = null;
	PreparedStatement stmt = null;
	Vector<String> vec=new Vector<String>();

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			String waClassPk = rs.getString(1);
			vec.addElement(waClassPk);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	waClassPks=new String[vec.size()];
	vec.copyInto(waClassPks);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getWaClassPkOfPsn",
		new Object[] { pk_corp,psnId });
	/*************************************************************/

	return waClassPks;
}
/**
 * 判别某薪资类别、某部门中是否有人。
 * 创建日期：(2001-6-25 17:24:15)
 * @return boolean
 * @param gzlbId java.lang.String
 * @param DeptId java.lang.String
 */
public boolean havePsn(String gzlbId, String deptId) throws Exception
{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,deptId});
	/*************************************************************/

	String sql = "select distinct 1 from wa_psn where classId = ?  and deptid=?";

	sql+=" and dr=0 ";

	Connection con = null;
	PreparedStatement stmt = null;
	boolean re=false;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		stmt.setString(1, gzlbId);
		stmt.setString(2, deptId);

		ResultSet rs = stmt.executeQuery();
		//
		if(rs.wasNull())
		{
			re=false;
		}
		else
		{
			re=true;
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,deptId });
	/*************************************************************/

	return re;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2001-6-5)
 * @param node nc.vo.wa.wa_016.PsnVO
 * "-3"  保存不成功
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(PsnVO psn) throws Exception
{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "insert", new Object[] { psn });
	/*************************************************************/

//	String sql =
//		"insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid,ipartflag, pk_om_job) select distinct ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+(psn.isPartTime()?1:0)+", '"+psn.getPkOmJob()+"' ";
//	sql
//		+= " from bd_psndoc where not exists(select 1 from wa_psn where classid=? and cyear=? and cperiod=? and dr=0 and  ipartflag="+(psn.isPartTime()?1:0)+"  and ( (psnid=?)  ";
//	if (psn.getBankid() != null)
//	{
//		sql += "or  (bankid = ? and vacccode = ?)";
//	}
//
//	sql += "))";


	String insertSql ="insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid, pk_psnbasdoc, ipartflag, pk_om_job) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+(psn.isPartTime()?1:0)+", '"+psn.getPkOmJob()+"')";

	String conSql = "select distinct 1 from bd_psndoc where not exists(select 1 from wa_psn where classid=? and cyear=? and cperiod=? and dr=0 and  ipartflag="+(psn.isPartTime()?1:0)+"  and ( (psnid=?)  ";

	if (psn.getBankid() != null && psn.getVacccode()!= null && psn.getVacccode().trim().length() > 0)
	{
		conSql += "or  (bankid = ? and vacccode = ?)";
	}

	conSql += ")) and pk_psndoc = ? and dr = 0";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	boolean flag = false;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(conSql);

		if (psn.getClassid() == null)
		{
			stmt.setNull(1, Types.CHAR);
		}
		else
		{
			stmt.setString(1, psn.getClassid());
		}

		if (psn.getCyear() == null)
		{
			stmt.setNull(2, Types.CHAR);
		}
		else
		{
			stmt.setString(2, psn.getCyear());
		}

		if (psn.getCperiod() == null)
		{
			stmt.setNull(3, Types.CHAR);
		}
		else{
			stmt.setString(3, psn.getCperiod());
		}

		if (psn.getPsnid() == null)	{
			stmt.setNull(4, Types.CHAR);
		}
		else{
			stmt.setString(4, psn.getPsnid());
		}

		if (psn.getBankid() != null && psn.getVacccode()!= null && psn.getVacccode().trim().length() > 0){
			stmt.setString(5, psn.getBankid());
			stmt.setString(6, psn.getVacccode());
			stmt.setString(7, psn.getPsnid());
		}
		else
		{
			stmt.setString(5, psn.getPsnid());
		}

		ResultSet rs = null;
		rs = stmt.executeQuery();
		while(rs.next()){
			flag = true;
		}
		//进行插入
		rs.close();
		stmt.close();
		if(flag){
			key = getOID();
			stmt = con.prepareStatement(insertSql);
			stmt.setString(1, key);
			if (psn.getClassid() == null)
			{
				stmt.setNull(2, Types.CHAR);
			}
			else
			{
				stmt.setString(2, psn.getClassid());
			}

			if (psn.getCyear() == null)
			{
				stmt.setNull(3, Types.CHAR);
			}
			else
			{
				stmt.setString(3, psn.getCyear());
			}

			if (psn.getCperiod() == null)
			{
				stmt.setNull(4, Types.CHAR);
			}
			else
			{
				stmt.setString(4, psn.getCperiod());
			}

			if (psn.getIstopflag() == null)
			{
				stmt.setNull(5, Types.INTEGER);
			}
			else
			{
				if (psn.getIstopflag().booleanValue())
				{
					stmt.setInt(5, 1);
				}
				else
				{
					stmt.setInt(5, 0);
				}
			}

			if (psn.getVacccode() == null || psn.getVacccode().trim().length() == 0)
			{
				stmt.setNull(6, Types.CHAR);
			}
			else
			{
				stmt.setString(6, psn.getVacccode().trim());
			}

			if (psn.getBankid() == null)
			{
				stmt.setString(7, "");
			}
			else
			{
				stmt.setString(7, psn.getBankid());
			}

			if (psn.getTaxtableid() == null)
			{
				stmt.setNull(8, Types.CHAR);
			}
			else
			{
				stmt.setString(8, psn.getTaxtableid());
			}
			if (psn.getItaxflag() == null)
			{
				stmt.setNull(9, Types.INTEGER);
			}
			else
			{

				if (psn.getItaxflag().booleanValue())
				{
					stmt.setInt(9, 1);
				}
				else
				{
					stmt.setInt(9, 0);
				}
			}
			if (psn.getPsnid() == null)
			{
				stmt.setNull(10, Types.CHAR);
			}
			else
			{
				stmt.setString(10, psn.getPsnid());
			}

			if (psn.getPsnbasdocPK() == null){
				stmt.setNull(11, Types.CHAR);
			}else{
				stmt.setString(11, psn.getPsnbasdocPK());
			}

			stmt.executeUpdate();
		} else {
			return "-3";
//		// set PK fields:
//		key = getOID();
//		stmt.setString(1, key);
//		// set non PK fields:
//		if (psn.getClassid() == null)
//		{
//			stmt.setNull(2, Types.CHAR);
//			stmt.setNull(11, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(2, psn.getClassid());
//			stmt.setString(11, psn.getClassid());
//		}
//		if (psn.getCyear() == null)
//		{
//			stmt.setNull(3, Types.CHAR);
//			stmt.setNull(12, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(3, psn.getCyear());
//			stmt.setString(12, psn.getCyear());
//		}
//		if (psn.getCperiod() == null)
//		{
//			stmt.setNull(4, Types.CHAR);
//			stmt.setNull(13, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(4, psn.getCperiod());
//			stmt.setString(13, psn.getCperiod());
//		}
//		if (psn.getIstopflag() == null)
//		{
//			stmt.setNull(5, Types.INTEGER);
//		}
//		else
//		{
//			if (psn.getIstopflag().booleanValue())
//			{
//				stmt.setInt(5, 1);
//			}
//			else
//			{
//				stmt.setInt(5, 0);
//			}
//		}
//		if (psn.getVacccode() == null)
//		{
//			stmt.setNull(6, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(6, psn.getVacccode());
//		}
//		if (psn.getBankid() == null)
//		{
//			//stmt.setNull(7, Types.CHAR);
//			stmt.setString(7, "");
//		}
//		else
//		{
//			stmt.setString(7, psn.getBankid());
//			stmt.setString(15, psn.getBankid());
//			stmt.setString(16, psn.getVacccode());
//		}
//		if (psn.getTaxtableid() == null)
//		{
//			stmt.setNull(8, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(8, psn.getTaxtableid());
//		}
//		if (psn.getItaxflag() == null)
//		{
//			stmt.setNull(9, Types.INTEGER);
//		}
//		else
//		{
//
//			if (psn.getItaxflag().booleanValue())
//			{
//				stmt.setInt(9, 1);
//			}
//			else
//			{
//				stmt.setInt(9, 0);
//			}
//		}
//		if (psn.getPsnid() == null)
//		{
//			stmt.setNull(10, Types.CHAR);
//			stmt.setNull(14, Types.CHAR);
//		}
//		else
//		{
//			stmt.setString(10, psn.getPsnid());
//			stmt.setString(14, psn.getPsnid());
//		}
		//
		}


	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "insert", new Object[] { psn });
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一批VO对象。
 *
 * 创建日期：(2001-6-5)
 * @param psns nc.vo.wa.wa_016.PsnVO[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertArray(PsnVO[] psns) throws Exception
{
	if(psns==null || psns.length<=0)
	{
		return null;
	}

	String[] keys = null;
	Connection con = null;
	Statement stmt = null;
	int nbatch = 1000;
	//Vector vecAdd = new Vector();
	try {
            con = getConnection();
            stmt = con.createStatement();
            //stmt = con.prepareStatement(sql);
            keys = getOIDs(psns.length);

            for (int i = 0; i < psns.length; i++) {
                StringBuffer sql = new StringBuffer(
                        "insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid, pk_psnbasdoc, ipartflag, pk_om_job) select distinct ");

                //1
                sql.append("'" + keys[i] + "', ");
                //2
                if (psns[i].getClassid() == null ||

                psns[i].getClassid().length() < 1) {
                    return null;
                } else {
                    sql.append("'" + psns[i].getClassid() + "', ");
                    //stmt.setString(13, psns[i].getClassid());
                }
                //3
                if (psns[i].getCyear() == null ||

                psns[i].getCyear().length() < 1) {
                    //stmt.setNull(3, Types.CHAR);
                    //stmt.setNull(12, Types.CHAR);
                    return null;
                } else {
                    sql.append("'" + psns[i].getCyear() + "', ");
                    //stmt.setString(14, psns[i].getCyear());
                }
                //4
                if (psns[i].getCperiod() == null ||

                psns[i].getCperiod().length() < 1) {
                    return null;
                } else {
                    //stmt.setString(15, psns[i].getCperiod());
                    sql.append("'" + psns[i].getCperiod() + "', ");
                }
                //5

                if (psns[i].getIstopflag() == null) {
                    sql.append(0 + ", ");
                    //stmt.setInt(5, 0);
                } else {
                    if (psns[i].getIstopflag().booleanValue()) {
                        //stmt.setInt(5, 1);
                        sql.append(1 + ", ");
                    } else {
                        //stmt.setInt(5, 0);
                        sql.append(0 + ", ");
                    }
                }
                //6
                if (psns[i].getVacccode() == null ||

                psns[i].getVacccode().length() < 1) {
                    //
                    //stmt.setString(6,"");
                    sql.append("null , ");
                } else {
                    //stmt.setString(6, psns[i].getVacccode());
                    sql.append("'" + psns[i].getVacccode() + "', ");
                }
                //7
                if (psns[i].getBankid() == null ||

                psns[i].getBankid().length() < 1) {
                    //stmt.setString(7, "");
                    sql.append("null, ");
                } else {
                    sql.append("'" + psns[i].getBankid() + "', ");
                    //stmt.setString(7, psns[i].getBankid());
                }
                //8
                if (psns[i].getTaxtableid() == null ||

                psns[i].getTaxtableid().length() < 1) {
                    //stmt.setString(8, "");
                    sql.append("null, ");
                } else {
                    //stmt.setString(8, psns[i].getTaxtableid());
                    sql.append("'" + psns[i].getTaxtableid() + "', ");
                }
                //9
                if (psns[i].getItaxflag() == null) {
                    //stmt.setInt(9, 1);
                    sql.append("1, ");
                } else {
                    if (psns[i].getItaxflag().booleanValue()) {
                        //stmt.setInt(9, 1);
                        sql.append("1, ");
                    } else {
                        //stmt.setInt(9, 0);
                        sql.append("0, ");
                    }
                }
                //10
                if (psns[i].getPsnid() == null ||

                psns[i].getPsnid().length() < 1) {
                    keys[i] = null;
                } else {
                    //stmt.setString(10, psns[i].getPsnid());
                    sql.append("'" + psns[i].getPsnid() + "', ");
                }

                if (psns[i].getPsnbasdocPK() == null || psns[i].getPsnbasdocPK().length()<1){
                	sql.append("null, ");
                }else{
                	sql.append("'" + psns[i].getPsnbasdocPK() + "', ");
                }

                //11
                sql.append((psns[i].isPartTime() ? 1 : 0) + ", ");
                //12
                if (psns[i].getPkOmJob() == null ||

                psns[i].getPkOmJob().trim().length() < 1) {
                    //stmt.setNull(12,Types.CHAR);
                    sql.append("null ");
                } else {
                    //stmt.setString(12,psns[i].getPkOmJob());
                    sql.append("'" + psns[i].getPkOmJob() + "'");
                }
                sql
                        .append(" from bd_psndoc where not exists(select 1 from wa_psn where classid= '");
                //13
                sql.append(psns[i].getClassid() + "' and cyear= '");
                //14
                sql.append(psns[i].getCyear() + "' and cperiod= '");
                //15
                sql.append(psns[i].getCperiod() + "' and psnid= '");
                //16
                sql.append(psns[i].getPsnid() + "' and dr=0 ) ");

                //			if (psns[i].getPsnid() == null)
                //			{
                //				keys[i] = null;
                //			}
                //			else
                //			{
                //				stmt.setString(10, psns[i].getPsnid());
                //				stmt.setString(16, psns[i].getPsnid());

                //stmt.executeUpdate(sql.toString());
                //stmt.executeUpdate(sql.toString());
                stmt.addBatch(sql.toString());
                if( (i+1) % nbatch == 0 || i == psns.length-1  ){
                    stmt.executeBatch();
                    stmt.clearBatch();
                }
            }

	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "insertArray", new Object[] { psns

});
	/*************************************************************/

	return keys;
}

/**
 * 向数据库插入一批VO对象,月末结账使用，不向wa_data,wa_tax中插入数据。
 *
 * 创建日期：(2001-6-5)
 * @param psns nc.vo.wa.wa_016.PsnVO[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertArrayOutData(PsnVO[] psns)
	throws
		java.sql.SQLException,
		nc.bs.pub.SystemException,
		javax.naming.NamingException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"insertArray",
		new Object[] { psns });
	/*************************************************************/
	/*
		String sql =
			"insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		sql+=" where ";
	*/
	String sql =
		"insert into wa_psn(pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid, ipartflag, pk_om_job, pk_psnbasdoc ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	//sql+= " from bd_psndoc where not exists(select 1 from wa_psn where classid=? and cyear=? and cperiod=? and dr=0 and ( (psnid=?)  ";
	//sql += "))";

	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		keys = getOIDs(psns.length);

		for (int i = 0; i < psns.length; i++){
			// set PK fields:
			stmt.setString(1, keys[i]);
			// set non PK fields:
			if (psns[i].getClassid() == null){
				stmt.setNull(2, Types.CHAR);
				//stmt.setNull(11, Types.CHAR);
			}
			else{
				stmt.setString(2, psns[i].getClassid());
				//stmt.setString(11, psns[i].getClassid());
			}
			if (psns[i].getCyear() == null){
				stmt.setNull(3, Types.CHAR);
				//stmt.setNull(12, Types.CHAR);
			}
			else{
				stmt.setString(3, psns[i].getCyear());
				//stmt.setString(12, psns[i].getCyear());
			}
			if (psns[i].getCperiod() == null){
				stmt.setNull(4, Types.CHAR);
				//stmt.setNull(13, Types.CHAR);
			}
			else{
				stmt.setString(4, psns[i].getCperiod());
				//stmt.setString(13, psns[i].getCperiod());
			}
			if (psns[i].getIstopflag() == null){
				stmt.setNull(5, Types.INTEGER);
			}
			else{
				if (psns[i].getIstopflag().booleanValue()){
					stmt.setInt(5, 1);
				}
				else{
					stmt.setInt(5, 0);
				}
			}
			if (psns[i].getVacccode() == null){
				stmt.setNull(6, Types.CHAR);
			}
			else{
				stmt.setString(6, psns[i].getVacccode());
			}
			if (psns[i].getBankid() == null){
				//stmt.setNull(7, Types.CHAR);
				stmt.setString(7, "");
			}
			else{
				stmt.setString(7, psns[i].getBankid());
				//stmt.setString(15, psns[i].getBankid());
				//stmt.setString(16, psns[i].getVacccode());
			}
			if (psns[i].getTaxtableid() == null){
				stmt.setNull(8, Types.CHAR);
			}
			else{
				stmt.setString(8, psns[i].getTaxtableid());
			}
			if (psns[i].getItaxflag() == null){
				stmt.setNull(9, Types.INTEGER);
			}
			else{
				if (psns[i].getItaxflag().booleanValue()){
					stmt.setInt(9, 1);
				}
				else{
					stmt.setInt(9, 0);
				}
			}
			if (psns[i].getPsnid() == null){
				stmt.setNull(10, Types.CHAR);
				//stmt.setNull(14, Types.CHAR);
			}
			else{
				stmt.setString(10, psns[i].getPsnid());
				//stmt.setString(14, psns[i].getPsnid());
			}
			stmt.setInt(11,psns[i].isPartTime()?1:0);
			if(psns[i].getPkOmJob()==null){
				stmt.setNull(12,Types.CHAR);
			}
			else{
				stmt.setString(12,psns[i].getPkOmJob());
			}
            if(psns[i].getPsnbasdocPK()==null){
                stmt.setNull(13,Types.CHAR);
            }
            else{
                stmt.setString(13,psns[i].getPsnbasdocPK());
            }


			int re = stmt.executeUpdate();


		}


	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "insertArray", new Object[] { psns });
	/*************************************************************/

	return keys;
}
/**
 * 判断改用户是否是停发的历史用户
 *
 * 创建日期：(2001-6-5)
 * @return boolean true是停发用户，false不是停发用户
 * @param psnVO nc.vo.wa.wa_016.PsnVO
 * @exception java.sql.SQLException 异常说明。
 */
public boolean isStopUser(PsnVO condPsnVO) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "isStopUser", new Object[] { condPsnVO });
	/*************************************************************/

	String strSql = "select 1 from wa_psn where classid=? and cyear=? and cperiod = ? and istopflag=1 and dr=0 and psnid= ?  and ipartflag="+(condPsnVO.isPartTime()?1:0);

	boolean reflag = false;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		stmt.setString(1, condPsnVO.getClassid());
		stmt.setString(2,condPsnVO.getCyear());
		stmt.setString(3,condPsnVO.getCperiod());
		stmt.setString(4,condPsnVO.getPsnid());
		ResultSet rs = stmt.executeQuery();

		if (rs.next()) { //是当前停发
			reflag = true;
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "isStopUser", new Object[] { condPsnVO });
	/*************************************************************/

	return reflag;
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryAll(String gzlbId,String waYear,String waPeriod) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod});
	/*************************************************************/

	String sql = "";
	if (gzlbId != null)
	{
		sql =
			"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag from wa_psn ";
			sql += "inner join wa_data on wa_psn.psnid=wa_data.psnid and wa_data.classid=? and wa_data.cyear=? and wa_data.cperiod=? ";
			sql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
			sql+= "inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";
			sql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
			sql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

		//sql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";


		sql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 and bd_psndoc.dr=0 and bd_deptdoc.dr=0 ";
		sql+=" order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
	}
	else
	{
		return null;

	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		stmt.setString(4, gzlbId);
		stmt.setString(5, waYear);
		stmt.setString(6, waPeriod);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			// classid :
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());


			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(19);
			psn.setPartTime(iPartFlag==1);

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod });
	/*************************************************************/

	return psns;
}



/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
 //该方法对于查询条件的处理也可以修改成类似queryByWhere的方式，且效率可能会高一些
public PsnVO[] queryAllByWhere(String gzlbId,String waYear,String waPeriod,String stWhere, String tableName) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,stWhere,tableName});
	/*************************************************************/

	String sql = "";
	if (gzlbId != null)
	{
		sql =
			"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp ,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag ,om_job.jobname, bd_psnbasdoc.pk_psnbasdoc, om_job.pk_om_job, ";
			sql += " wa_data.nestdeptid, wa_data.nestpk_om_job, wa_data.nestpsnclid,wa_data.icheckflag from wa_psn ";

			// sql += "inner join wa_data on wa_psn.psnid=wa_data.psnid and wa_data.classid=? and wa_data.cyear=? and wa_data.cperiod=? ";
			sql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc and bd_psndoc.dr=0 ";
 	        sql+= "inner join  bd_psnbasdoc on bd_psndoc.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc and bd_psnbasdoc.dr=0 ";
  	       sql += " inner join wa_data on ( wa_psn.psnid = wa_data.psnid and wa_psn.classId=wa_data.classid  and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod and wa_psn.ipartflag=wa_data.ipartflag and wa_data.dr=0 and wa_psn.dr=0 ) and wa_data.dr=0 ";
			sql+= "inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc and bd_deptdoc.dr=0";


			sql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
			sql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";
			sql+=" left outer join om_job on wa_psn.pk_om_job=om_job.pk_om_job ";

		//sql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
		String existtable = "bd_psndoc,bd_deptdoc,bd_psnbasdoc,bd_psncl";
		if(tableName.indexOf("bd_psncl")>=0 || stWhere.indexOf("bd_psncl.")>=0)
		{
			sql += " inner join bd_psncl on  bd_psndoc.pk_psncl=bd_psncl.pk_psncl and bd_psncl.dr=0 ";
		}

		sql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 ";


		if (stWhere.indexOf(" order ")<0)
		{
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere,"wa_psn","psnid",existtable);
			sql+=" order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
		}else
		{
			String orderbystr = stWhere.substring(stWhere.indexOf(" order "));
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere.substring(0,stWhere.indexOf(" order ")),"wa_psn","psnid",existtable);
			sql += orderbystr;
		}

	}
	else
	{
		return null;

	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		//stmt.setString(4, gzlbId);
		//stmt.setString(5, waYear);
		//stmt.setString(6, waPeriod);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			// classid :
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());


			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id=rs.getString(19);
			psn.setId(id == null ? null : id.trim());

			String ssnum=rs.getString(20);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid=rs.getString(21);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			int iPartFlag=rs.getInt(22);
			psn.setPartTime(iPartFlag==1);

			String jobName=rs.getString(23);
			psn.setOmJobName(jobName == null ? null : jobName.trim());

			String pk_psnbasdoc = rs.getString(24);
			psn.setPsnbasdocPK(pk_psnbasdoc == null ? null : pk_psnbasdoc.trim());

			/**
			 * 	Added by Young 2006-04-12 Start
			 */
			String pk_om_job = rs.getString(25);
			psn.setPkOmJob(pk_om_job == null ? null : pk_om_job.trim());
			/**
			 * 	Added by Young 2006-04-12 End
			 */

			String nestdeptid = rs.getString(26);
			psn.setNestDeptid(nestdeptid == null ? null : nestdeptid.trim());

			String nestpkomjob = rs.getString(27);
			psn.setNestPkOmJob(nestpkomjob == null ? null : nestpkomjob.trim());

			String nestpsnclid = rs.getString(28);
			psn.setNestPsnclid(nestpsnclid == null ? null : nestpsnclid.trim());

			int icheckflag=rs.getInt(29);
			psn.setIcheckflag(icheckflag==1);
			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,stWhere,tableName });
	/*************************************************************/

	return psns;
}
/**
 * 薪资档案查询
 *
 * @return PsnVO[]
 * @param gzlbId String 薪资类别
 * @exception SQLException 异常说明。
 * @throws DAOException 
 */
public PsnVO[] queryAllByWhere(String gzlbId, String waYear, String waPeriod, String stWhere, String tableName,	Boolean bflag) throws SQLException, DAOException {

	//String sql = "";
	//String existtable = "bd_psndoc,bd_deptdoc,bd_psnbasdoc,bd_psncl";

	StringBuffer sqlBuffer = new StringBuffer();
	sqlBuffer.append("select wa_psn.pk_wa_psn, ");             //   1
	sqlBuffer.append("       wa_psn.classid, ");               //   2
	sqlBuffer.append("       wa_psn.cyear, ");                 //   3
	sqlBuffer.append("       wa_psn.cperiod, ");               //   4
	sqlBuffer.append("       wa_psn.istopflag, ");             //   5
	sqlBuffer.append("       wa_psn.vacccode, ");              //   6
	sqlBuffer.append("       wa_psn.bankid, ");                //   7
	sqlBuffer.append("       wa_psn.taxtableid, ");            //   8
	sqlBuffer.append("       wa_psn.itaxflag, ");              //   9
	sqlBuffer.append("       wa_psn.psnid, ");                 //   10
	sqlBuffer.append("       bd_psndoc.psncode, ");            //   11
	sqlBuffer.append("       bd_psndoc.psnname, ");            //   12
	sqlBuffer.append("       bd_deptdoc.deptname, ");          //   13
	sqlBuffer.append("       wa_bank.bank_name, ");            //   14
	sqlBuffer.append("       wa_taxbase.vtblname, ");          //   15
	sqlBuffer.append("       bd_deptdoc.pk_deptdoc, ");        //   16
	sqlBuffer.append("       wa_data.psnclid, ");              //   17
	sqlBuffer.append("       bd_psndoc.pk_corp, ");            //   18
	sqlBuffer.append("       bd_psnbasdoc.id, ");              //   19
	sqlBuffer.append("       bd_psnbasdoc.ssnum, ");           //   20
	sqlBuffer.append("       bd_psndoc.timecardid, ");         //   21
	sqlBuffer.append("       wa_psn.ipartflag, ");             //   22
	sqlBuffer.append("       wa_psn.pk_om_job, ");             //   23
	sqlBuffer.append("       om_job.jobname, ");               //   24
	sqlBuffer.append("       bd_psncl.psnclassname, ");        //   25
	sqlBuffer.append("       bd_psndoc.pk_psnbasdoc, ");        //   26
	sqlBuffer.append("       wa_data.icheckflag, ");        //   27
	sqlBuffer.append("       wa_data.f_110,");//28,add by suhf1 xhhrp
	sqlBuffer.append("       wa_data.f_111");//29,add  by suhf1 xhhrp
	sqlBuffer.append("  from wa_psn " +
			"left outer join om_job  on wa_psn.pk_om_job=om_job.pk_om_job " +
			"left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  " + 
			"left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank " +
			"inner  join wa_data on wa_data.psnid=wa_psn.psnid and wa_psn.classId=wa_data.classid , ").append(tableName);
	sqlBuffer.append(" where    ");
	if (bflag.booleanValue()) { //仅停发
		sqlBuffer.append("  wa_psn.istopflag = 1");
		sqlBuffer.append(" and wa_data.cyear||wa_data.cperiod = (select distinct max(m_data.cyear||m_data.cperiod) from wa_data as m_data where  m_data.classId = '"+gzlbId+"' and (m_data.cyear||m_data.cperiod) <= '"+waYear + waPeriod+ "' and m_data.psnid=wa_psn.psnid )");
	}else{
		sqlBuffer.append("  wa_psn.istopflag = 0 ");
		sqlBuffer.append(" and wa_data.cyear = wa_psn.cyear and wa_data.cperiod = wa_psn.cperiod ");

	}
	sqlBuffer.append("and wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 and bd_psndoc.dr=0 " +/*人员档案必须有bd_psndoc.dr=0 限制*/
			"and ").append(stWhere);


/*	if (gzlbId != null) {
		if (bflag.booleanValue()) { //仅停发
			sql = "select a.pk_wa_psn, a.classid, a.cyear, a.cperiod, a.istopflag, a.vacccode, a.bankid, a.taxtableid, a.itaxflag, a.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,a.ipartflag,a.pk_om_job,om_job.jobname,bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc  from wa_psn a ";
			sql += " left outer join wa_data on ( wa_data.psnid=a.psnid and wa_data.classid=a.classid and a.ipartflag=wa_data.ipartflag and wa_data.dr=0 and a.dr=0 ) ";
			sql += " inner join bd_psndoc  on  a.psnid=bd_psndoc.pk_psndoc  ";
			sql += " inner join  bd_psnbasdoc on a.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc  ";
			sql += " inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";
			sql += " inner join bd_psncl on  wa_data.psnclid=bd_psncl.pk_psncl  ";
			sql += " left  outer join om_job on a.pk_om_job=om_job.pk_om_job ";
			//yxl增加

			sql += "left outer join wa_bank on a.bankid=wa_bank.pk_wa_bank ";
			sql += "left outer join wa_taxbase  on a.taxtableid=wa_taxbase.pk_wa_taxbase  ";

			sql += " where a.classId = ?  and a.cyear=?  and  a.cperiod=? and a.dr= 0 ";
			sql += " and wa_data.classId = '"+gzlbId+"' and wa_data.cyear||wa_data.cperiod = (select distinct max(cyear||cperiod) from wa_data where classId = '"+gzlbId+"' and a.psnid=psnid and dr = 0 ) ";
			sql += " and a.istopflag = 1";
		} else {
			//未停发
			sql = "select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag,wa_psn.pk_om_job,om_job.jobname, bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc from wa_psn ";
			sql += "inner join wa_data on ( wa_psn.psnid = wa_data.psnid and wa_psn.classId=wa_data.classid  and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod and wa_psn.ipartflag=wa_data.ipartflag and wa_data.dr=0 and wa_psn.dr=0 ) ";
			sql += "inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
			sql += "inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";
			sql += " inner join bd_psncl on  wa_data.psnclid=bd_psncl.pk_psncl  ";
			sql += " inner join  bd_psnbasdoc on wa_psn.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc  ";
			sql += "left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
			sql	+= "left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";
			sql+=" left outer join om_job on wa_psn.pk_om_job=om_job.pk_om_job ";

			//sql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";

			sql	+= " where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 ";
			sql += " and wa_psn.istopflag = 0";
		}
        sql += "  and  " + stWhere;
   		if (stWhere.indexOf("order by")<0)
	        sql += " order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
		if (stWhere.indexOf(" order ")<0){
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere,"wa_psn","psnid",existtable);
			sql+=" order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
		}
		else{
			String orderbystr = stWhere.substring(stWhere.indexOf(" order "));
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere.substring(0,stWhere.indexOf(" order ")),"wa_psn","psnid",existtable);
			sql += orderbystr;
		}

		//对于岗位等信息
		if (stWhere.indexOf("v_hr_psndoc.") >= 0) {
				sql = "select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag,wa_psn.pk_om_job,om_job.jobname, bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc from wa_psn ";
				sql += "inner join wa_data on ( wa_psn.psnid = wa_data.psnid and wa_psn.classId=wa_data.classid  and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod and wa_psn.ipartflag=wa_data.ipartflag and wa_data.dr=0 and wa_psn.dr=0 ) ";
				sql += " inner join v_hr_psndoc on wa_data.psnid=v_hr_psndoc.pk_psndoc ";
				sql += "left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
				sql	+= "left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

				sql += " where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 ";
				sql += " and wa_psn.istopflag = 0";
				sql += " and wa_data.pk_om_job = v_hr_psndoc.pk_om_job and wa_psn.classid = wa_data.classid and wa_psn.cyear = wa_data.cyear and wa_psn.cperiod = wa_data.cperiod and wa_psn.dr = 0 ";
				sql += " and wa_data.deptid=bd_deptdoc.pk_deptdoc ";
				sql += " and wa_data.dr=0 and wa_data.istopflag=0";

				sql += "  and  " + stWhere;
				sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psndoc.", "v_hr_psndoc.");
				if (!(stWhere.indexOf("bd_psnbasdoc.corpdef") >= 0 || stWhere.indexOf("bd_psnbasdoc.groupdef") >= 0)) {
					sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psnbasdoc.", "v_hr_psndoc.");
				}
				sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "om_job.", "v_hr_psndoc.");
				sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psncl.", "v_hr_psndoc.");
				sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_deptdoc.", "v_hr_psndoc.");
			}

	} else {
		return null;
	}
*/
	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sqlBuffer.toString());
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		//if (!bflag.booleanValue()) { //仅停发)
		//stmt.setString(4, gzlbId);
		//stmt.setString(5, waYear);
		//stmt.setString(6, waPeriod);
		//}
		//suhf1 xhhrp
		PsnPrimaryToNameForRefpane panname = new PsnPrimaryToNameForRefpane();
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			// classid :
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(5).toString();
			{
				if (istopflag == null) {
					psn.setIstopflag(null);
				} else
					if (istopflag.equals("0")) {
						psn.setIstopflag(new Boolean(false));
					} else
						if (istopflag.equals("1")) {
							psn.setIstopflag(new Boolean(true));
						}
			}
			// vacccode :
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(9).toString();
			{
				if (itaxflag == null) {
					psn.setItaxflag(null);
				} else
					if (itaxflag.equals("0")) {
						psn.setItaxflag(new Boolean(false));
					} else
						if (itaxflag.equals("1")) {
							psn.setItaxflag(new Boolean(true));
						}
			}
			// psnid :
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id=rs.getString(19);
			psn.setId(id == null ? null : id.trim());

			String ssnum=rs.getString(20);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid=rs.getString(21);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			int iPartFlag=rs.getInt(22);

			String pk_om_job=rs.getString(23);
			psn.setPkOmJob(pk_om_job);
			String jobname=rs.getString(24);
			psn.setOmJobName(jobname);
			psn.setPartTime(iPartFlag==1);

			// psnsort
			String psnsort = rs.getString(25);
			psn.setPsnSort(psnsort==null? null:psnsort.trim());

			String pk_psnbasdoc = rs.getString(26);
			psn.setPsnbasdocPK(pk_psnbasdoc==null? null:pk_psnbasdoc.trim());

			String icheckflag = rs.getString(27);
			if(icheckflag != null){
				psn.setIcheckflag(new Integer(icheckflag).intValue()==1);
			}
			//add by suhf1 xhhrp
			String rewardDept = rs.getString(28);
			String tempRewardDept = rs.getString(29);
			
			psn.setM_rewardDept(panname.getDeptNameByPrimary(rewardDept));
			psn.setM_tempRewardGroup(panname.getDefdocNameByprimary(tempRewardDept));
			//add by suhf1 xhhrp

			v.addElement(psn);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}

		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(psns);
	}

	return getDistictVOs(psns);
}

/**
 * 查询尚未审核的数据
 * 根据 queryAllByWhere() 进行改造
 * @param gzlbId
 * @param waYear
 * @param waPeriod
 * @param stWhere
 * @param tableName
 * @param bflag
 * @return
 * @throws SQLException
 * @Deprecated
 *//*

public PsnVO[] queryAllByWhereForUnChecked(
		String gzlbId,
		String waYear,
		String waPeriod,
		String stWhere,
		String tableName,
		Boolean bflag)
		throws SQLException {


		String sql = "";
		String existtable = "bd_psndoc,bd_deptdoc,bd_psnbasdoc,bd_psncl";
		if (gzlbId != null) {
			if (bflag.booleanValue()) { //仅停发
				sql =
					"select a.pk_wa_psn, a.classid, a.cyear, a.cperiod, a.istopflag, a.vacccode, a.bankid, a.taxtableid, a.itaxflag, a.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,a.ipartflag,a.pk_om_job,om_job.jobname,bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc  from wa_psn a ";
				sql += " left outer join wa_data on ( wa_data.psnid=a.psnid and wa_data.classid=a.classid and a.ipartflag=wa_data.ipartflag and wa_data.dr=0 and a.dr=0 and wa_data.icheckflag=0) ";
				sql += " inner join bd_psndoc  on  a.psnid=bd_psndoc.pk_psndoc  ";
				sql += " inner join  bd_psnbasdoc on a.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc  ";
				sql += " inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";
				sql += " inner join bd_psncl on  wa_data.psnclid=bd_psncl.pk_psncl  ";
				sql += " left  outer join om_job on a.pk_om_job=om_job.pk_om_job ";
				//yxl增加

				sql += "left outer join wa_bank on a.bankid=wa_bank.pk_wa_bank ";
				sql += "left outer join wa_taxbase  on a.taxtableid=wa_taxbase.pk_wa_taxbase  ";

				sql += " where a.classId = ?  and a.cyear=?  and  a.cperiod=? and a.dr= 0 ";
				sql += " and wa_data.classId = '"+gzlbId+"' and wa_data.cyear||wa_data.cperiod = (select distinct max(cyear||cperiod) from wa_data where classId = '"+gzlbId+"' and a.psnid=psnid and dr = 0 ) ";
				sql += " and a.istopflag = 1";
			} else {
				//未停发
				sql = "select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag,wa_psn.pk_om_job,om_job.jobname, bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc from wa_psn ";
				sql += "inner join wa_data on ( wa_psn.psnid = wa_data.psnid and wa_psn.classId=wa_data.classid  and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod and wa_psn.ipartflag=wa_data.ipartflag and wa_data.dr=0 and wa_psn.dr=0 and wa_data.icheckflag=0) ";
				sql += "inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
				sql += "inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";
				sql += " inner join bd_psncl on  wa_data.psnclid=bd_psncl.pk_psncl  ";
				sql += " inner join  bd_psnbasdoc on wa_psn.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc  ";
				sql += "left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
				sql	+= "left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";
				sql+=" left outer join om_job on wa_psn.pk_om_job=om_job.pk_om_job ";

				//sql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";

				sql	+= " where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 ";
				sql += " and wa_psn.istopflag = 0";
			}
	        sql += "  and  " + stWhere;
	   		if (stWhere.indexOf("order by")<0)
		        sql += " order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
			if (stWhere.indexOf(" order ")<0){
				sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere,"wa_psn","psnid",existtable);
				sql+=" order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
			}
			else{
				String orderbystr = stWhere.substring(stWhere.indexOf(" order "));
				sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere.substring(0,stWhere.indexOf(" order ")),"wa_psn","psnid",existtable);
				sql += orderbystr;
			}

			//对于岗位等信息
			if (stWhere.indexOf("v_hr_psndoc.") >= 0) {
					sql = "select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,wa_data.psnclid,bd_psndoc.pk_corp,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag,wa_psn.pk_om_job,om_job.jobname, bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc from wa_psn ";
					sql += "inner join wa_data on ( wa_psn.psnid = wa_data.psnid and wa_psn.classId=wa_data.classid  and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod and wa_psn.ipartflag=wa_data.ipartflag and wa_data.dr=0 and wa_psn.dr=0 ) ";
					sql += " inner join v_hr_psndoc on wa_data.psnid=v_hr_psndoc.pk_psndoc ";
					sql += "left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
					sql	+= "left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

					sql += " where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_data.dr=0 ";
					sql += " and wa_psn.istopflag = 0";
					sql += " and wa_data.pk_om_job = v_hr_psndoc.pk_om_job and wa_psn.classid = wa_data.classid and wa_psn.cyear = wa_data.cyear and wa_psn.cperiod = wa_data.cperiod and wa_psn.dr = 0 ";
					sql += " and wa_data.deptid=bd_deptdoc.pk_deptdoc ";
					sql += " and wa_data.dr=0 and wa_data.istopflag=0";

					sql += "  and  " + stWhere;
					sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psndoc.", "v_hr_psndoc.");
					if (!(stWhere.indexOf("bd_psnbasdoc.corpdef") >= 0 || stWhere.indexOf("bd_psnbasdoc.groupdef") >= 0)) {
						sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psnbasdoc.", "v_hr_psndoc.");
					}
					sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "om_job.", "v_hr_psndoc.");
					sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_psncl.", "v_hr_psndoc.");
					sql = nc.vo.hr.global.GlobalTool.replaceString(sql, "bd_deptdoc.", "v_hr_psndoc.");

				}

		} else {
			return null;

		}

		PsnVO psns[] = null;
		Vector v = new Vector();
		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, gzlbId);
			stmt.setString(2, waYear);
			stmt.setString(3, waPeriod);
			//if (!bflag.booleanValue()) { //仅停发)
			//stmt.setString(4, gzlbId);
			//stmt.setString(5, waYear);
			//stmt.setString(6, waPeriod);
			//}

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				PsnVO psn = new PsnVO();
				// pk_wa_psn :
				String pk_wa_psn = rs.getString(1);
				psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
				// classid :
				String classid = rs.getString(2);
				psn.setClassid(classid == null ? null : classid.trim());
				// cyear :
				String cyear = rs.getString(3);
				psn.setCyear(cyear == null ? null : cyear.trim());
				// cperiod :
				String cperiod = rs.getString(4);
				psn.setCperiod(cperiod == null ? null : cperiod.trim());
				// istopflag :
				String istopflag = rs.getObject(5).toString();
				{
					if (istopflag == null) {
						psn.setIstopflag(null);
					} else
						if (istopflag.equals("0")) {
							psn.setIstopflag(new Boolean(false));
						} else
							if (istopflag.equals("1")) {
								psn.setIstopflag(new Boolean(true));
							}
				}
				// vacccode :
				String vacccode = rs.getString(6);
				psn.setVacccode(vacccode == null ? null : vacccode.trim());
				// bankid :
				String bankid = rs.getString(7);
				psn.setBankid(bankid == null ? null : bankid.trim());
				// taxtableid :
				String taxtableid = rs.getString(8);
				psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
				// itaxflag :
				String itaxflag = rs.getObject(9).toString();
				{
					if (itaxflag == null) {
						psn.setItaxflag(null);
					} else
						if (itaxflag.equals("0")) {
							psn.setItaxflag(new Boolean(false));
						} else
							if (itaxflag.equals("1")) {
								psn.setItaxflag(new Boolean(true));
							}
				}
				// psnid :
				String psnid = rs.getString(10);
				psn.setPsnid(psnid == null ? null : psnid.trim());

				// psnNum :
				String psnNum = rs.getString(11);
				psn.setPsnNum(psnNum == null ? null : psnNum.trim());
				// psnName :
				String psnName = rs.getString(12);
				psn.setPsnName(psnName == null ? null : psnName.trim());
				// dept :
				String dept = rs.getString(13);
				psn.setDept(dept == null ? null : dept.trim());

				String bankName = rs.getString(14);
				psn.setBankName(bankName == null ? null : bankName.trim());

				String tblName = rs.getString(15);
				psn.setTaxTableName(tblName == null ? null : tblName.trim());

				String deptId = rs.getString(16);
				psn.setDeptId(deptId == null ? null : deptId.trim());

				String psnClId = rs.getString(17);
				psn.setPsnClId(psnClId == null ? null : psnClId.trim());

				String pk_corp = rs.getString(18);
				psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

				String id=rs.getString(19);
				psn.setId(id == null ? null : id.trim());

				String ssnum=rs.getString(20);
				psn.setSsnum(ssnum == null ? null : ssnum.trim());

				String timecardid=rs.getString(21);
				psn.setTimecardid(timecardid == null ? null : timecardid.trim());

				int iPartFlag=rs.getInt(22);

				String pk_om_job=rs.getString(23);
				psn.setPkOmJob(pk_om_job);
				String jobname=rs.getString(24);
				psn.setOmJobName(jobname);
				psn.setPartTime(iPartFlag==1);

				// psnsort
				String psnsort = rs.getString(25);
				psn.setPsnSort(psnsort==null? null:psnsort.trim());

				String pk_psnbasdoc = rs.getString(26);
				psn.setPsnbasdocPK(pk_psnbasdoc==null? null:pk_psnbasdoc.trim());

				v.addElement(psn);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}

			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		psns = new PsnVO[v.size()];
		if (v.size() > 0) {
			v.copyInto(psns);
		}

		*//*************************************************************//*
		// 保留的系统管理接口：
		afterCallMethod(
			"nc.impl.wa.wa_016.PsnDMO",
			"queryAllByWhere",
			new Object[] { gzlbId, waYear, waPeriod, stWhere, tableName, bflag });
		*//*************************************************************//*

		return getDistictVOs(psns);
		}*/
	/**
	*
	* @param datavos
	* @return
	*/
	public PsnVO[] getDistictVOs(PsnVO[] datavos) {
		if (datavos == null || datavos.length == 0) {
			return null;
		}
		HashMap<String, PsnVO> dataHashMap = new LinkedHashMap<String, PsnVO>();
		for (PsnVO dataVO : datavos) {
			dataHashMap.put(dataVO.getPk_wa_psn(), dataVO);
		}
		return dataHashMap.values().toArray(new PsnVO[dataHashMap.size()]);
	}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param psnVO nc.vo.wa.wa_016.PsnVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryByVO(PsnVO condPsnVO, Boolean isAnd) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryByVO",
		new Object[] { condPsnVO, isAnd });
	/*************************************************************/
/*
	String strSql =
		"select wa_psn.pk_wa_psn,wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname from wa_psn,bd_psndoc,bd_deptdoc ";
*/
	//int ipartflag=0;
	//if(condPsnVO!=null){
	 //   if(condPsnVO.isPartTime()==true){
	//	   ipartflag=1;
	//	}
	//}
	String strSql =
			"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname,bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag, wa_psn.pk_psnbasdoc from wa_psn ";
	strSql += "inner join wa_data on wa_psn.psnid=wa_data.psnid and wa_psn.classid=wa_data.classid and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod ";
	strSql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
	strSql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
	strSql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

	//strSql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
	strSql+= " left outer join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";

	//strSql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=?";

	String strConditionNames = "";
	String strAndOr = "and ";
	if (!isAnd.booleanValue())
	{
		strAndOr = "or  ";
	}
	if (condPsnVO.getClassid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.classid=? ";
	}
	if (condPsnVO.getCyear() != null)
	{
		strConditionNames += strAndOr + "wa_psn.cyear=? ";
	}
	if (condPsnVO.getCperiod() != null)
	{
		strConditionNames += strAndOr + "wa_psn.cperiod=? ";
	}
	if (condPsnVO.getIstopflag() != null)
	{
		strConditionNames += strAndOr + "wa_psn.istopflag=? ";
	}
	if (condPsnVO.getVacccode() != null)
	{
		strConditionNames += strAndOr + "wa_psn.vacccode=? ";
	}
	if (condPsnVO.getBankid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.bankid=? ";
	}
	if (condPsnVO.getTaxtableid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.taxtableid=? ";
	}
	if (condPsnVO.getItaxflag() != null)
	{
		strConditionNames += strAndOr + "wa_psn.itaxflag=? ";
	}
	if (condPsnVO.getPsnid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.psnid=? ";
	}
	if (strConditionNames.length() > 0)
	{
		strConditionNames =
			strConditionNames.substring(3, strConditionNames.length() - 1);
	}
	else
	{
		return null;
	}
	//拼接后的SQL语句
	strSql = strSql + " where " + strConditionNames+" and wa_psn.dr= 0 and wa_data.dr=0 and bd_psndoc.dr=0 ";

	//
	int index = 0;
	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condPsnVO.getClassid() != null)
		{
			stmt.setString(++index, condPsnVO.getClassid());
		}
		if (condPsnVO.getCyear() != null)
		{
			stmt.setString(++index, condPsnVO.getCyear());
		}
		if (condPsnVO.getCperiod() != null)
		{
			stmt.setString(++index, condPsnVO.getCperiod());
		}
		if (condPsnVO.getIstopflag() != null)
		{
			if(condPsnVO.getIstopflag().booleanValue())
			{
				stmt.setInt(++index, 1);
			}
			else
			{
				stmt.setInt(++index, 0);
			}
		}
		if (condPsnVO.getVacccode() != null)
		{
			stmt.setString(++index, condPsnVO.getVacccode());
		}
		if (condPsnVO.getBankid() != null)
		{
			stmt.setString(++index, condPsnVO.getBankid());
		}
		if (condPsnVO.getTaxtableid() != null)
		{
			stmt.setString(++index, condPsnVO.getTaxtableid());
		}
		if (condPsnVO.getItaxflag() != null)
		{
			if(condPsnVO.getItaxflag().booleanValue())
			{
				stmt.setInt(++index, 1);
			}
			else
			{
				stmt.setInt(++index, 0);
			}
		}
		if (condPsnVO.getPsnid() != null)
		{
			stmt.setString(++index, condPsnVO.getPsnid());
		}

		ResultSet rs = stmt.executeQuery();

		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			//
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			//
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			//
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			//
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			//
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			//
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			//
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			//
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			//
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			//
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(19);
			psn.setPartTime(iPartFlag==1);

			String pk_psnbasdoc = rs.getString(20);
			psn.setPsnbasdocPK(pk_psnbasdoc == null ? null : pk_psnbasdoc.trim());

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryByVO",
		new Object[] { condPsnVO, isAnd });
	/*************************************************************/

	return psns;
}
/**
 * 根据VO中所设定的条件返回所有符合条件但不是自己的VO数组
 *
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param psnVO nc.vo.wa.wa_016.PsnVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryByVOExSelf(PsnVO condPsnVO, Boolean isAnd,String pk) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryByVO",
		new Object[] { condPsnVO, isAnd,pk });
	/*************************************************************/
/*
	String strSql =
		"select wa_psn.pk_wa_psn,wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname from wa_psn,bd_psndoc,bd_deptdoc ";
*/
	String strSql =
			"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname,bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag from wa_psn ";
	strSql += "inner join wa_data on wa_psn.psnid=wa_data.psnid and wa_psn.classid=wa_data.classid and wa_psn.cyear=wa_data.cyear and wa_psn.cperiod=wa_data.cperiod ";
	strSql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
	strSql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
	strSql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";

	//strSql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
	strSql+= " left outer join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc  ";

	//strSql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=?";

	String strConditionNames = "";
	String strAndOr = "and ";
	if (!isAnd.booleanValue())
	{
		strAndOr = "or  ";
	}
	if (condPsnVO.getClassid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.classid=? ";
	}
	if (condPsnVO.getCyear() != null)
	{
		strConditionNames += strAndOr + "wa_psn.cyear=? ";
	}
	if (condPsnVO.getCperiod() != null)
	{
		strConditionNames += strAndOr + "wa_psn.cperiod=? ";
	}
	if (condPsnVO.getIstopflag() != null)
	{
		strConditionNames += strAndOr + "wa_psn.istopflag=? ";
	}
	if (condPsnVO.getVacccode() != null)
	{
		strConditionNames += strAndOr + "wa_psn.vacccode=? ";
	}
	if (condPsnVO.getBankid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.bankid=? ";
	}
	if (condPsnVO.getTaxtableid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.taxtableid=? ";
	}
	if (condPsnVO.getItaxflag() != null)
	{
		strConditionNames += strAndOr + "wa_psn.itaxflag=? ";
	}
	if (condPsnVO.getPsnid() != null)
	{
		strConditionNames += strAndOr + "wa_psn.psnid=? ";
	}
	if (strConditionNames.length() > 0)
	{
		strConditionNames =
			strConditionNames.substring(3, strConditionNames.length() - 1);
	}
	else
	{
		return null;
	}
	//拼接后的SQL语句
	strSql = strSql + " where " + strConditionNames +" and wa_psn.pk_wa_psn <> '"+pk+"' and wa_psn.dr= 0 and wa_data.dr=0 and bd_psndoc.dr=0 ";

	//
	int index = 0;
	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condPsnVO.getClassid() != null)
		{
			stmt.setString(++index, condPsnVO.getClassid());
		}
		if (condPsnVO.getCyear() != null)
		{
			stmt.setString(++index, condPsnVO.getCyear());
		}
		if (condPsnVO.getCperiod() != null)
		{
			stmt.setString(++index, condPsnVO.getCperiod());
		}
		if (condPsnVO.getIstopflag() != null)
		{
			if(condPsnVO.getIstopflag().booleanValue())
			{
				stmt.setInt(++index, 1);
			}
			else
			{
				stmt.setInt(++index, 0);
			}
		}
		if (condPsnVO.getVacccode() != null)
		{
			stmt.setString(++index, condPsnVO.getVacccode());
		}
		if (condPsnVO.getBankid() != null)
		{
			stmt.setString(++index, condPsnVO.getBankid());
		}
		if (condPsnVO.getTaxtableid() != null)
		{
			stmt.setString(++index, condPsnVO.getTaxtableid());
		}
		if (condPsnVO.getItaxflag() != null)
		{
			if(condPsnVO.getItaxflag().booleanValue())
			{
				stmt.setInt(++index, 1);
			}
			else
			{
				stmt.setInt(++index, 0);
			}
		}
		if (condPsnVO.getPsnid() != null)
		{
			stmt.setString(++index, condPsnVO.getPsnid());
		}

		ResultSet rs = stmt.executeQuery();

		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			//
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			//
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			//
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			//
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			//
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			//
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			//
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			//
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			//
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			//
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(19);
			psn.setPartTime(iPartFlag==1);

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryByVO",
		new Object[] { condPsnVO, isAnd,pk });
	/*************************************************************/

	return psns;
}
/**
 * 批量增加的语句
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
//该方法对于查询条件的处理也可以修改成类似queryByWhere的方式
public PsnVO[] queryByWhere(
	String dwbm,
	String whereSql,
	String table,
	String gzlbId,
	String year,
	String period)
	throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { dwbm, whereSql, table, gzlbId, year, period });
	/*************************************************************/

	String sql = "";
	if (table.indexOf("v_hr_psndoc") >= 0) {
	    //条件中用到视图
		sql =
			"select v_hr_psndoc.pk_psndoc,  v_hr_psndoc.psncode, v_hr_psndoc.psnname,  v_hr_psndoc.deptname,v_hr_psndoc.pk_deptdoc,v_hr_psndoc.pk_psncl,v_hr_psndoc.pk_corp ,v_hr_psndoc.id,v_hr_psndoc.ssnum,v_hr_psndoc.timecardid from v_hr_psndoc";
		if (table.indexOf("wa_psn") >= 0) {
			sql += " inner join wa_psn on wa_psn.psnid = v_hr_psndoc.pk_psndoc ";
		}
		//支持自定义项目，所以要特殊处理bd_accpsndoc
		if (whereSql.indexOf("bd_psnbasdoc.vdef")>=0 || whereSql.indexOf("bd_psnbasdoc.basgroupdef")>=0)
		{
			sql+=" inner join bd_psnbasdoc on v_hr_psndoc.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc and ";
		}

		sql += "  where v_hr_psndoc.pk_corp='" + dwbm + "' and v_hr_psndoc.sealdate is null  and  ";
		sql += " not exists (select 1 from wa_psn where classid='"
			+ gzlbId
			+ "' and cyear='"
			+ year
			+ "' and cperiod='"
			+ period
			+ "' and psnid=v_hr_psndoc.pk_psndoc and dr=0 )";
		sql += " and v_hr_psndoc.indocflag = 'Y' and ( v_hr_psndoc.psnclscope <> "
			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_APPLY
			+ ") ";
		sql += " and exists ( select 1 from wa_dept where pk_wa_class ='"
			+ gzlbId
			+ "' and isealflag=0 and dr=0 and pk_deptdoc=v_hr_psndoc.pk_deptdoc)";
			//处理被v_hr_psndoc取代的表的条件
		whereSql = nc.vo.hr.global.GlobalTool.replaceString(whereSql,"bd_psndoc","v_hr_psndoc");
		whereSql = nc.vo.hr.global.GlobalTool.replaceString(whereSql,"bd_psncl","v_hr_psndoc");
		whereSql = nc.vo.hr.global.GlobalTool.replaceString(whereSql,"bd_deptdoc","v_hr_psndoc");
		//支持自定义项目，特殊处理bd_accpsndoc
		if (whereSql.indexOf("bd_psnbasdoc.vdef")<0 && whereSql.indexOf("bd_psnbasdoc.basgroupdef")<0) {
			whereSql = nc.vo.hr.global.GlobalTool.replaceString(whereSql,"bd_psnbasdoc","v_hr_psndoc");
		}
		sql += " and " + whereSql;
		if (whereSql.indexOf("order by") < 0) {
			sql += " order by v_hr_psndoc.deptcode, v_hr_psndoc.psncode ";
		}
	} else {
	    //条件未用到视图
		/**
		 * 	Modified by Young 2006-01-18 Start
		 * 	人事信息接口
		 */
		sql =
			"select bd_psndoc.pk_psndoc,  bd_psndoc.psncode, bd_psndoc.psnname,  bd_deptdoc.deptname,bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp ,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid, bd_psndoc.pk_psnbasdoc from ";
		/**
		 * 	Modifie by Young 2006-01-18 End
		 * 	人事信息接口
		 */

		sql += table + "   where bd_psndoc.pk_corp='" + dwbm + "'  and  ";
		sql += " bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  and bd_psndoc.sealdate is null and ";
		sql += " bd_psnbasdoc.pk_psnbasdoc=bd_psndoc.pk_psnbasdoc  and  ";
		if (table.indexOf("wa_psn") >= 0) {
			sql += " wa_psn.psnid = bd_psndoc.pk_psndoc and ";
		}
		if (table.indexOf("bd_psncl") >= 0) {
			sql += " bd_psndoc.pk_psncl=bd_psncl.pk_psncl  and  ";
		}
		sql += " not exists (select 1 from wa_psn where classid='"
			+ gzlbId
			+ "' and cyear='"
			+ year
			+ "' and cperiod='"
			+ period
			+ "' and psnid=bd_psndoc.pk_psndoc  and dr=0 )";
		sql += " and bd_psndoc.dr=0 and bd_deptdoc.dr=0 ";
		sql += " and bd_psndoc.indocflag = 'Y' and ( bd_psndoc.psnclscope <> "
			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_APPLY
			+ ") ";
		if (table.indexOf("bd_psncl") >= 0) {
			sql += " and bd_psncl.dr=0  ";
		}
		sql += " and exists ( select 1 from wa_dept where pk_wa_class ='"
			+ gzlbId
			+ "' and isealflag=0 and dr=0 and pk_deptdoc=bd_deptdoc.pk_deptdoc)";
		sql += " and " + whereSql;
		if (whereSql.indexOf("order by") < 0) {
			sql += " order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
		}
	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			PsnVO psn = new PsnVO();

			// psnid :
			String psnid = rs.getString(1);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(2);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(3);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(4);
			psn.setDept(dept == null ? null : dept.trim());
			psn.setNestDeptName(dept.trim());

			String deptId = rs.getString(5);
			psn.setDeptId(deptId == null ? null : deptId.trim());
			psn.setNestDeptid(deptId.trim());

			String psnClId = rs.getString(6);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());
			psn.setNestPsnclid(psnClId.trim());

			String pk_corp = rs.getString(7);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id = rs.getString(8);
			psn.setId(id == null ? null : id.trim());

			String ssnum = rs.getString(9);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid = rs.getString(10);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			/**
			 * 	Added by Young 2006-01-18 Start
			 * 	人事信息接口
			 */
			String psnbasdocPK = rs.getString(11);
			psn.setPsnbasdocPK(psnbasdocPK == null ? null : psnbasdocPK.trim());
			/**
			 * 	Added by Young 2006-01-18 End
			 * 	人事信息接口
			 */

			v.addElement(psn);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}

		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { dwbm, whereSql, table, gzlbId, year, period });
	/*************************************************************/

	return psns;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2003-9-24 22:01:31)
 * @return nc.vo.wa.wa_016.DeptChangeVO
 * @param psnid java.lang.String
 * @param endDate java.lang.String
 */
public PsnVO[] queryByWhereDeptChangeData(String pk_corp,String whereSql,String table,nc.vo.wa.wa_019.PeriodVO aPeriodVO) throws Exception
{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"getPsnDeptChangeData",
		new Object[] { pk_corp,whereSql,table,aPeriodVO });
	/*************************************************************/
	String gzlbId=aPeriodVO.getClassid();
	String year=aPeriodVO.getCyear();
	String period=aPeriodVO.getCperiod();
	String startDate=aPeriodVO.getCstartdate();
	String endDate=aPeriodVO.getCenddate();
	endDate=startDate;
	//String nestStartDate=aPeriodVO.getNestPeriodVO().getCstartdate();
	//String nestEndDate=aPeriodVO.getNestPeriodVO().getCenddate();
	//String endDate=aPeriodVO.getNestPeriodVO().getCstartdate();
	if(aPeriodVO.isChangeInstantly())
	{
		endDate=aPeriodVO.getCenddate();
	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	Statement stmt = null;

	try {
		con = getConnection();

		/*****************下面加上在bd_psndoc表中有,而hi_psndoc_deptchg中没有的人员***********/
		/**
		 * 	Modified by Young 2006-01-18 Start
		 * 	人事信息接口
		 */
		String sql =
			"select  distinct  bd_psndoc.pk_psndoc,  bd_psndoc.psncode, bd_psndoc.psnname,  bd_deptdoc.deptname,bd_psndoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp ,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,bd_psndoc.pk_om_job ,om_job.jobname,bd_deptdoc.deptcode, '', bd_psndoc.pk_psnbasdoc ,'0'";


		  if (table.indexOf("v_hr_psndoc") != -1) {

              sql += " from bd_psndoc inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc ";
              sql += " left join v_hr_psndoc on v_hr_psndoc.pk_psndoc = bd_psndoc.pk_psndoc and v_hr_psndoc.pk_psnbasdoc = bd_psndoc.pk_psnbasdoc ";

      } else {
			sql+= " from bd_psndoc inner join bd_psnbasdoc  on  bd_psndoc.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc ";
		}


		sql+= " inner join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
		sql+= " left join wa_psn on  bd_psndoc.pk_psndoc=wa_psn.psnid  ";
		sql+= " inner join bd_psncl on  bd_psndoc.pk_psncl=bd_psncl.pk_psncl  ";
		sql+= " left  outer  join om_job on  bd_psndoc.pk_om_job=om_job.pk_om_job  ";
		sql+= " where bd_psndoc.pk_corp='" + pk_corp + "'  and  ";
		sql += " not exists (select 1 from wa_psn where classid='"+ gzlbId+ "' and cyear='" + year + "' and cperiod='"+ period
			+ "' and psnid=bd_psndoc.pk_psndoc and dr=0 )";
		sql += " and bd_psndoc.dr=0 and bd_deptdoc.dr=0 ";
//		sql += " and bd_psndoc.indocflag = 'Y' and ( bd_psndoc.psnclscope="
//			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_WORK
//			+ " or bd_psndoc.psnclscope= "
//			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_RETIRE
//			+ " or bd_psndoc.psnclscope= "
//			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_LEAVE
//			+ " or v_hr_psndoc.psnclscope= "
//			+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_OTHER
//			+ ") ";
		sql += " and bd_psndoc.indocflag = 'Y' and ( bd_psndoc.psnclscope <> " + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_APPLY + ") ";


		if (table.indexOf("bd_psncl") >= 0) {
			sql += " and bd_psncl.dr=0  ";
		}
		sql += " and exists ( select 1 from wa_dept where pk_wa_class ='"
			+ gzlbId
			+ "' and isealflag=0 and dr=0 and pk_deptdoc=bd_deptdoc.pk_deptdoc)";
		sql += " and " + whereSql;
		//批量增加时按照部门、人员编码进行排序
		if (whereSql.indexOf("order by") < 0) {
			sql +=" order by  bd_psndoc.psncode";
		}
		
		stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		//
		while (rs.next()) {
			PsnVO psn = new PsnVO();

			// psnid :
			String psnid = rs.getString(1);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(2);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(3);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(4);
			psn.setDept(dept == null ? null : dept.trim());
			psn.setNestDeptName(dept == null ? null : dept.trim());

			String deptId = rs.getString(5);
			psn.setDeptId(deptId == null ? null : deptId.trim());
			psn.setNestDeptid(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(6);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());
			psn.setNestPsnclid(psnClId == null ? null : psnClId.trim());

			//String pk_corp = rs.getString(7);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id = rs.getString(8);
			psn.setId(id == null ? null : id.trim());

			String ssnum = rs.getString(9);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid = rs.getString(10);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			String pk_om_job = rs.getString(11);
			psn.setPkOmJob(pk_om_job == null ? null : pk_om_job.trim());
			psn.setNestPkOmJob(pk_om_job == null ? null : pk_om_job.trim());

			String jobname = rs.getString(12);
			psn.setOmJobName(jobname == null ? null : jobname.trim());

			if (table.indexOf("v_hr_psndoc") < 0) {
			    String pk_psndoc_sub = rs.getString(14);
			    psn.setPk_psndoc_sub(pk_psndoc_sub == null ? null : pk_psndoc_sub.trim());
			}

			/**
			 * 	Added by Young 2006-01-18 Start
			 * 	人事信息接口
			 */
			String psnbasdocPK = rs.getString(15);
			psn.setPsnbasdocPK(psnbasdocPK == null ? null : psnbasdocPK.trim());
			/**
			 * 	Added by Young 2006-01-18 End
			 * 人事信息接口
			 */

			/**
			 * 是否兼职
			 */
			String partTime = rs.getString(16);
			psn.setPartTime(partTime.equals("0")  ? false : true);

			v.addElement(psn);
		}
		stmt.close();

/*
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			PsnVO psn = new PsnVO();

			// psnid :
			String psnid = rs.getString(1);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(2);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(3);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(4);
			psn.setDept(dept == null ? null : dept.trim());
			psn.setNestDeptName(psn.getDept());

			String deptId = rs.getString(5);
			psn.setDeptId(deptId == null ? null : deptId.trim());
			psn.setNestDeptid(psn.getDeptId());

			String psnClId = rs.getString(6);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());
			psn.setNestPsnclid(psn.getPsnClId());

			//String pk_corp = rs.getString(7);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id = rs.getString(8);
			psn.setId(id == null ? null : id.trim());

			String ssnum = rs.getString(9);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid = rs.getString(10);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			String pk_om_job = rs.getString(11);
			psn.setPkOmJob(pk_om_job == null ? null : pk_om_job.trim());
			String jobname = rs.getString(12);
			psn.setOmJobName(jobname == null ? null : jobname.trim());
			v.addElement(psn);
		}
*/
	}
	catch(Exception e){
	    e.printStackTrace();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}

		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	psns = new PsnVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { pk_corp, whereSql, table, period });
	/*************************************************************/

	return psns;
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryFromBd_psn(String psnId) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { psnId });
	/*************************************************************/

	String sql = "";

	/**
	 * 	Modified by Young 2006-01-18 Start
	 * 	人事信息接口
	 */
	sql = new StringBuffer(100).append("select bd_psndoc.pk_psndoc, bd_psndoc.psncode, bd_psndoc.psnname, bd_deptdoc.deptname,")
			.append(" bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp,bd_psndoc.pk_om_job ,om_job.jobname, bd_psncl.psnclassname, bd_psndoc.pk_psnbasdoc")
			.append(" from bd_psndoc inner join  bd_deptdoc  on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ")
			.append(" left outer join bd_psncl on bd_psncl.pk_psncl = bd_psndoc.pk_psncl ")
			.append(" left outer join  om_job on  bd_psndoc.pk_om_job=om_job.pk_om_job  ")
			.append(" where bd_psndoc.pk_psndoc='").append(psnId).append("' and bd_psndoc.dr=0 and bd_deptdoc.dr=0 ")
			.append(" order by bd_deptdoc.deptname, bd_psndoc.psncode ").toString();
	/**
	 * 	Modified by Young 2006-01-18 End
	 * 人事信息接口
	 */

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);

		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();

			// psnid :
			String psnid = rs.getString(1);
			psn.setPsnid(psnid == null ? null : psnid.trim());

			// psnNum :
			String psnNum = rs.getString(2);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(3);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(4);
			psn.setDept(dept == null ? null : dept.trim());
			psn.setNestDeptName(dept == null ? null : dept.trim());

			String deptId = rs.getString(5);
			psn.setDeptId(deptId == null ? null : deptId.trim());
			psn.setNestDeptid(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(6);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());
			psn.setNestPsnclid(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(7);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String pk_om_job = rs.getString(8);
			psn.setPkOmJob(pk_om_job == null ? null : pk_om_job.trim());
			psn.setNestPkOmJob(pk_om_job == null ? null : pk_om_job.trim());

			String jobname=rs.getString(9);
			psn.setOmJobName(jobname==null ? null : jobname.trim());
			//
			String sortname = rs.getString(10);
			psn.setPsnSort(sortname == null ? null :sortname.trim());
			psn.setNestPsnclIdName(psn.getPsnSort());

			/**
			 * 	Added by Young 2006-01-18 Start
			 * 	人事信息接口
			 */
			String psnbasdocPK = rs.getString(11);
			psn.setPsnbasdocPK(psnbasdocPK==null ? null : psnbasdocPK.trim());
			/**
			 * 	Added by Young 2006-01-18 End
			 * 	人事信息接口
			 */

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { psnId });
	/*************************************************************/

	return psns;
}


	public PsnVO[] queryNeedAddedVO(String[] pk_psndocs, WaGlobalVO globalVO) throws SQLException {

		String sql = "";

		if (pk_psndocs == null || pk_psndocs.length == 0) {
			return null;
		}

		String s = "'" + pk_psndocs[0] + "'";
		for (int i = 1; i < pk_psndocs.length; i++) {
			s = s + ",'" + pk_psndocs[i] + "'";
		}



		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select bd_psndoc.pk_psndoc, "); // 1
		sqlB.append("       bd_psndoc.psncode, "); // 2
		sqlB.append("       bd_psndoc.psnname, "); // 3
		sqlB.append("       bd_deptdoc.deptname, "); // 4
		sqlB.append("       bd_deptdoc.pk_deptdoc, "); // 5
		sqlB.append("       bd_psndoc.pk_psncl, "); // 6
		sqlB.append("       bd_psndoc.pk_corp, "); // 7
		sqlB.append("       bd_psndoc.pk_om_job, "); // 8
		sqlB.append("       om_job.jobname, "); // 9
		sqlB.append("       bd_psncl.psnclassname, "); // 10
		sqlB.append("       bd_psndoc.pk_psnbasdoc "); // 11
		sqlB.append("  from bd_psndoc ");
		sqlB.append(" inner join bd_deptdoc on bd_psndoc.pk_deptdoc = bd_deptdoc.pk_deptdoc ");
		sqlB.append("  left outer join bd_psncl on bd_psncl.pk_psncl = bd_psndoc.pk_psncl ");
		sqlB.append("  left outer join om_job on bd_psndoc.pk_om_job = om_job.pk_om_job ");
		sqlB.append(" where bd_psndoc.pk_psndoc in ( " + s + ") ");
		sqlB.append(" 	and bd_psndoc.pk_deptdoc in (select wa_dept.pk_deptdoc from wa_dept where wa_dept.pk_wa_class = '" + globalVO.getWaClassPK() + "' )");
		sqlB.append("   and bd_psndoc.pk_psndoc not in ");
		sqlB.append("       (select wa_data.psnid ");
		sqlB.append("          from wa_data ");
		sqlB.append("         where wa_data.classid = '" + globalVO.getWaClassPK() + "'");
		sqlB.append("           and wa_data.cyear = '" + globalVO.getWaYear() + "'");
		sqlB.append("           and wa_data.cperiod = '" + globalVO.getWaPeriod() + "') ");
		sqlB.append("   and bd_psndoc.dr = 0 ");
		sqlB.append("   and bd_deptdoc.dr = 0 ");
		sqlB.append(" order by bd_deptdoc.deptname, bd_psndoc.psncode ");

		PsnVO psns[] = null;
		Vector<PsnVO> v = new Vector<PsnVO>();
		Connection con = null;
		PreparedStatement stmt = null;




		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				PsnVO psn = new PsnVO();

				// psnid :
				String psnid = rs.getString(1);
				psn.setPsnid(psnid == null ? null : psnid.trim());

				// psnNum :
				String psnNum = rs.getString(2);
				psn.setPsnNum(psnNum == null ? null : psnNum.trim());
				// psnName :
				String psnName = rs.getString(3);
				psn.setPsnName(psnName == null ? null : psnName.trim());
				// dept :
				String dept = rs.getString(4);
				psn.setDept(dept == null ? null : dept.trim());
				psn.setNestDeptName(dept == null ? null : dept.trim());

				String deptId = rs.getString(5);
				psn.setDeptId(deptId == null ? null : deptId.trim());
				psn.setNestDeptid(deptId == null ? null : deptId.trim());

				String psnClId = rs.getString(6);
				psn.setPsnClId(psnClId == null ? null : psnClId.trim());
				psn.setNestPsnclid(psnClId == null ? null : psnClId.trim());

				String pk_corp = rs.getString(7);
				psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

				String pk_om_job = rs.getString(8);
				psn.setPkOmJob(pk_om_job == null ? null : pk_om_job.trim());
				psn.setNestPkOmJob(pk_om_job == null ? null : pk_om_job.trim());

				String jobname = rs.getString(9);
				psn.setOmJobName(jobname == null ? null : jobname.trim());
				//
				String sortname = rs.getString(10);
				psn.setPsnSort(sortname == null ? null : sortname.trim());
				psn.setNestPsnclIdName(psn.getPsnSort());

				/**
				 * Added by Young 2006-01-18 Start 人事信息接口
				 */
				String psnbasdocPK = rs.getString(11);
				psn.setPsnbasdocPK(psnbasdocPK == null ? null : psnbasdocPK.trim());
				/**
				 * Added by Young 2006-01-18 End 人事信息接口
				 */

				v.addElement(psn);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}

			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		psns = new PsnVO[v.size()];
		if (v.size() > 0) {
			v.copyInto(psns);
		}

		return psns;
}



	public boolean isNeedPsnVO(String pk_deptdoc, String psnid, WaGlobalVO globalVO, boolean isExists) throws SQLException {
		boolean needAddPsn = false;

		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select wa_dept.pk_deptdoc "); // 1
		sqlB.append("  from wa_dept ");
		sqlB.append(" where wa_dept.pk_deptdoc = '");
		sqlB.append(pk_deptdoc);
		sqlB.append(" ' ");
		sqlB.append("   and wa_dept.pk_wa_class = '" + globalVO.getWaClassPK() + "' ");
		if(isExists){
			sqlB.append("   and exists ");
		}else{
			sqlB.append("   and not exists ");
		}

		sqlB.append(" (select 1 ");
		sqlB.append("          from wa_data ");
		sqlB.append("         where wa_data.psnid = '" + psnid + "', wa_data.classid = '" + globalVO.getWaClassPK() + "' ");
		sqlB.append("           and wa_data.cyear = '" + globalVO.getWaYear() + "' ");
		sqlB.append("           and wa_data.cperiod = '" + globalVO.getWaPeriod() + "') ");

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlB.toString());

			ResultSet rs = stmt.executeQuery();

			if (rs.next()) { // 是当前停发
				needAddPsn = true;
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return needAddPsn;

	}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-6-5)
 *
 * @param psn
 *            nc.vo.wa.wa_016.PsnVO
 * @exception java.sql.SQLException
 *                异常说明。
 */
public int update(PsnVO psn) throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/

	String sql =
		"update wa_psn set classid = ?, cyear = ?, cperiod = ?, istopflag = ?, vacccode = ?, bankid = ?, taxtableid = ?, itaxflag = ?, psnid = ? where pk_wa_psn = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	String temsql = "select vacccode from wa_psn where classid = '";
	if (psn.getClassid() != null
		&& psn.getCyear() != null
		&& psn.getCperiod() != null
		&& psn.getBankid() != null
		&& psn.getVacccode() != null
		&& psn.getPrimaryKey() != null) {
		temsql += psn.getClassid();
		temsql += "' and cyear = '";
		temsql += psn.getCyear();
		temsql += "' and cperiod = '";
		temsql += psn.getCperiod();
		temsql += "' and bankid= '";
		temsql += psn.getBankid();
		temsql += "' and vacccode = '";
		temsql += psn.getVacccode();
		temsql += "' and pk_wa_psn <> '";
		temsql += psn.getPrimaryKey();
	}
	temsql += "' and dr = 0";
	int re;
	try {
		con = getConnection();

		if (psn.getBankid() != null
			&& psn.getVacccode() != null
			&& psn.getVacccode().trim().length() > 0) {
			sql += "  and  not exists(select vacccode from (" + temsql + ") b )";
		}
		sql += " and dr=0  and ipartflag=" + (psn.isPartTime() ? 1 : 0);

		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (psn.getClassid() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, psn.getClassid());
			//if (psn.getBankid() != null
				//&& psn.getVacccode() != null
				//&& psn.getVacccode().trim().length() > 0) {
				//stmt.setString(11, psn.getClassid());
			//}
		}
		if (psn.getCyear() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, psn.getCyear());
			//if (psn.getBankid() != null
				//&& psn.getVacccode() != null
				//&& psn.getVacccode().trim().length() > 0) {
				//stmt.setString(12, psn.getCyear());
			//}
		}
		if (psn.getCperiod() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, psn.getCperiod());
			//if (psn.getBankid() != null
				//&& psn.getVacccode() != null
				//&& psn.getVacccode().trim().length() > 0) {
				//stmt.setString(13, psn.getCperiod());
			//}
		}
		if (psn.getIstopflag() == null) {
			stmt.setNull(4, Types.INTEGER);
		}
		else {
			if (psn.getIstopflag().booleanValue()) {
				stmt.setInt(4, 1);
			}
			else {
				stmt.setInt(4, 0);
			}
		}
		if (psn.getVacccode() == null || psn.getVacccode().trim().length() == 0) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, psn.getVacccode().trim());
			//if (psn.getBankid() != null
				//&& psn.getVacccode() != null
				//&& psn.getVacccode().trim().length() > 0) {
				//stmt.setString(15, psn.getVacccode());
				//stmt.setString(16, psn.getPrimaryKey());
			//}
		}
		if (psn.getBankid() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, psn.getBankid());
			//if (psn.getBankid() != null
				//&& psn.getVacccode() != null
				//&& psn.getVacccode().trim().length() > 0) {
				//stmt.setString(14, psn.getBankid());
			//}

		}
		if (psn.getTaxtableid() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, psn.getTaxtableid());
		}
		if (psn.getItaxflag() == null) {
			stmt.setNull(8, Types.INTEGER);
		}
		else {
			if (psn.getItaxflag().booleanValue()) {
				stmt.setInt(8, 1);
			}
			else {
				stmt.setInt(8, 0);
			}
		}
		if (psn.getPsnid() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, psn.getPsnid());
		}
		// find record by PK fields:
		stmt.setString(10, psn.getPrimaryKey());
		//
		re = stmt.executeUpdate();

	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/
	return re;
}

	/**
	 * 更改当前期间的税率表
	 *
	 * @param waclssVO
	 * @param newtaxTable
	 * @throws BusinessException
	 */
	public void updateDefaultTaxTable(WaclassHeaderVO waclssVO,
			String newtaxTable) throws Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "updateDefaultTaxTable",
				new Object[] { waclssVO, newtaxTable });
		/** ********************************************************** */

		String sql = "update wa_psn set taxtableid = ? where classid = ? and cyear = ? and cperiod = ?";

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, newtaxTable);
			stmt.setString(2, waclssVO.getPk_wa_class());
			stmt.setString(3, waclssVO.getCopyear());
			stmt.setString(4, waclssVO.getCopperiod());
			stmt.executeUpdate();

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "updateDefaultTaxTable",
				new Object[] { waclssVO, newtaxTable });
		/** ********************************************************** */

	}
/**
 * 此处插入方法说明。 创建日期：(2005-7-22 13:52:26)
 *
 * @return int
 * @param psns
 *            nc.vo.wa.wa_016.PsnVO[]
 */
public int updatePsnsDeptid(PsnVO[] psns) throws java.sql.SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"updatePsnsDeptid",
		new Object[] {psns});
	/*************************************************************/

	/**
	 * 	Modified by Young 2006-01-18 Start
	 */
	String sql = "select pk_psndoc,pk_deptdoc,pk_om_job,pk_psncl, pk_psnbasdoc from bd_psndoc where  pk_psndoc in (";
	/**
	 * 	Modified by Young 2006-01-18 End
	 */

	for(int i = 0; i < psns.length; i++){
		if(i == psns.length - 1){
			sql += "'";
			sql += psns[i].getPsnid();
			sql += "') ";
		}else{
			sql += "'";
			sql += psns[i].getPsnid();
			sql += "', ";
		}
	}


	Connection con = null;
	PreparedStatement stmt = null;
	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			for(int i = 0; i < psns.length; i++){
				if(psns[i].getPsnid().equals(rs.getString(1))){
					psns[i].setDeptId(rs.getString(2));
					psns[i].setPkOmJob(rs.getString(3));
					psns[i].setPsnClId(rs.getString(4));
					/**
					 * 	Added by Young 2006-01-18 Start
					 * 	人事信息接口
					 */
					psns[i].setPsnbasdocPK(rs.getString(5));
					/**
					 * 	Added by Young 2006-01-18 End
					 * 	人事信息接口
					 */
					break;
				}
			}
		}

	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"checkPsns",
		new Object[] { psns});
	/*************************************************************/
	return 0;
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-6-5)
 * @param psn nc.vo.wa.wa_016.PsnVO
 * @exception java.sql.SQLException 异常说明。
 */
public int updateForMore(PsnVO psn) throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "updateForMore", new Object[] { psn });
	/*************************************************************/

	String sql =
		"update wa_psn set ";
	if (psn.getIstopflag()!=null) {
		sql += "istopflag = ?,";
	}
	sql += "vacccode = ?, bankid = ?, taxtableid = ?, itaxflag = ? where pk_wa_psn = ?";

	//if (psn.getBankid() != null && psn.getVacccode()!=null && psn.getVacccode().trim().length()>0)
	//{
		//sql
			//+= "  and  not exists(select 1 from wa_psn where classid = ? and cyear = ? and cperiod = ? and bankid= ? and vacccode =? and pk_wa_psn <> ? and dr = 0)";
	//}

	//sql+=" and dr=0 and  ipartflag="+(psn.isPartTime()?1:0);
	Connection con = null;
	PreparedStatement stmt = null;
	String temsql = "select vacccode from wa_psn where classid = '";
	if (psn.getClassid() != null
		&& psn.getCyear() != null
		&& psn.getCperiod() != null
		&& psn.getBankid() != null
		&& psn.getVacccode() != null
		&& psn.getPrimaryKey() != null) {
		temsql += psn.getClassid();
		temsql += "' and cyear = '";
		temsql += psn.getCyear();
		temsql += "' and cperiod = '";
		temsql += psn.getCperiod();
		temsql += "' and bankid= '";
		temsql += psn.getBankid();
		temsql += "' and vacccode = '";
		temsql += psn.getVacccode();
		temsql += "' and pk_wa_psn <> '";
		temsql += psn.getPrimaryKey();
	}
	temsql += "' and dr = 0";
	int re;
	try
	{
		con = getConnection();

		if (psn.getBankid() != null
			&& psn.getVacccode() != null
			&& psn.getVacccode().trim().length() > 0) {
			sql += "  and  not exists(select vacccode from (" + temsql + ") b )";
		}
		sql += " and dr=0  and ipartflag=" + (psn.isPartTime() ? 1 : 0);
		stmt = con.prepareStatement(sql);

		// update non PK fields:
		int i = 0;
		if (psn.getIstopflag() != null)
		{
			if (psn.getIstopflag().booleanValue())
			{
				stmt.setInt(1, 1);
			}
			else
			{
				stmt.setInt(1, 0);
			}
			i = 1;
		}
		if (psn.getVacccode() == null)
		{
			stmt.setNull(i + 1, Types.CHAR);
		}
		else
		{
			stmt.setString(i+1, psn.getVacccode());
		}
		if (psn.getBankid() == null)
		{
			stmt.setNull(i+2, Types.CHAR);
		}
		else
		{
			stmt.setString(i+2, psn.getBankid());

		}
		if (psn.getTaxtableid() == null)
		{
			stmt.setNull(i+3, Types.CHAR);
		}
		else
		{
			stmt.setString(i+3, psn.getTaxtableid());
		}
		if (psn.getItaxflag() == null)
		{
			stmt.setNull(i+4, Types.INTEGER);
		}
		else
		{
			if (psn.getItaxflag().booleanValue())
			{
				stmt.setInt(i+4, 1);
			}
			else
			{
				stmt.setInt(i+4, 0);
			}
		}
		// find record by PK fields:
		stmt.setString(i+5, psn.getPrimaryKey());
		//
		re = stmt.executeUpdate();
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "updateForMore", new Object[] { psn });
	/*************************************************************/
	return re;
}
/**
 * 根据人员pk,cyear,cperiod,clsid,istopflag=1 dr=0来唯一确定一条纪录
 *
 * 创建日期：(2001-6-5)
 * @param psn nc.vo.wa.wa_016.PsnVO
 * @exception java.sql.SQLException 异常说明。
 */
public int upStopUser(PsnVO psn) throws Exception {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/

	String sql = "update wa_psn set classid = ?, cyear = ?, cperiod = ?, istopflag = ?, vacccode = ?, bankid = ?, taxtableid = ?, itaxflag = ?, psnid = ? ";
	sql += " where dr=0 and istopflag=1 and psnid=? and classid=? and cyear=? and cperiod=?  and  ipartflag="+(psn.isPartTime()?1:0);
	//放弃冗余保护
	//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
		//sql += "  and  not exists(select 1 from wa_psn where classid = ? and cyear = ? and cperiod = ? and bankid= ? and vacccode =? and pk_wa_psn <> x.pk_wa_psn and istopflag=1 and dr = 0)";
	//}

	//sql += " and dr=0 ";

	Connection con = null;
	PreparedStatement stmt = null;

	int re;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (psn.getClassid() == null) {
			stmt.setNull(1, Types.CHAR);
			stmt.setNull(1,Types.CHAR);
		} else {
			stmt.setString(1, psn.getClassid());
			//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
			stmt.setString(11, psn.getClassid());
			//}
		}
		if (psn.getCyear() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, psn.getCyear());
			//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
			stmt.setString(12, psn.getCyear());
			//}
		}
		if (psn.getCperiod() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, psn.getCperiod());
			//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
			stmt.setString(13, psn.getCperiod());
			//}
		}
		if (psn.getIstopflag() == null) {
			stmt.setNull(4, Types.INTEGER);
		} else {
			if (psn.getIstopflag().booleanValue()) {
				stmt.setInt(4, 1);
			} else {
				stmt.setInt(4, 0);
			}
		}
		if (psn.getVacccode() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, psn.getVacccode());
			//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
				//stmt.setString(15, psn.getVacccode());
				//stmt.setString(16, psn.getPrimaryKey());
			//}
		}
		if (psn.getBankid() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, psn.getBankid());

			//if (psn.getBankid() != null && psn.getVacccode() != null && psn.getVacccode().trim().length() > 0) {
				//stmt.setString(14, psn.getBankid());
			//}

		}
		if (psn.getTaxtableid() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, psn.getTaxtableid());
		}
		if (psn.getItaxflag() == null) {
			stmt.setNull(8, Types.INTEGER);
		} else {
			if (psn.getItaxflag().booleanValue()) {
				stmt.setInt(8, 1);
			} else {
				stmt.setInt(8, 0);
			}
		}
		if (psn.getPsnid() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, psn.getPsnid());
			stmt.setString(10, psn.getPsnid());
		}
		// find record by PK fields:
		//
		re = stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "update", new Object[] { psn });
	/*************************************************************/
	return re;
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryAll_monthEnd(String gzlbId,String waYear,String waPeriod, nc.vo.wa.wa_019.PeriodVO periodvo) throws SQLException {

	PsnVO[] nomalVO=queryAll_monthEnd_nomal( gzlbId, waYear, waPeriod,periodvo);
	PsnVO[] parttimeVO=queryAll_monthEnd_parttime( gzlbId, waYear, waPeriod,periodvo);
	Vector<PsnVO> vec=new Vector<PsnVO>();
	if(nomalVO!=null)
	{
		for(int i=0;i<nomalVO.length;i++)
		{
			vec.addElement(nomalVO[i]);
		}
	}
	if(parttimeVO!=null)
	{
		for(int i=0;i<parttimeVO.length;i++)
		{
			vec.addElement(parttimeVO[i]);
		}
	}
	PsnVO[] psns=new PsnVO[vec.size()];
	vec.copyInto(psns);
	return psns;
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryAll_monthEnd_nomal(String gzlbId,String waYear,String waPeriod, nc.vo.wa.wa_019.PeriodVO periodvo) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,periodvo});
	/*************************************************************/

	String sql = "";
	String endDate=periodvo.getCstartdate();
	if(periodvo.isChangeInstantly())
	{
		endDate=periodvo.getCenddate();
	}
	if (gzlbId != null)
	{
		sql =
			"select  distinct  wa_psn.pk_wa_psn, wa_psn.pk_psnbasdoc, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,bd_psncl.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag,om_job.pk_om_job   from  "; // , hi_psndoc_deptchg.pk_psndoc, periodpsncl.pk_psncl, perioddept.pk_deptdoc, perioddept.deptname,periodjob.pk_om_job
			/*
			sql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc ";
			//sql+="inner join bd_acpsndoc  on  wa_psn.psnid=bd_accpsndoc.pk_psndoc ";
			sql += "inner join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc ";
			sql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
			sql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";
			*/


		sql+="  wa_psn  inner join bd_psndoc on  wa_psn.psnid=bd_psndoc.pk_psndoc and bd_psndoc.dr = 0 ";
		//sql+="   inner join bd_accpsndoc  on  bd_psndoc.pk_psndoc=bd_accpsndoc.pk_psndoc   ";
		sql+=" inner join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc and bd_deptdoc.dr = 0 ";
		sql+=" inner join bd_psncl on  bd_psndoc.pk_psncl=bd_psncl.pk_psncl and bd_psncl.dr = 0 ";
		sql+=" left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank and wa_bank.dr = 0 ";
		sql+=" left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase and wa_taxbase.dr = 0 ";
		sql+=" left outer join om_job on bd_psndoc.pk_om_job=om_job.pk_om_job and om_job.dr = 0 ";
//		sql+=" left outer join   hi_psndoc_deptchg  on  hi_psndoc_deptchg.pk_psndoc= wa_psn.psnid and hi_psndoc_deptchg.dr = 0 ";
//		sql+=" left outer join bd_deptdoc perioddept on  hi_psndoc_deptchg.pk_deptdoc=perioddept.pk_deptdoc  and perioddept.dr = 0  ";
//		sql+=" left outer join bd_psncl   periodpsncl on  hi_psndoc_deptchg.pk_psncl=periodpsncl.pk_psncl and periodpsncl.dr = 0 ";
//		sql+=" left outer join om_job periodjob on  hi_psndoc_deptchg.pk_postdoc=periodjob.pk_om_job  and periodjob.dr = 0 ";
		sql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_psn.ipartflag=0 ";
		sql+=" and bd_psndoc.indocflag = 'Y' "; // and ( bd_psndoc.psnclscope="+nc.vo.hi.pub.CommonValue.PSNCLSCOPE_WORK+" or bd_psndoc.psnclscope= "+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_RETIRE+" or bd_psndoc.psnclscope= "+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_LEAVE + " or bd_psndoc.psnclscope= " + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_OTHER +") ";
//		sql+=" and hi_psndoc_deptchg.recordnum = 0 and hi_psndoc_deptchg.jobtype = 0 and hi_psndoc_deptchg.lastflag = 'Y' ";
//		sql+=" or  hi_psndoc_deptchg.pk_psndoc is null ) ";
		//sql+=" order by bd_deptdoc.deptname, bd_psndoc.psncode ";
	}
	else
	{
		return null;

	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (gzlbId != null)
		{
			stmt.setString(1, gzlbId);
		}
		if (waYear != null)
		{
			stmt.setString(2, waYear);
		}
		if (waPeriod != null)
		{
			stmt.setString(3, waPeriod);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
            // psnbasid
            String psnbasid = rs.getString(2);
            psn.setPsnbasdocPK(psnbasid);
			// classid :
			String classid = rs.getString(3);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(4);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(5);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(6).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(7);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(8);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(9);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(10).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(11);
			psn.setPsnid(psnid == null ? null : psnid.trim());


			// psnNum :
			String psnNum = rs.getString(12);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(13);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(14);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(15);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(16);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(17);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(18);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(19);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(20);
			psn.setPartTime(iPartFlag==1);

			String pk_om_job=rs.getString(21);
			psn.setPkOmJob(pk_om_job);

//			//add
//			String deptchg_psnpk= rs.getString(21);
//			String period_psnclpk = rs.getString(22);
//			String period_deptpk = rs.getString(23);
//			String period_detpname = rs.getString(24);
//			String period_jobpk = rs.getString(25);
//
//			if(deptchg_psnpk!=null && deptchg_psnpk.trim().length()>0){
//				psn.setPsnClId(period_psnclpk == null ? null : period_psnclpk.trim());
//				psn.setDeptId(period_deptpk == null ? null : period_deptpk.trim());
//				psn.setDept(period_detpname == null ? null : period_detpname.trim());
//				psn.setPkOmJob(period_jobpk == null ? null : period_jobpk.trim());
//			}

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod ,periodvo});
	/*************************************************************/

	return psns;
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
public PsnVO[] queryAll_monthEnd_parttime(String gzlbId,String waYear,String waPeriod,nc.vo.wa.wa_019.PeriodVO periodvo) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,periodvo});
	/*************************************************************/

String sql = "";
	String endDate=periodvo.getCstartdate();
	if(periodvo.isChangeInstantly())
	{
		endDate=periodvo.getCenddate();
	}
	if (gzlbId != null)
	{
		sql ="select  distinct  wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,bd_psncl.pk_psncl,bd_psndoc.pk_corp,wa_psn.ipartflag,om_job.pk_om_job , hi_psndoc_deptchg.pk_psndoc, periodpsncl.pk_psncl, perioddept.pk_deptdoc, perioddept.deptname,periodjob.pk_om_job, wa_psn.pk_psnbasdoc from  ";
		sql+=" wa_psn  inner join bd_psndoc on  wa_psn.psnid=bd_psndoc.pk_psndoc and bd_psndoc.dr = 0 ";
		sql+=" left outer join wa_data on wa_data.classid=wa_psn.classid and wa_data.cyear = wa_psn.cyear and wa_data.cperiod = wa_psn.cperiod and wa_data.psnid = wa_psn.psnid and wa_psn.dr = 0 and wa_data.dr = 0 ";
		//sql+="   inner join bd_accpsndoc  on  bd_psndoc.pk_psndoc=bd_accpsndoc.pk_psndoc   ";
		sql+=" inner join bd_deptdoc on  wa_data.deptid=bd_deptdoc.pk_deptdoc and bd_deptdoc.dr = 0 ";
		sql+=" inner join bd_psncl on  wa_data.psnclid=bd_psncl.pk_psncl and bd_psncl.dr = 0 ";
		sql+=" left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank and wa_bank.dr = 0";
		sql+=" left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase and wa_taxbase.dr = 0 ";
		sql+=" left outer join om_job on wa_data.pk_om_job=om_job.pk_om_job and om_job.dr = 0 ";
		sql+=" left outer join hi_psndoc_deptchg on  hi_psndoc_deptchg.pk_psndoc_sub= wa_data.pk_psndoc_sub and hi_psndoc_deptchg.pk_psndoc = wa_data.psnid and hi_psndoc_deptchg.jobtype > 0 and hi_psndoc_deptchg.dr = 0 and wa_data.dr = 0 ";
		sql+=" left outer join bd_deptdoc perioddept on  hi_psndoc_deptchg.pk_deptdoc=perioddept.pk_deptdoc and perioddept.dr = 0 ";
		sql+=" left outer join bd_psncl   periodpsncl on  hi_psndoc_deptchg.pk_psncl=periodpsncl.pk_psncl and periodpsncl.dr = 0 ";
		sql+=" left outer join om_job periodjob on  hi_psndoc_deptchg.pk_postdoc=periodjob.pk_om_job and periodjob.dr = 0 ";
		sql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 and wa_psn.ipartflag=1 ";
		sql+=" and bd_psndoc.indocflag = 'Y' "; //and ( bd_psndoc.psnclscope="+nc.vo.hi.pub.CommonValue.PSNCLSCOPE_WORK+" or bd_psndoc.psnclscope= "+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_RETIRE+" or bd_psndoc.psnclscope= "+ nc.vo.hi.pub.CommonValue.PSNCLSCOPE_LEAVE+" or bd_psndoc.psnclscope= " + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_OTHER +") ";

	}
	else
	{
		return null;

	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (gzlbId != null)
		{
			stmt.setString(1, gzlbId);
		}
		if (waYear != null)
		{
			stmt.setString(2, waYear);
		}
		if (waPeriod != null)
		{
			stmt.setString(3, waPeriod);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			// classid :
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());


			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			int iPartFlag=rs.getInt(19);
			psn.setPartTime(iPartFlag==1);

			String pk_om_job=rs.getString(20);
			psn.setPkOmJob(pk_om_job);

			//add
			String deptchg_psnpk= rs.getString(21);
			String period_psnclpk = rs.getString(22);
			String period_deptpk = rs.getString(23);
			String period_detpname = rs.getString(24);
			String period_jobpk = rs.getString(25);

			if(deptchg_psnpk!=null && deptchg_psnpk.trim().length()>0){
				psn.setPsnClId(period_psnclpk == null ? null : period_psnclpk.trim());
				psn.setDeptId(period_deptpk == null ? null : period_deptpk.trim());
				psn.setDept(period_detpname == null ? null : period_detpname.trim());
				psn.setPkOmJob(period_jobpk == null ? null : period_jobpk.trim());
			}
		        String psnbasid = rs.getString(26);
		        psn.setPsnbasdocPK(psnbasid);

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,periodvo });
	/*************************************************************/

	return psns;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2002-12-13 15:50:53)
 * @return int
 */
private int getDataBaseType() {
	try {
		String dpn = getConnection().getMetaData().getDatabaseProductName();
		if (dpn.toUpperCase().indexOf("DB2") != -1) {
			return DB2;
		}
		if (dpn.toUpperCase().indexOf("ORACLE") != -1) {
			return ORACLE;
		}
		if (dpn.toUpperCase().indexOf("SYBASE") != -1) {
			return SYBASE;
		}
		if (dpn.toUpperCase().indexOf("SQL") != -1) {
			return SQLSERVER;
		}
		if (dpn.toUpperCase().indexOf("ACCESS") != -1) {
			return SQLSERVER;
		}
		return UNKOWNDATABASE;
	} catch (Exception e) {
		reportException(e);
		return -1;
	}
}
/**
 * 此处插入方法说明。
 * 创建日期：(2005-7-21 18:23:02)
 * @return int
 * @param psns nc.vo.wa.wa_016.PsnVO
 * @param itemvos nc.vo.wa.wa_016.ItemsVO
 * @param gzlbout java.lang.String
 * @param gzlbin java.lang.String
 * @param waYear java.lang.String
 * @param waPeriod java.lang.String
 * @exception java.sql.SQLException 异常说明。
 */
public int transSelData(
	PsnVO[] psns,
	ItemsVO[] itemvos,
	String gzlbout,
	String gzlbin,
	String waYear,
	String waPeriod)
	throws java.sql.SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"transSelData",
		new Object[] { psns, itemvos, gzlbout, gzlbin, waYear, waPeriod });
	/*************************************************************/
	if(itemvos == null){
		return 0;
	}
	String sqlstrSQL = "";
	String sqlstrORA1 = "";
	String sqlstrORA2 = "";
	String strSQL = null;
	String strORA1 = null;
	String strORA2 = null;
	boolean bfind = false;
	for (int i = 0; i < itemvos.length; i++) {
		if (itemvos[i].getNname() != null) {
			bfind = true;
			if(itemvos[i].getNcode().indexOf("f_") == -1){
				strSQL =
					" wa_datain."
						+ "f_" + itemvos[i].getNcode()
						+ " = wa_dataout."
						+ itemvos[i].getCode()
						+ " , ";
				strORA1 = " wa_datain."+ "f_" + itemvos[i].getNcode()+ " , ";
				strORA2 = " wa_dataout."+ itemvos[i].getCode()	+ " , ";
			}else{
				strSQL =
					" wa_datain."
						+ itemvos[i].getNcode()
						+ " = wa_dataout."
						+ itemvos[i].getCode()
						+ " , ";
				strORA1 = " wa_datain."+ itemvos[i].getNcode()+ " , ";
				strORA2 = " wa_dataout."+ itemvos[i].getCode()	+ " , ";
			}
			sqlstrSQL += strSQL;
			sqlstrORA1 += strORA1;
			sqlstrORA2 += strORA2;
		}
	}
	if (bfind) {
		sqlstrSQL = sqlstrSQL.substring(0, sqlstrSQL.length() - 2);
		sqlstrORA1 = sqlstrORA1.substring(0, sqlstrORA1.length() - 2);
		sqlstrORA2 = sqlstrORA2.substring(0, sqlstrORA2.length() - 2);
	}
	else {
		return 0;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		for (int i = 0; i < psns.length; i++) {
			if (getDataBaseType() == SQLSERVER){
				String sql =
					"update wa_datain set "
						+ sqlstrSQL
						+ " from wa_data wa_datain,wa_data wa_dataout where wa_datain.psnid = ? and wa_datain.cyear = ? and wa_datain.cperiod = ? and wa_datain.classid = ? and wa_dataout.classid = ? and wa_dataout.psnid = wa_datain.psnid and wa_dataout.cyear = wa_datain.cyear and wa_dataout.cperiod = wa_datain.cperiod and wa_datain.dr = 0 and wa_dataout.dr = 0 ";
				stmt = con.prepareStatement(sql);
				stmt.setString(1, psns[i].getPsnid());
				stmt.setString(2, waYear);
				stmt.setString(3, waPeriod);
				stmt.setString(4, gzlbin);
				stmt.setString(5, gzlbout);
				stmt.executeUpdate();
			}else{
				String sql =
					"update wa_data wa_datain set ("
						+ sqlstrORA1
						+ ")=(select " + sqlstrORA2 + " from wa_data wa_dataout where wa_dataout.classid = ? and wa_dataout.psnid = wa_datain.psnid and wa_dataout.cyear = wa_datain.cyear and wa_dataout.cperiod = wa_datain.cperiod and wa_dataout.dr = 0 )  where wa_datain.psnid = ? and wa_datain.cyear = ? and wa_datain.cperiod = ? and wa_datain.classid = ? and wa_datain.dr = 0 ";
				stmt = con.prepareStatement(sql);
				stmt.setString(1, gzlbout);
				stmt.setString(2, psns[i].getPsnid());
				stmt.setString(3, waYear);
				stmt.setString(4, waPeriod);
				stmt.setString(5, gzlbin);
				stmt.executeUpdate();

			}
		}

	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"transSelData",
		new Object[] { psns, itemvos, gzlbout, gzlbin, waYear, waPeriod });
	/*************************************************************/

	return 0;
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-5)
 * @return nc.vo.wa.wa_016.PsnVO[]
 * @param gzlbId int
 * @exception java.sql.SQLException 异常说明。
 */
 //该方法对于查询条件的处理也可以修改成类似queryByWhere的方式，且效率可能会高一些
public PsnVO[] queryAllByCardIn(String gzlbId,String waYear,String waPeriod,String stWhere, String tableName) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,stWhere,tableName});
	/*************************************************************/

	String sql = "";
	if (gzlbId != null)
	{
		sql =
			"select wa_psn.pk_wa_psn, wa_psn.classid, wa_psn.cyear, wa_psn.cperiod, wa_psn.istopflag, wa_psn.vacccode, wa_psn.bankid, wa_psn.taxtableid, wa_psn.itaxflag, wa_psn.psnid,bd_psndoc.psncode, bd_psndoc.psnname,bd_deptdoc.deptname, wa_bank.bank_name, wa_taxbase.vtblname, bd_deptdoc.pk_deptdoc,bd_psndoc.pk_psncl,bd_psndoc.pk_corp ,bd_psnbasdoc.id,bd_psnbasdoc.ssnum,bd_psndoc.timecardid,wa_psn.ipartflag from wa_psn ";
			
		/**
		 * 如果使用税率表，则会使用到表 wa_waclass
		 */
		if(stWhere.indexOf("wa_waclass")>0){
			sql += " inner join wa_waclass on wa_psn.classid = wa_waclass.pk_wa_class ";
		}
		
			sql+="inner join bd_psndoc  on  wa_psn.psnid=bd_psndoc.pk_psndoc and bd_psndoc.dr=0 ";
			sql+= "inner join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc and bd_deptdoc.dr=0 ";
 	        sql+= "inner join  bd_psnbasdoc on wa_psn.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc and bd_psnbasdoc.dr=0 ";
 	        sql+="inner join wa_data on wa_psn.classid = wa_data.classid " +
			"and wa_psn.cyear = wa_data.cyear " +
			"and wa_psn.cperiod = wa_data.cperiod " +
			"and wa_psn.psnid = wa_data.psnid and wa_data.icheckflag=0 ";

			sql+="left outer join wa_bank on wa_psn.bankid=wa_bank.pk_wa_bank ";
			sql+="left outer join wa_taxbase  on wa_psn.taxtableid=wa_taxbase.pk_wa_taxbase  ";
			

		//sql += " left outer join bd_deptdoc on  bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ";
		String existtable = "bd_psndoc,bd_deptdoc,bd_psnbasdoc,bd_psncl";
		if(tableName.indexOf("bd_psncl")>=0 || stWhere.indexOf("bd_psncl.")>=0)
		{
			sql += " inner join bd_psncl on  bd_psndoc.pk_psncl=bd_psncl.pk_psncl and bd_psncl.dr=0 ";
		}
		
		
		
		sql+=" where wa_psn.classId = ?  and wa_psn.cyear=?  and  wa_psn.cperiod=? and wa_psn.dr= 0 ";//and wa_data.dr=0 ";


		if (stWhere.indexOf(" order ")<0)
		{
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere,"wa_psn","psnid",existtable);
			sql+=" order by bd_deptdoc.deptcode, bd_psndoc.psncode ";
		}else
		{
			String orderbystr = stWhere.substring(stWhere.indexOf(" order "));
			sql+="  and  "+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(stWhere.substring(0,stWhere.indexOf(" order ")),"wa_psn","psnid",existtable);
			sql += orderbystr;
		}

	}
	else
	{
		return null;

	}

	PsnVO psns[] = null;
	Vector<PsnVO> v = new Vector<PsnVO>();
	Connection con = null;
	PreparedStatement stmt = null;

	try
	{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, gzlbId);
		stmt.setString(2, waYear);
		stmt.setString(3, waPeriod);
		//stmt.setString(4, gzlbId);
		//stmt.setString(5, waYear);
		//stmt.setString(6, waPeriod);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next())
		{
			PsnVO psn = new PsnVO();
			// pk_wa_psn :
			String pk_wa_psn = rs.getString(1);
			psn.setPk_wa_psn(pk_wa_psn == null ? null : pk_wa_psn.trim());
			// classid :
			String classid = rs.getString(2);
			psn.setClassid(classid == null ? null : classid.trim());
			// cyear :
			String cyear = rs.getString(3);
			psn.setCyear(cyear == null ? null : cyear.trim());
			// cperiod :
			String cperiod = rs.getString(4);
			psn.setCperiod(cperiod == null ? null : cperiod.trim());
			// istopflag :
			String istopflag = rs.getObject(5).toString();
			{
				if(istopflag == null)
				{
					psn.setIstopflag(null);
				}
				else if(istopflag.equals("0"))
				{
					psn.setIstopflag(new Boolean(false));
				}
				else if(istopflag.equals("1"))
				{
					psn.setIstopflag(new Boolean(true));
				}
			}
			// vacccode :
			String vacccode = rs.getString(6);
			psn.setVacccode(vacccode == null ? null : vacccode.trim());
			// bankid :
			String bankid = rs.getString(7);
			psn.setBankid(bankid == null ? null : bankid.trim());
			// taxtableid :
			String taxtableid = rs.getString(8);
			psn.setTaxtableid(taxtableid == null ? null : taxtableid.trim());
			// itaxflag :
			String itaxflag = rs.getObject(9).toString();
			{
				if(itaxflag == null)
				{
					psn.setItaxflag(null);
				}
				else if(itaxflag.equals("0"))
				{
					psn.setItaxflag(new Boolean(false));
				}
				else if(itaxflag.equals("1"))
				{
					psn.setItaxflag(new Boolean(true));
				}
			}
			// psnid :
			String psnid = rs.getString(10);
			psn.setPsnid(psnid == null ? null : psnid.trim());


			// psnNum :
			String psnNum = rs.getString(11);
			psn.setPsnNum(psnNum == null ? null : psnNum.trim());
			// psnName :
			String psnName = rs.getString(12);
			psn.setPsnName(psnName == null ? null : psnName.trim());
			// dept :
			String dept = rs.getString(13);
			psn.setDept(dept == null ? null : dept.trim());

			String bankName = rs.getString(14);
			psn.setBankName(bankName == null ? null : bankName.trim());

			String tblName = rs.getString(15);
			psn.setTaxTableName(tblName == null ? null : tblName.trim());

			String deptId = rs.getString(16);
			psn.setDeptId(deptId == null ? null : deptId.trim());

			String psnClId = rs.getString(17);
			psn.setPsnClId(psnClId == null ? null : psnClId.trim());

			String pk_corp = rs.getString(18);
			psn.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			String id=rs.getString(19);
			psn.setId(id == null ? null : id.trim());

			String ssnum=rs.getString(20);
			psn.setSsnum(ssnum == null ? null : ssnum.trim());

			String timecardid=rs.getString(21);
			psn.setTimecardid(timecardid == null ? null : timecardid.trim());

			int iPartFlag=rs.getInt(22);
			psn.setPartTime(iPartFlag==1);

			v.addElement(psn);
		}
	}
	finally
	{
		try
		{
			if (stmt != null)
			{
				stmt.close();
			}

		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
			{
				con.close();
			}
		}
		catch (Exception e)
		{
		}
	}
	psns = new PsnVO[v.size()];
	if (v.size() > 0)
	{
		v.copyInto(psns);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.impl.wa.wa_016.PsnDMO",
		"queryAll",
		new Object[] { gzlbId,waYear, waPeriod,stWhere,tableName });
	/*************************************************************/

	return psns;
}

public String getJobName(String pk_om_job) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "getJobName", new Object[] { pk_om_job });
	/*************************************************************/

	String sql = "select jobname from om_job where dr=0 and pk_om_job=? ";

	Connection con = null;
	PreparedStatement stmt = null;

	String re=null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1,pk_om_job);
		ResultSet rs = stmt.executeQuery();
		if(rs.next()){
	        re = rs.getString(1);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "getJobName", new Object[] { pk_om_job });
	/*************************************************************/
	return re;
}

	/**
	 * 	薪资档案批量删除
	 * changed by zhangg
	 * @throws Exception
	 */
	public void delWaPsnAraray(String waClassPK, String year, String period,
			PsnVO[] vos, boolean installHI) throws Exception{

		PersistenceManager sessionManager = null;
		try {

			sessionManager = PersistenceManager.getInstance();
			JdbcSession session = sessionManager.getJdbcSession();

			Vector<SQLParameter> parameterVector = new Vector<SQLParameter>();
			for (PsnVO psnvo : vos) {
				SQLParameter parameter = new SQLParameter();
				parameter.addParam(waClassPK);
				parameter.addParam(year);
				parameter.addParam(period);
				parameter.addParam(psnvo.getPsnid());
				parameterVector.add(parameter);
			}

			StringBuffer sqlB = new StringBuffer();

			for (SQLParameter parameter : parameterVector) {
				//核查薪资该人员是否已经审核。审核则不允许删除
				if(!psnHasChecked(parameter.get(3).toString(), parameter.get(0).toString(), parameter.get(1).toString(), parameter.get(2).toString())){
				sqlB = new StringBuffer();
				sqlB.append("delete from wa_psn where wa_psn.classid = ? and wa_psn.cyear = ? and wa_psn.cperiod = ? and wa_psn.psnid = ? ");
				session.addBatch(sqlB.toString(), parameter);

				sqlB = new StringBuffer();
				sqlB.append("delete from wa_data where wa_data.classid = ? and wa_data.cyear = ? and wa_data.cperiod = ? and wa_data.psnid = ?");
				session.addBatch(sqlB.toString(), parameter);

				sqlB = new StringBuffer();
				sqlB.append("delete from wa_dataz where wa_dataz.classid = ? and wa_dataz.cyear = ? and wa_dataz.cperiod = ? and wa_dataz.psnid = ?");
				session.addBatch(sqlB.toString(), parameter);

				sqlB = new StringBuffer();
				sqlB.append("delete from wa_dataf where wa_dataf.classid = ? and wa_dataf.cyear = ? and wa_dataf.cperiod = ? and wa_dataf.psnid = ?");
				session.addBatch(sqlB.toString(), parameter);

                sqlB = new StringBuffer();
                sqlB.append("delete from wa_data_dept where wa_data_dept.classid = ? and wa_data_dept.cyear = ? and wa_data_dept.cperiod = ? and wa_data_dept.psnid = ?");
                session.addBatch(sqlB.toString(), parameter);

				/**
				 * 删除薪资补发数据(包括每个人的薪资补发汇总表)
				 */
				sqlB = new StringBuffer();
				sqlB.append("delete from wa_redata where wa_redata.classid = ? and wa_redata.cyear = ? and wa_redata.cperiod = ? and wa_redata.psnid = ?");
				session.addBatch(sqlB.toString(), parameter);

				if (installHI) {
					sqlB = new StringBuffer();
					sqlB.append("delete from hi_psndoc_wa where pk_wa_class = ? and cyear = ? and cperiod = ? and pk_psndoc = ?");
					session.addBatch(sqlB.toString(), parameter);
				}

				sqlB = new StringBuffer();
				sqlB.append("delete from wa_tax where pk_wa_class = ? and vcalyear = ? and vcalmonth = ? and psnid = ?");
				session.addBatch(sqlB.toString(), parameter);
			}else{
				System.err.println("系统没有删除已经审核的人员："+parameter.get(3).toString());
			}

			session.executeBatch();

			/**
			 * 删除薪资档案中的人员，不需要重新计算
			 */
//			String sql8 = "update wa_periodstate set  irecaculateflag = 0 where wa_periodstate.dr = 0 and classid = '" + waClassPK
//					+ "' and pk_periodset in (	select pk_wa_period from wa_period where wa_period.dr = 0 and cyear = '" + year + "' and cperiod = '" + period + "')";
//
//			session.executeUpdate(sql8);
			/**
			 * 不需要重置wa_data中补发数据。剩余的补发数据是正确的
			 */
//			String sql9 = "update wa_data set f_11=0, f_10=0, irecaculateflag=0,icheckflag =0 where classid= '"+waClassPK+"' and cyear= '" + year + "' and cperiod= '" + period + "' and istopflag =0 and dr=0 ";
//			session.executeUpdate(sql9);
			}
		} catch (DbException e) {
			throw new nc.vo.pub.BusinessException(e.getMessage());
		} finally {
			if (sessionManager != null) {
				sessionManager.release();
			}
		}
	}


	/**
	 * 查询需要同步的薪资类别
	 *
	 * @param aRecaVO ReCacuVO 查询参数
	 * @return waclazz WaGlobalVO[] 要同步的薪资类别
	 * @throws BusinessException 异常
	 */
	public WaGlobalVO[] queryOtherClass(ReCacuVO aRecaVO) throws SQLException {

		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select wa_waclass.vwaclassname, ");      //   1
		sqlB.append("       wa_periodstate.classid, ");       //   2
		sqlB.append("       wa_period.cyear, ");              //   3
		sqlB.append("       wa_period.cperiod, ");            //   4
		sqlB.append("       wa_periodstate.icheckflag ");     //   5
		sqlB.append("  from wa_waclass, wa_period, wa_periodstate ");
		sqlB.append(" where wa_waclass.pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("   and wa_periodstate.pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("   and (wa_period.cyear || wa_period.cperiod) = ");
		sqlB.append("       (select min(period.cyear || period.cperiod) ");
		sqlB.append("          from wa_period period, wa_periodstate periodstate ");
		sqlB.append("         where periodstate.iaccountmark = 0 ");
		sqlB.append("           and periodstate.pk_periodset = period.pk_wa_period");
		sqlB.append("           and periodstate.classid = wa_periodstate.classid)");
//		sqlB.append("   and wa_period.cstartdate <= '"+aRecaVO.getLogDate()+"' ");zhanghua
//		sqlB.append("   and wa_period.cenddate >= '"+aRecaVO.getLogDate()+"' ");
		sqlB.append("   and wa_periodstate.iaccountmark = 0 ");
		sqlB.append("   and wa_periodstate.pk_periodset = wa_period.pk_wa_period ");
		sqlB.append("   and wa_periodstate.classid = wa_waclass.pk_wa_class ");
		sqlB.append("   and wa_waclass.pk_wa_class <> '"+aRecaVO.getWaClassVO().getPrimaryKey()+"' ");
		sqlB.append("   and wa_waclass.isealflag = 0 ");
		sqlB.append("   and wa_waclass.pk_wa_class in ");
		sqlB.append("       ((select classid ");
		sqlB.append("           from wa_uclsright ");
		sqlB.append("          where pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("            and cuserid = '"+aRecaVO.getUserid()+"' ");
		sqlB.append("            and moduleflag = 0) union ");
		sqlB.append("        (select classid ");
		sqlB.append("           from wa_gclsright ");
		sqlB.append("          where cgroupid in ");
		sqlB.append("                (select pk_role ");
		sqlB.append("                   from sm_user_role ");
		sqlB.append("                  where sm_user_role.cuserid = '"+aRecaVO.getUserid()+"') ");
		sqlB.append("            and pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("            and moduleflag = 0)) ");
		sqlB.append(" order by wa_waclass.vwaclassname ");


		Connection con = null;
		PreparedStatement stmt = null;
		Vector<WaGlobalVO> v = new Vector<WaGlobalVO>();
		WaGlobalVO[] waclazz = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlB.toString());

			ResultSet rs = stmt.executeQuery();

			while(rs.next()){
				WaGlobalVO waclass = new WaGlobalVO();

				// vwaclassname :
				String vwaclassname = rs.getString(1);
				waclass.setWaClassName(vwaclassname == null ? null : vwaclassname.trim());
				// classid :
				String classid = rs.getString(2);
				waclass.setWaClassPK(classid == null ? null : classid.trim());
				// wayear :
				String wayear = rs.getString(3);
				waclass.setWaYear(wayear == null ? null : wayear.trim());
				// waperiod :
				String waperiod = rs.getString(4);
				waclass.setWaPeriod(waperiod == null ? null : waperiod.trim());

				// checkflag:
				Integer checkflag = rs.getInt(5);
				waclass.setCheckFlag(new Integer(checkflag));
				v.addElement(waclass);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		waclazz = new WaGlobalVO[v.size()];
		if (v.size() > 0)
		{
			v.copyInto(waclazz);
		}

		return waclazz;
	}
	/**
	 * 查询修改保存需要同步的薪资类别  不同期间的最新的 类别
	 *2012年11月21日 15:58:11  sqt
	 * @param aRecaVO ReCacuVO 查询参数
	 * @return waclazz WaGlobalVO[] 要同步的薪资类别
	 * @throws BusinessException 异常
	 */
	public WaGlobalVO[] queryOtherClassForEdit(ReCacuVO aRecaVO) throws SQLException {

		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select wa_waclass.vwaclassname, ");      //   1
		sqlB.append("       wa_periodstate.classid, ");       //   2
		sqlB.append("       wa_period.cyear, ");              //   3
		sqlB.append("       wa_period.cperiod, ");            //   4
		sqlB.append("       wa_periodstate.icheckflag ");     //   5
		sqlB.append("  from wa_waclass, wa_period, wa_periodstate ");
		sqlB.append(" where wa_waclass.pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("   and wa_periodstate.pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("   and (wa_period.cyear || wa_period.cperiod) = ");
		sqlB.append("       (select min(period.cyear || period.cperiod) ");
		sqlB.append("          from wa_period period, wa_periodstate periodstate ");
		sqlB.append("         where periodstate.iaccountmark = 0 ");
		sqlB.append("           and periodstate.pk_periodset = period.pk_wa_period");
		sqlB.append("           and periodstate.classid = wa_periodstate.classid)");
		//sqlB.append("   and wa_period.cstartdate <= '"+aRecaVO.getLogDate()+"' ");
		//sqlB.append("   and wa_period.cenddate >= '"+aRecaVO.getLogDate()+"' ");
		sqlB.append("   and wa_periodstate.iaccountmark = 0 ");
		sqlB.append("   and wa_periodstate.pk_periodset = wa_period.pk_wa_period ");
		sqlB.append("   and wa_periodstate.classid = wa_waclass.pk_wa_class ");
		sqlB.append("   and wa_waclass.pk_wa_class <> '"+aRecaVO.getWaClassVO().getPrimaryKey()+"' ");
		sqlB.append("   and wa_waclass.isealflag = 0 ");
		sqlB.append("   and wa_waclass.pk_wa_class in ");
		sqlB.append("       ((select classid ");
		sqlB.append("           from wa_uclsright ");
		sqlB.append("          where pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("            and cuserid = '"+aRecaVO.getUserid()+"' ");
		sqlB.append("            and moduleflag = 0) union ");
		sqlB.append("        (select classid ");
		sqlB.append("           from wa_gclsright ");
		sqlB.append("          where cgroupid in ");
		sqlB.append("                (select pk_role ");
		sqlB.append("                   from sm_user_role ");
		sqlB.append("                  where sm_user_role.cuserid = '"+aRecaVO.getUserid()+"') ");
		sqlB.append("            and pk_corp = '"+aRecaVO.getPk_corp()+"' ");
		sqlB.append("            and moduleflag = 0)) ");
		sqlB.append(" order by wa_waclass.vwaclassname ");


		Connection con = null;
		PreparedStatement stmt = null;
		Vector<WaGlobalVO> v = new Vector<WaGlobalVO>();
		WaGlobalVO[] waclazz = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlB.toString());

			ResultSet rs = stmt.executeQuery();

			while(rs.next()){
				WaGlobalVO waclass = new WaGlobalVO();

				// vwaclassname :
				String vwaclassname = rs.getString(1);
				waclass.setWaClassName(vwaclassname == null ? null : vwaclassname.trim());
				// classid :
				String classid = rs.getString(2);
				waclass.setWaClassPK(classid == null ? null : classid.trim());
				// wayear :
				String wayear = rs.getString(3);
				waclass.setWaYear(wayear == null ? null : wayear.trim());
				// waperiod :
				String waperiod = rs.getString(4);
				waclass.setWaPeriod(waperiod == null ? null : waperiod.trim());

				// checkflag:
				Integer checkflag = rs.getInt(5);
				waclass.setCheckFlag(new Integer(checkflag));
				v.addElement(waclass);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		waclazz = new WaGlobalVO[v.size()];
		if (v.size() > 0)
		{
			v.copyInto(waclazz);
		}

		return waclazz;
	}

	/**
	 * 判断某个类别是否部分审核了。
	 * @param waclass String 薪资类别
	 * @param cyear String 薪资年度
	 * @param cperiod String 薪资期间
	 * @return boolean 是否部分审核，true部分审核过，否则未审核
	 * @throws SQLException 数据库异常
	 * @author zhoucx 2007-11-1 下午04:27:25
	 */
	public boolean isPartCheck(String waclass, String cyear, String cperiod) throws SQLException {

		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select 1 ");      //   1
		sqlB.append("  from wa_data ");
		sqlB.append(" where wa_data.classid = '"+waclass+"' ");
		sqlB.append("   and wa_data.cyear = '"+cyear+"' " );
		sqlB.append("   and wa_data.cperiod = '"+cperiod+"' " );
		sqlB.append("   and wa_data.icheckflag = 1 " );

		boolean isPartCheck = false;
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlB.toString());

			ResultSet rs = stmt.executeQuery();

			if(rs.next()){
				isPartCheck = true;
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return isPartCheck;
	}

	/**
	 * 	测试对数使用
	 */
	public String[] getCountTable(String waClassPk, String year, String period)
		throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "getCountTable",
				new Object[] { waClassPk, year, period });
		/** ********************************************************** */

		Connection con = null;
		PreparedStatement stmt = null;
		String[] result = null;
		try{
			con = getConnection();
			String sql = "select count(*) from wa_psn where classid = '"+waClassPk+"' and cyear = '"+year+"' and cperiod = '"+period+"' and dr = 0 and istopflag = 0";
			String sql2 = "select count(*) from wa_data where classid = '"+waClassPk+"' and cyear = '"+year+"' and cperiod = '"+period+"' and dr = 0 and istopflag = 0";
			String sql3 = "select count(*) from wa_dataz where classid = '"+waClassPk+"' and cyear = '"+year+"' and cperiod = '"+period+"' and dr = 0";

			result = new String[3];
			stmt = prepareStatement(con,sql);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()){
		        result[0] = rs.getString(1);
			}

			stmt = prepareStatement(con,sql2);
			rs = stmt.executeQuery();
			if(rs.next()){
		        result[1] = rs.getString(1);
			}

			stmt = prepareStatement(con,sql3);
			rs = stmt.executeQuery();
			if(rs.next()){
		        result[2] = rs.getString(1);
			}

		}finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/*************************************************************/
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "getCountTable",
				new Object[] { waClassPk, year, period });
		/*************************************************************/

		return result;
	}

	public Vector<String> filterExistsPsn(PsnVO[] psnVOs, ReCacuVO aRecaVO) throws SQLException {
		Connection con = null;
		PreparedStatement stmt = null;

		Vector<String> vPsnids = new Vector<String>();
		try {
			con = getConnection();
			List<CircularlyAccessibleValueObject[]> list = FormatVO.seperateValueObject(psnVOs);

			for (CircularlyAccessibleValueObject[] circularlyAccessibleValueObjects : list) {
				String in = FormatVO.formatArrayToString(circularlyAccessibleValueObjects, "psnid", "'");
				String sql = "select psnid from wa_psn where psnid in( "+ in + " ) and classid = '"+aRecaVO.getWaClassVO().getPrimaryKey()+"' ";
				sql += " and cyear = '"+aRecaVO.getWaYear()+"' and cperiod = '"+aRecaVO.getWaPeriod()+"' ";
				stmt = con.prepareStatement(sql);
				ResultSet rs = stmt.executeQuery();

				while (rs.next()) {
					String psnid = rs.getString(1);
					vPsnids.addElement(psnid);
				}
				if (stmt != null) {
					stmt.close();
				}
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return vPsnids;
	}

	/**
	 * 查询指定薪资类别的未封存的部门。
	 * @param psnVOs
	 * @param aRecaVO
	 * @return
	 * @throws SQLException
	 */
	public Vector<String> filterNotExistsDept(PsnVO[] psnVOs, ReCacuVO aRecaVO) throws SQLException {
		Connection con = null;
		PreparedStatement stmt = null;

		Vector<String> vDeptids = new Vector<String>();
		try {
			con = getConnection();
			List<CircularlyAccessibleValueObject[]> list = FormatVO.seperateValueObject(psnVOs);

			for (CircularlyAccessibleValueObject[] circularlyAccessibleValueObjects : list) {
				String in = FormatVO.formatArrayToString(circularlyAccessibleValueObjects, "deptId", "'");
				String sql = "select pk_deptdoc from wa_dept where  isealflag = 0 and pk_deptdoc in( "+ in + " ) and pk_wa_class = '"+aRecaVO.getWaClassVO().getPrimaryKey()+"' ";

				stmt = con.prepareStatement(sql);
				ResultSet rs = stmt.executeQuery();

				while (rs.next()) {
					String pk_deptdoc = rs.getString(1);
					vDeptids.addElement(pk_deptdoc);
				}
				if (stmt != null) {
					stmt.close();
				}
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		return vDeptids;
	}

	/**
	 * 	Added by Young 2006-05-09 Start
	 */
	/**
	 * 	薪资档案人员的批量增加
	 * 	1、插入wa_psn
	 * 	2、插入wa_data
	 * 	3、插入wa_dataz
	 * 	4、插入wa_dataf
	 * 	5、不停发的插入wa_tax
	 * 	6、修改类别的期间状态
	 */
	public void addPsn(PsnVO[] addPsn, nc.vo.wa.wa_009.ReCacuVO aRecaVO) throws SQLException, nc.bs.pub.SystemException, Exception {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "addPsn(PsnVO[] addPsn)",
				new Object[] { addPsn });
		/** ********************************************************** */
		Connection con = null;

		/******** 1、插入wa_psn *********/
		PreparedStatement stmtwaPsn = null;
		String sqlWaPsn =
			"insert into wa_psn (pk_wa_psn, classid, cyear, cperiod, istopflag, vacccode, bankid, taxtableid, itaxflag, psnid," +
			" pk_psnbasdoc, ipartflag, pk_om_job) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		String[] keyWaPsn = null;

		/*********** 2、插入wa_data **********/
		PreparedStatement stmtwaData = null;
		//add by suhf1 xhhrp f_110,f_111 新增两个字段，奖金科室，临时奖金组
		String sqlWaData =
			"insert into wa_data(pk_wa_data, psnid, psnclid, deptid, classid, cperiod, cyear,irecaculateflag, pk_om_job," +
			" nestpsnclid, nestdeptid, nestpk_om_job, ipartflag,cnestyear,cnestperiod, pk_psndoc_sub, itaxflag, taxtableid," +
			" pk_psnbasdoc,istopflag,f_110,f_111) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)";
		String[] keyWaData = null;


		/********** 3、插入wa_dataz **********/
		PreparedStatement stmtwaDataZ = null;
		String sqlWaDataZ =
			"insert into wa_dataz (pk_wa_dataz, classid, cyear, cperiod, psnid, pk_psnbasdoc ) values (?, ?, ?, ?, ?, ?)";

		/********** 4、插入wa_dataf *********/
		PreparedStatement stmtwaDataF = null;
		String sqlWaDataF =
			"insert into wa_dataf (pk_wa_dataf, classid, cyear, cperiod, psnid, pk_psnbasdoc ) values (?, ?, ?, ?, ?, ?)";

		/*************** 5、不停发的插入wa_tax ***************/
		PreparedStatement stmtwaTax = null;
		String sqlWaTax =
			"insert into wa_tax (pk_wa_tax, pk_wa_class, vcalyear, vcalmonth, psnid,ftaxmny, ftax, fmny, fmnyz, f_8, f_10, ftaxz," +
			" pk_psnbasdoc ) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		String[] keyWaTax = null;

		/******* 6、修改类别的期间状态 *******/
		PreparedStatement stmtwaPeriod = null;
		String sqlWaPeriod =
			"update wa_periodstate set irecaculateflag=?, iaccountmark=?, icheckflag=?, daccdate=?, irecheckflag=?, ipayoffflag=?" +
			" where pk_periodset in (select pk_wa_period from wa_period where classid = ? and cyear = ? and cperiod = ?)";
		PreparedStatement stmtwaPeriod2 = null;
		String sqlWaPeriod2 =
			"update wa_period set irecaculateflag=?, iaccountmark=?, icheckflag=?, daccdate=?, irecheckflag=?, ipayoffflag=?" +
			" where classid = ? and cyear = ? and cperiod = ?";
		try{
			con = getConnection();

			/********** 1、插入wa_psn ***********/
			stmtwaPsn = con.prepareStatement(sqlWaPsn);
			keyWaPsn = getOIDs(addPsn.length);

			for (int i=0; i<addPsn.length; i++){
				// pk
				stmtwaPsn.setString(1, keyWaPsn[i]);
				// classid
				stmtwaPsn.setString(2, addPsn[i].getClassid());
				// cyear
				stmtwaPsn.setString(3, addPsn[i].getCyear());
				// cperiod
				stmtwaPsn.setString(4, addPsn[i].getCperiod());
				// istopflag
				if (addPsn[i].getIstopflag().booleanValue()) {
					stmtwaPsn.setInt(5, 1);
                } else {
                	stmtwaPsn.setInt(5, 0);
                }
				// vacccode
				if (addPsn[i].getVacccode()==null){
					stmtwaPsn.setNull(6, Types.CHAR);
				}else{
					stmtwaPsn.setString(6, addPsn[i].getVacccode());
				}
				// bankid
				if (addPsn[i].getBankid()==null){
					stmtwaPsn.setNull(7, Types.CHAR);
				}else{
					stmtwaPsn.setString(7, addPsn[i].getBankid());
				}
				// taxtableid
				if (addPsn[i].getTaxtableid()==null){
					stmtwaPsn.setNull(8, Types.CHAR);
				}else{
					stmtwaPsn.setString(8, addPsn[i].getTaxtableid());
				}
				// itaxflag
				if (addPsn[i].getItaxflag().booleanValue()){
					stmtwaPsn.setInt(9, 1);
				}else{
					stmtwaPsn.setInt(9, 0);
				}
				// psnid
				stmtwaPsn.setString(10, addPsn[i].getPsnid());
				// pk_psnbasdoc
				stmtwaPsn.setString(11, addPsn[i].getPsnbasdocPK());
				//	ipartflag
				stmtwaPsn.setInt(12, (addPsn[i].isPartTime() ? 1 : 0) );
				// pk_om_job
				if (addPsn[i].getPkOmJob()==null){
					stmtwaPsn.setNull(13, Types.CHAR);
				}else{
					stmtwaPsn.setString(13, addPsn[i].getPkOmJob());
				}
				stmtwaPsn.addBatch();
			}
			stmtwaPsn.executeBatch();

			/*********** 2、插入wa_data **********/
			stmtwaData = con.prepareStatement(sqlWaData);
			keyWaData = getOIDs(addPsn.length);

			for (int i=0; i<addPsn.length; i++){
				// pk
				stmtwaData.setString(1, keyWaData[i]);
				// psnid
				stmtwaData.setString(2, addPsn[i].getPsnid());
				// psnclid
				stmtwaData.setString(3, addPsn[i].getPsnClId());
				// deptid
				stmtwaData.setString(4, addPsn[i].getDeptId());
				// classid
				stmtwaData.setString(5, addPsn[i].getClassid());
//				 cperiod
				stmtwaData.setString(6, addPsn[i].getCperiod());
				//	cyear
				stmtwaData.setString(7, addPsn[i].getCyear());
				//	irecaculateflag
				stmtwaData.setInt(8, 0);
				//	pk_om_job
				if (addPsn[i].getPkOmJob()==null){
					stmtwaData.setNull(9, Types.CHAR);
				}else{
					stmtwaData.setString(9, addPsn[i].getPkOmJob());
				}
				//	nestpsnclid
				stmtwaData.setString(10, addPsn[i].getNestPsnclid());
				//	nestdeptid
				stmtwaData.setString(11, addPsn[i].getNestDeptid());
				// nestpk_om_job
				stmtwaData.setString(12, addPsn[i].getNestPkOmJob());
				// ipartflag
				stmtwaData.setInt(13, (addPsn[i].isPartTime() ? 1 : 0) );
				//	cnestyear
				if (aRecaVO.getNestWaPeriodvo().getCyear()==null){
					stmtwaData.setNull(14, Types.CHAR);
				}else{
					stmtwaData.setString(14, aRecaVO.getNestWaPeriodvo().getCyear());
				}
				//	cnestperiod
				if (aRecaVO.getNestWaPeriodvo().getCperiod()==null){
					stmtwaData.setNull(15, Types.CHAR);
				}else{
					stmtwaData.setString(15, aRecaVO.getNestWaPeriodvo().getCperiod());
				}
				//	pk_psndoc_sub
				if (addPsn[i].getPk_psndoc_sub()==null){
					stmtwaData.setNull(16, Types.CHAR);
				}else{
					stmtwaData.setString(16, addPsn[i].getPk_psndoc_sub());
				}
				//	itaxflag
				if (addPsn[i].getItaxflag().booleanValue()){
					stmtwaData.setInt(17, 1);
				}else{
					stmtwaData.setInt(17, 0);
				}
				//	taxtableid
				if (addPsn[i].getTaxtableid()==null){
					stmtwaData.setNull(18, Types.CHAR);
				}else{
					stmtwaData.setString(18, addPsn[i].getTaxtableid());
				}
				//	pk_psnbasdoc
				stmtwaData.setString(19, addPsn[i].getPsnbasdocPK());
                //
                stmtwaData.setInt(20,addPsn[i].getIstopflag().booleanValue()?1:0);
                
                //add by suhf1 xhhrp
                stmtwaData.setString(21, addPsn[i].getM_rewardDept());
                stmtwaData.setString(22, addPsn[i].getM_tempRewardGroup());
                
				stmtwaData.addBatch();
			}
			stmtwaData.executeBatch();


			/********** 3、插入wa_dataz **********/
			stmtwaDataZ = con.prepareStatement(sqlWaDataZ);

			for (int i=0; i<addPsn.length; i++){
				// pk
				stmtwaDataZ.setString(1, keyWaData[i]);
				// classid
				stmtwaDataZ.setString(2, addPsn[i].getClassid());
				// cyear
				stmtwaDataZ.setString(3, addPsn[i].getCyear());
				// cperiod
				stmtwaDataZ.setString(4, addPsn[i].getCperiod());
				// psnid
				stmtwaDataZ.setString(5, addPsn[i].getPsnid());
				// pk_psnbasdoc
				stmtwaDataZ.setString(6, addPsn[i].getPsnbasdocPK());
				// cperiod

				stmtwaDataZ.addBatch();
			}
			stmtwaDataZ.executeBatch();


			if (!aRecaVO.getCurrentBO().isSingleMain()
					&& !aRecaVO.getCurrentBO().isZhuBi()){ //主辅币
				/********** 4、插入wa_dataf *********/
				stmtwaDataF = con.prepareStatement(sqlWaDataF);

				for (int i=0; i<addPsn.length; i++){
					// pk
					stmtwaDataF.setString(1, keyWaData[i]);
					// classid
					stmtwaDataF.setString(2, addPsn[i].getClassid());
					// cyear
					stmtwaDataF.setString(3, addPsn[i].getCyear());
					// cperiod
					stmtwaDataF.setString(4, addPsn[i].getCperiod());
					// psnid
					stmtwaDataF.setString(5, addPsn[i].getPsnid());
					// pk_psnbasdoc
					stmtwaDataF.setString(6, addPsn[i].getPsnbasdocPK());

					stmtwaDataF.addBatch();
				}
				stmtwaDataF.executeBatch();
			}

			if (!addPsn[0].getIstopflag().booleanValue()){
				/*************** 5、不停发的插入wa_tax ***************/
				stmtwaTax = con.prepareStatement(sqlWaTax);
				keyWaTax = getOIDs(addPsn.length);
				for (int i=0; i<addPsn.length; i++){
					// pk_wa_tax
					stmtwaTax.setString(1, keyWaTax[i]);
					//	pk_wa_class
					stmtwaTax.setString(2, addPsn[i].getClassid());
					//	vcalyear
					stmtwaTax.setString(3, addPsn[i].getCyear());
					//	vcalmonth
					stmtwaTax.setString(4, addPsn[i].getCperiod());
					//	psnid
					stmtwaTax.setString(5, addPsn[i].getPsnid());
					//	ftaxmny
					stmtwaTax.setInt(6, 0);
	//				ftax
					stmtwaTax.setInt(7, 0);
	//				fmny
					stmtwaTax.setInt(8, 0);
	//				fmnyz
					stmtwaTax.setInt(9, 0);
	//				f_8
					stmtwaTax.setInt(10, 0);
	//				f_10
					stmtwaTax.setInt(11, 0);
	//				ftaxz
					stmtwaTax.setInt(12, 0);
					//	pk_psnbasdoc
					stmtwaTax.setString(13, addPsn[i].getPsnbasdocPK());

					stmtwaTax.addBatch();
				}
				stmtwaTax.executeBatch();
			}

			/********* 6、修改类别的期间状态 *********/
			stmtwaPeriod = con.prepareStatement(sqlWaPeriod);
			stmtwaPeriod2 = con.prepareStatement(sqlWaPeriod2);
			//	irecaculateflag
			stmtwaPeriod.setInt(1, 0);
			stmtwaPeriod2.setInt(1, 0);
//			iaccountmark
			stmtwaPeriod.setInt(2, 0);
			stmtwaPeriod2.setInt(2, 0);
//			icheckflag
			stmtwaPeriod.setInt(3, 0);
			stmtwaPeriod2.setInt(3, 0);
//			daccdate
			stmtwaPeriod.setString(4, new UFDate().toString());
			stmtwaPeriod2.setString(4, new UFDate().toString());
//			irecheckflag
			stmtwaPeriod.setInt(5, 0);
			stmtwaPeriod2.setInt(5, 0);
//			ipayoffflag
			stmtwaPeriod.setInt(6, 0);
			stmtwaPeriod2.setInt(6, 0);
//			 classid
			stmtwaPeriod.setString(7, addPsn[0].getClassid());
			stmtwaPeriod2.setString(7, addPsn[0].getClassid());
			// cyear
			stmtwaPeriod.setString(8, addPsn[0].getCyear());
			stmtwaPeriod2.setString(8, addPsn[0].getCyear());
			// cperiod
			stmtwaPeriod.setString(9, addPsn[0].getCperiod());
			stmtwaPeriod2.setString(9, addPsn[0].getCperiod());

			stmtwaPeriod.executeUpdate();
			stmtwaPeriod2.executeUpdate();

		}finally {
			try {
				if (stmtwaPsn != null) {
					stmtwaPsn.close();
				}
				if (stmtwaData != null) {
					stmtwaData.close();
				}
				if (stmtwaDataZ != null) {
					stmtwaDataZ.close();
				}
				if (stmtwaDataF != null) {
					stmtwaDataF.close();
				}
				if (stmtwaTax != null) {
					stmtwaTax.close();
				}
				if (stmtwaPeriod != null) {
					stmtwaPeriod.close();
				}
				if (stmtwaPeriod2 != null) {
					stmtwaPeriod2.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		/*************************************************************/
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_016.PsnDMO", "addPsn(PsnVO[] addPsn)",
				new Object[] { addPsn });
		/*************************************************************/
	}

	/**
	 * 	薪资档案批量修改
	 * 	1、修改wa_psn
	 *	2、根据是否停发补齐当期data数据（针对停发人员转成不停发）
	 * 	3、修改wa_data
	 * 	4、根据是否停发修改或删除wa_tax
	 * 	5、修改期间状态
	 * @param addPsn
	 * @param aRecaVO
	 * @throws SQLException
	 * @throws nc.bs.pub.SystemException
	 * @throws Exception
	 */
	public void updatePsn(PsnVO[] addPsn, ReCacuVO aRecaVO) throws SQLException, SystemException, Exception {

		Connection con = null;

		/******** 1、修改wa_psn *********/
		PreparedStatement stmtwaPsn = null;
		String sqlWaPsn = "update wa_psn set istopflag=?, vacccode=?, bankid=?, taxtableid=?, itaxflag=? where pk_wa_psn = ?";

		/************ 2、根据是否停发补齐当期data数据（针对停发人员转成不停发） *************/
		PreparedStatement stmtwaSelData = null;
		String sqlSelData = "select psnid from wa_data where classid = ? and cyear = ? and cperiod = ?";

		PreparedStatement stmtinsData = null;
		String sqlinsData = "insert into wa_data(pk_wa_data, psnid, psnclid, deptid, classid, cperiod, cyear,irecaculateflag, pk_om_job," +
			" nestpsnclid, nestdeptid, nestpk_om_job, ipartflag,cnestyear,cnestperiod, pk_psndoc_sub, itaxflag, taxtableid," +
			" pk_psnbasdoc,istopflag) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";

		String[] keyWaData = null;
		PreparedStatement stmtwaDataZ = null;
		String sqlWaDataZ = "insert into wa_dataz (pk_wa_dataz, classid, cyear, cperiod, psnid, pk_psnbasdoc ) values (?, ?, ?, ?, ?, ?)";

		PreparedStatement stmtwaDataF = null;
		String sqlWaDataF =  "insert into wa_dataf (pk_wa_dataf, classid, cyear, cperiod, psnid, pk_psnbasdoc ) values (?, ?, ?, ?, ?, ?)";

		/************* 3、修改wa_data ***********/
		PreparedStatement stmtwaData = null;
		String sqlWaData = 	"update wa_data set irecaculateflag=?, itaxflag = ?, taxtableid = ?, istopflag = ?,f_110= ?,f_111 = ?" +
			" where classid = ? and cyear = ? and cperiod = ? and psnid = ? and pk_psnbasdoc = ?";

		/************ 4、先删除wa_tax，再根据是否停发增加 ***********/
		PreparedStatement stmtwaTaxDel = null;
		String sqlWaTaxDel = "delete from wa_tax where pk_wa_class=? and  vcalyear=? and vcalmonth=? and psnid=? and pk_psnbasdoc = ?";
		PreparedStatement stmtwaTax = null;
		String sqlWaTax = "insert into wa_tax (pk_wa_tax, pk_wa_class, vcalyear, vcalmonth, psnid,ftaxmny, ftax, fmny, fmnyz, f_8, f_10, ftaxz," +
			" pk_psnbasdoc ) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		String[] keyWaTax = null;

		/*********** 5、修改期间状态 **********/
		PreparedStatement stmtwaPeriod = null;
		String sqlWaPeriod = "update wa_periodstate set irecaculateflag=?, iaccountmark=?, icheckflag=?, daccdate=?, irecheckflag=?, ipayoffflag=?" +
			" where pk_periodset in (select pk_wa_period from wa_period where classid = ? and cyear = ? and cperiod = ?)";

		try{
			con = getConnection();

			/******** 1、修改wa_psn *********/
			stmtwaPsn = con.prepareStatement(sqlWaPsn);
			for (int i=0; i<addPsn.length; i++){
				//			 istopflag
				if (addPsn[i].getIstopflag().booleanValue()) {
					stmtwaPsn.setInt(1, 1);
	            } else {
	            	stmtwaPsn.setInt(1, 0);
	            }
				// vacccode
				if (addPsn[i].getVacccode()==null){
					stmtwaPsn.setNull(2, Types.CHAR);
				}else{
					stmtwaPsn.setString(2, addPsn[i].getVacccode());
				}
				// bankid
				if (addPsn[i].getBankid()==null){
					stmtwaPsn.setString(3, "");
				}else{
					stmtwaPsn.setString(3, addPsn[i].getBankid());
				}
				// taxtableid
				if (addPsn[i].getTaxtableid()==null){
					stmtwaPsn.setNull(4, Types.CHAR);
				}else{
					stmtwaPsn.setString(4, addPsn[i].getTaxtableid());
				}
				// itaxflag
				if (addPsn[i].getItaxflag().booleanValue()){
					stmtwaPsn.setInt(5, 1);
				}else{
					stmtwaPsn.setInt(5, 0);
				}
				//	pk_wa_psn
				stmtwaPsn.setString(6, addPsn[i].getPk_wa_psn());

				stmtwaPsn.addBatch();
			}
			stmtwaPsn.executeBatch();

			/************ 2、根据是否停发补齐当期data数据（针对停发人员转成不停发） *************/
			// 得到所有修改人员的data
			stmtwaSelData = con.prepareStatement(sqlSelData);
			stmtwaSelData.setString(1, addPsn[0].getClassid());
			stmtwaSelData.setString(2, addPsn[0].getCyear());
			stmtwaSelData.setString(3, addPsn[0].getCperiod());
			ResultSet rs = stmtwaSelData.executeQuery();
			Vector<String> psnIDs = new Vector<String>();
			while (rs.next()){
				String psnID = rs.getString("psnid");
				if (psnID!=null){
					psnIDs.addElement(psnID);
				}
			}

			// 过滤不存在data即为停发转不停发
			Vector<PsnVO> changPsn = new Vector<PsnVO>();
			for (int i=0; i<addPsn.length; i++){
				boolean flag = true;
				int j = 0;
				while (j<psnIDs.size()){
					String psnID = (String)psnIDs.elementAt(j);
					if (addPsn[i].getPsnid().equals(psnID)){
						flag = false;
						break;
					}

					j++;
				}
				if (flag){
					changPsn.addElement(addPsn[i]);
				}
			}

			if (changPsn.size()>0){
				PsnVO[] chPsn = new PsnVO[changPsn.size()];
				changPsn.copyInto(chPsn);

				//	插入wa_data
				stmtinsData = con.prepareStatement(sqlinsData);
				keyWaData = getOIDs(chPsn.length);

				for (int i=0; i<chPsn.length; i++){
					// pk
					stmtinsData.setString(1, keyWaData[i]);
					// psnid
					stmtinsData.setString(2, chPsn[i].getPsnid());
					// psnclid
					stmtinsData.setString(3, chPsn[i].getPsnClId());
					// deptid
					stmtinsData.setString(4, chPsn[i].getDeptId());
					// classid
					stmtinsData.setString(5, chPsn[i].getClassid());
	//				 cperiod
					stmtinsData.setString(6, chPsn[i].getCperiod());
					//	cyear
					stmtinsData.setString(7, chPsn[i].getCyear());
					//	irecaculateflag
					stmtinsData.setInt(8, 0);
					//	pk_om_job
					if (addPsn[i].getPkOmJob()==null){
						stmtinsData.setNull(9, Types.CHAR);
					}else{
						stmtinsData.setString(9, chPsn[i].getPkOmJob());
					}
					//	nestpsnclid
					stmtinsData.setString(10, chPsn[i].getNestPsnclid());
					//	nestdeptid
					stmtinsData.setString(11, chPsn[i].getNestDeptid());
					// nestpk_om_job
					stmtinsData.setString(12, chPsn[i].getNestPkOmJob());
					// ipartflag
					stmtinsData.setInt(13, (chPsn[i].isPartTime() ? 1 : 0) );
					//	cnestyear
					if (aRecaVO.getNestWaPeriodvo().getCyear()==null){
						stmtinsData.setNull(14, Types.CHAR);
					}else{
						stmtinsData.setString(14, aRecaVO.getNestWaPeriodvo().getCyear());
					}
					//	cnestperiod
					if (aRecaVO.getNestWaPeriodvo().getCperiod()==null){
						stmtinsData.setNull(15, Types.CHAR);
					}else{
						stmtinsData.setString(15, aRecaVO.getNestWaPeriodvo().getCperiod());
					}
					//	pk_psndoc_sub
					if (addPsn[i].getPk_psndoc_sub()==null){
						stmtinsData.setNull(16, Types.CHAR);
					}else{
						stmtinsData.setString(16, chPsn[i].getPk_psndoc_sub());
					}
					//	itaxflag
					if (addPsn[i].getItaxflag().booleanValue()){
						stmtinsData.setInt(17, 1);
					}else{
						stmtinsData.setInt(17, 0);
					}
					//	taxtableid
					if (addPsn[i].getTaxtableid()==null){
						stmtinsData.setNull(18, Types.CHAR);
					}else{
						stmtinsData.setString(18, chPsn[i].getTaxtableid());
					}
					//	pk_psnbasdoc
					stmtinsData.setString(19, chPsn[i].getPsnbasdocPK());
	                //
					stmtinsData.setInt(20, chPsn[i].getIstopflag().booleanValue()?1:0);

					stmtinsData.addBatch();
				}
				stmtinsData.executeBatch();

				//	插入wa_dataz
				stmtwaDataZ = con.prepareStatement(sqlWaDataZ);
				for (int i=0; i<chPsn.length; i++){
					// pk
					stmtwaDataZ.setString(1, keyWaData[i]);
					// classid
					stmtwaDataZ.setString(2, chPsn[i].getClassid());
					// cyear
					stmtwaDataZ.setString(3, chPsn[i].getCyear());
					// cperiod
					stmtwaDataZ.setString(4, chPsn[i].getCperiod());
					// psnid
					stmtwaDataZ.setString(5, chPsn[i].getPsnid());
					// pk_psnbasdoc
					stmtwaDataZ.setString(6, chPsn[i].getPsnbasdocPK());
					// cperiod

					stmtwaDataZ.addBatch();
				}
				stmtwaDataZ.executeBatch();

				//	插入wa_dataf
				if (!aRecaVO.getCurrentBO().isSingleMain()
						&& !aRecaVO.getCurrentBO().isZhuBi()){ //主辅币
					/********** 插入wa_dataf *********/
					stmtwaDataF = con.prepareStatement(sqlWaDataF);

					for (int i=0; i<chPsn.length; i++){
						// pk
						stmtwaDataF.setString(1, keyWaData[i]);
						// classid
						stmtwaDataF.setString(2, chPsn[i].getClassid());
						// cyear
						stmtwaDataF.setString(3, chPsn[i].getCyear());
						// cperiod
						stmtwaDataF.setString(4, chPsn[i].getCperiod());
						// psnid
						stmtwaDataF.setString(5, chPsn[i].getPsnid());
						// pk_psnbasdoc
						stmtwaDataF.setString(6, chPsn[i].getPsnbasdocPK());

						stmtwaDataF.addBatch();
					}
					stmtwaDataF.executeBatch();
				}
			}

			/************* 3、修改wa_data ***********/
			stmtwaData = con.prepareStatement(sqlWaData);
			for (int i=0; i<addPsn.length; i++){
//				irecaculateflag
				stmtwaData.setInt(1, 0);
//				itaxflag
				if (addPsn[i].getItaxflag().booleanValue()){
					stmtwaData.setInt(2, 1);
				}else{
					stmtwaData.setInt(2, 0);
				}
				//	taxtableid
				if (addPsn[i].getTaxtableid()==null){
					stmtwaData.setNull(3, Types.CHAR);
				}else{
					stmtwaData.setString(3, addPsn[i].getTaxtableid());
				}
                // istopflag
                if ( addPsn[i].getIstopflag()==null ){
                    stmtwaData.setInt(4,0);
                }
                else{
                    stmtwaData.setInt(4,addPsn[i].getIstopflag().booleanValue()?1:0);
                }

				// classid
				stmtwaData.setString(7, addPsn[i].getClassid());
                //  cyear
                stmtwaData.setString(8, addPsn[i].getCyear());
//				 cperiod
				stmtwaData.setString(9, addPsn[i].getCperiod());
//               psnid
                stmtwaData.setString(10, addPsn[i].getPsnid());
//				pk_psnbasdoc
				stmtwaData.setString(11, addPsn[i].getPsnbasdocPK());
				//add by suhf1 xhhrp
				stmtwaData.setString(5, addPsn[i].getM_rewardDept());
				stmtwaData.setString(6, addPsn[i].getM_tempRewardGroup());
				stmtwaData.addBatch();
			}
			stmtwaData.executeBatch();

			/************ 4、先删除wa_tax，再根据是否停发增加 ***********/
			// 删除
			stmtwaTaxDel = con.prepareStatement(sqlWaTaxDel);
			for (int i=0; i<addPsn.length; i++){
//					pk_wa_class
				stmtwaTaxDel.setString(1, addPsn[i].getClassid());
				//	vcalyear
				stmtwaTaxDel.setString(2, addPsn[i].getCyear());
				//	vcalmonth
				stmtwaTaxDel.setString(3, addPsn[i].getCperiod());
				//	psnid
				stmtwaTaxDel.setString(4, addPsn[i].getPsnid());
//					pk_psnbasdoc
				stmtwaTaxDel.setString(5, addPsn[i].getPsnbasdocPK());

				stmtwaTaxDel.addBatch();
			}
			stmtwaTaxDel.executeBatch();
			if (!addPsn[0].getIstopflag().booleanValue()){
				// 不停发增加
				stmtwaTax = con.prepareStatement(sqlWaTax);
				keyWaTax = getOIDs(addPsn.length);
				for (int i=0; i<addPsn.length; i++){
					// pk_wa_tax
					stmtwaTax.setString(1, keyWaTax[i]);
					//	pk_wa_class
					stmtwaTax.setString(2, addPsn[i].getClassid());
					//	vcalyear
					stmtwaTax.setString(3, addPsn[i].getCyear());
					//	vcalmonth
					stmtwaTax.setString(4, addPsn[i].getCperiod());
					//	psnid
					stmtwaTax.setString(5, addPsn[i].getPsnid());
					//	ftaxmny
					stmtwaTax.setInt(6, 0);
	//				ftax
					stmtwaTax.setInt(7, 0);
	//				fmny
					stmtwaTax.setInt(8, 0);
	//				fmnyz
					stmtwaTax.setInt(9, 0);
	//				f_8
					stmtwaTax.setInt(10, 0);
	//				f_10
					stmtwaTax.setInt(11, 0);
	//				ftaxz
					stmtwaTax.setInt(12, 0);
					//	pk_psnbasdoc
					stmtwaTax.setString(13, addPsn[i].getPsnbasdocPK());

					stmtwaTax.addBatch();
				}
				stmtwaTax.executeBatch();
			}

			/*********** 5、修改期间状态 **********/
			stmtwaPeriod = con.prepareStatement(sqlWaPeriod);
			//	irecaculateflag
			stmtwaPeriod.setInt(1, 0);
//			iaccountmark
			stmtwaPeriod.setInt(2, 0);
//			icheckflag
			stmtwaPeriod.setInt(3, 0);
//			daccdate
			stmtwaPeriod.setString(4, new UFDate().toString());
//			irecheckflag
			stmtwaPeriod.setInt(5, 0);
//			ipayoffflag
			stmtwaPeriod.setInt(6, 0);
//			 classid
			stmtwaPeriod.setString(7, addPsn[0].getClassid());
			// cyear
			stmtwaPeriod.setString(8, addPsn[0].getCyear());
			// cperiod
			stmtwaPeriod.setString(9, addPsn[0].getCperiod());

			stmtwaPeriod.executeUpdate();

			stmtwaPeriod.executeUpdate();
		}finally {
			try {
				if (stmtwaPsn != null) {
					stmtwaPsn.close();
				}
				if (stmtwaData != null) {
					stmtwaData.close();
				}
				if (stmtwaTaxDel != null) {
					stmtwaTaxDel.close();
				}
				if (stmtwaTax != null) {
					stmtwaTax.close();
				}
				if (stmtwaPeriod != null) {
					stmtwaPeriod.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
	}
	/**
	 * 	Added by Young 2006-05-09 End
	 */


    /**
     *  测试对数使用
     */
    public void insertPsnIntoNext(String waClassPk, String year, String period, String nextyear, String nextperiod) throws SQLException {
        /** ********************************************************** */
        // 保留的系统管理接口：
        beforeCallMethod("nc.impl.wa.wa_016.PsnDMO", "insertPsnIntoNext", new Object[] { waClassPk, year, period, nextyear, nextperiod });
        /** ********************************************************** */

        if( waClassPk == null || year == null || period == null || nextyear == null || nextperiod == null ) {
			return;
		}

        Connection con = null;
        PreparedStatement stmt = null;
        try{
            con = getConnection();

            String sql = new StringBuffer().append("insert into wa_psn (pk_wa_psn,classid,cyear,cperiod,psnid,istopflag,itaxflag,taxtableid,vacccode,ipartflag,pk_om_job) select ")
                        .append("(substring(pk_wa_psn,1,6)").append("||").append(year).append(period).append("||").append("substring(pk_wa_psn,12,20))").append(",classid,'").append(nextyear).append("','").append(nextperiod)
                        .append("',psnid,istopflag,itaxflag,taxtableid,vacccode,ipartflag,pk_om_job from wa_psn where classid=? and cyear=? and cperiod=? and dr = 0 ").toString();

            stmt = con.prepareStatement(sql);
            stmt.setString(1,waClassPk);
            stmt.setString(2,year);
            stmt.setString(3,period);

            stmt.executeUpdate();

        }finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.impl.wa.wa_016.PsnDMO",  "insertPsnIntoNext", new Object[] { waClassPk, year, period, nextyear, nextperiod });
        /*************************************************************/
    }

    /**
	 * 判断某人的薪资发放数据是否已经审核
	 * @param waclassId String 薪资类别
	 * @param cyear String 薪资年度
	 * @param cperiod String 薪资期间
	 * @return boolean 是否部分审核，true部分审核过，否则未审核
	 * @throws SQLException 数据库异常
	 * @author xuanlt 2008-04-04
	 */
	public boolean psnHasChecked(String psnId,String waclassId, String cyear, String cperiod) throws SQLException {
		if(psnId==null || waclassId==null ||cyear==null ||cperiod==null){
			throw new NullPointerException();
		}
		StringBuffer sqlB = new StringBuffer();
		sqlB.append("select icheckflag ");
		sqlB.append("  from wa_data ");
		sqlB.append(" where wa_data.psnid = ? and wa_data.classid = ? ");
		sqlB.append("   and wa_data.cyear = ? ");
		sqlB.append("   and wa_data.cperiod = ?" );

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlB.toString());
			stmt.setString(1, psnId);
            stmt.setString(2,waclassId);
            stmt.setString(3,cyear);
            stmt.setString(4,cperiod);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()){
				if(rs.getInt(1)==1){
					return true;
				}
			}
			return false;
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
	}
}
