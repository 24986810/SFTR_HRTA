/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.impl.wa.wadoc;
import nc.hr.utils.PubEnv;
import nc.hr.utils.ResHelper;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import org.apache.commons.lang.ArrayUtils;

import nc.bs.logging.Logger;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.uap.lock.PKLock;
import nc.itf.hr.wa.IWaPsndoc;
import nc.ui.wa.pub.WADelegator;
import nc.vo.hi.hi_rpt.WaItemVO;
import nc.vo.hi.wadoc.PsndocWadocMainVO;
import nc.vo.hi.wadoc.PsndocWadocVO;
import nc.vo.hr.tools.pub.StringUtils;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.uap.busibean.exception.BusiBeanException;
import nc.vo.wa.wa_026.AdjustWadocVO;
import nc.vo.wa.wa_026.BatchAdjustVO;
import nc.vo.wa.wa_026.GradeVO;
import nc.vo.wa.wa_031.PsnappaproveBVO;

/**
 * PsndocWadoc的Impl类
 *
 * 创建日期：(2004-6-3)
 *
 * @author：
 */
public class PsndocWadocImpl implements IWaPsndoc {

    /**
     * PsndocWadocImpl 构造子注解。
     */
    public PsndocWadocImpl() {
        super();
    }

    private final PsndocWadocDMO dmo = new PsndocWadocDMO();

    /**
     * EJB规范中要求的方法。
     *
     * 创建日期：(2004-6-3)
     */

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2004-6-3)
     *
     * @return nc.vo.hi.wadoc.PsndocWadocVO
     * @param key
     *            String
     *
     */
    public PsndocWadocVO findByPrimaryKey(String key)
            throws nc.vo.pub.BusinessException {

        PsndocWadocVO psndocWadoc = null;
        try {
            psndocWadoc = dmo.findByPrimaryKey(key);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadoc;
    }

    public boolean existEarlyDate(PsndocWadocVO psndocWadoc)  throws nc.vo.pub.BusinessException{
    	 String strValidatorSql = " select 1 from hi_psndoc_wadoc " +
	 		"where pk_wa_item ='"+psndocWadoc.getPk_wa_item()+"' " +
	 		"and pk_psndoc = '"+psndocWadoc.getPk_psndoc()+"' " +
	 		"and BEGINDATE>'"+psndocWadoc.getBegindate()+"' and lastflag = 'Y' ";
		 if (dmo.isValueExist(strValidatorSql))
		 {
		    return true;
		 }
		 return false;
    }
    /**
     * 向数据库中插入一个VO对象。
     *
     * 创建日期：(2004-6-3)
     *
     * @param psndocWadoc
     *            nc.vo.hi.wadoc.PsndocWadocVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     *
     */
    public String insertPsndocWadocVO(PsndocWadocVO psndocWadoc)
            throws nc.vo.pub.BusinessException {



        /*  String strValidatorSql = " select * from wa_grade_ver where pk_wa_grd ='"+psndocWadoc.getPk_wa_grd()+"' and effect_flag = 'Y' ";
        if (!dmo.isValueExist(strValidatorSql))
        {
            Logger.debug("请先为薪资标准设置版本");
            throw new BusinessException("请先为薪资标准设置版本！");
        }*/

        // 根据人员主键，薪资项目主键，工资等级类别更新以前的记录
        if (psndocWadoc.getRecordnum() == null) {
            psndocWadoc.setRecordnum(new Integer(0));
        }
        if (psndocWadoc.getLastflag() == null) {
            psndocWadoc.setLastflag(new nc.vo.pub.lang.UFBoolean(true));
        }
        if (psndocWadoc.getNegotiation_wage() == null) {
            psndocWadoc.setNegotiation_wage(new UFBoolean(false));
        }
        
        psndocWadoc.setWorkflowflag(new UFBoolean(false));
        validate(psndocWadoc);
        dmo.updatePrePsnWadocFlag(psndocWadoc.getPk_psndoc(), psndocWadoc.getPk_wa_item(), psndocWadoc.getPk_wa_grd(), psndocWadoc.getRecordnum(), new Boolean(true));
        String key = dmo.insert(psndocWadoc);
        return key;
    }
    
    /**
     * 
     */
    public void validate(PsndocWadocVO psVo) throws BusinessException {
        String error = null;
        if (psVo.getPk_wa_item() == null || psVo.getPk_wa_item().length() <= 0) {
            error = ResHelper.getString("60130715", "UPPT60130715-000153"); // "薪资项目不能为空.";
            throw new BusinessException(error);
        }
        if (psVo.getPk_wa_grd() == null || psVo.getPk_wa_grd().toString().length() <= 0) {
            error = ResHelper.getString("60130704", "UPP60130704-000322");// "薪资等级类别不能为空。";
            throw new BusinessException(error);
        }

        if (psVo.getBegindate() == null || psVo.getBegindate().toString().length() <= 0) {
            error = ResHelper.getString("60130715", "UPPT60130715-000155");// "必须有薪资的起始时间.";
            throw new BusinessException(error);
        }
        if (psVo.getEnddate() != null && psVo.getEnddate().toString().length() > 0 && psVo.getEnddate().before(psVo.getBegindate())) {
            error = ResHelper.getString("60130715", "UPPT60130715-000156"); // "结束时间不应早于起始时间.";
            throw new BusinessException(error);

        }
        if (!psVo.getNegotiation_wage().booleanValue()) {
            if (psVo.getPk_wa_grd() == null || psVo.getPk_wa_pralv() == null) {
                error = ResHelper.getString("60130704", "UPP60130704-000321");// "非谈判工资,
                // 必须输入级别.";
                throw new BusinessException(error);
            }

            GradeVO grdvo = null;
            grdvo = WADelegator.getWaGrade().findGradeByPk(psVo.getPk_wa_grd());

            if (grdvo != null && grdvo.getIsmultsec().booleanValue()) {
                if (psVo.getPk_wa_seclv() == null || psVo.getPk_wa_seclv().length() <= 0) {
                    error = ResHelper.getString("60130704", "UPP60130704-000321");// "非谈判工资,
                    // //
                    // 必须输入级别.";
                    throw new BusinessException(error);
                }
            }
        }
        if (psVo.getNmoney() == null) {
            error = ResHelper.getString("60130715", "UPPT60130715-000154");// "金额不能为空.";
            throw new BusinessException(error);
        }
    }

    /**
     * 向数据库中插入一批VO对象。
     *
     * 创建日期：(2004-6-3)
     *
     * @param psndocWadoc
     *            nc.vo.hi.wadoc.PsndocWadocVO[]
     * @return java.lang.String[] 所插入VO对象数组的主键字符串数组。
     *
     */
    public String[] insertArray(PsndocWadocVO[] psndocWadocs)
            throws nc.vo.pub.BusinessException {

       
            if (psndocWadocs == null || psndocWadocs.length == 0) {
                return null;
            }
            //设置业务锁
    	    boolean lockPeriod  = false;
    	    lockPeriod = nc.bs.uap.lock.PKLock.getInstance().acquireLock(psndocWadocs[0].getPk_wa_grd(), PubEnv.getPk_user(), null);
    	    if (!lockPeriod) {
    		throw new nc.vo.pub.BusinessException(NCLangResOnserver.getInstance().getStrByID("60131004", "UPP60131004-000303")/*
    																     * @res
    																     * "有人正在处理该数据，请稍候再试！"
    																     */);
    	    }
    	    try {
            Hashtable<String, String> ht = new Hashtable<String, String>();
            for (int i = 0; i < psndocWadocs.length; i++) {
                if (psndocWadocs[i].getRecordnum() == null) {
                    psndocWadocs[i].setRecordnum(new Integer(0));
                }
                if (psndocWadocs[i].getLastflag() == null) {
                    psndocWadocs[i].setLastflag(new nc.vo.pub.lang.UFBoolean(true));
                }
                if (!psndocWadocs[i].getPk_wa_item().equals(ht.get(psndocWadocs[i].getPk_psndoc()))) {// 保证同一批插入的数据，同一人同一项目的记录号只更新一次
                    dmo.updatePrePsnWadocFlag(psndocWadocs[i].getPk_psndoc(), psndocWadocs[i].getPk_wa_item(), "insertarray", psndocWadocs[i].getRecordnum(), new Boolean(true));
                    ht.put(psndocWadocs[i].getPk_psndoc(), psndocWadocs[i].getPk_wa_item());
                }
            }
            String[] keys = dmo.insertArray(psndocWadocs);
            return keys;
        } catch (Exception e) {
            Logger.error(e);
            return null;
        }finally{
    		//打开业务锁
    		if(lockPeriod)
    			PKLock.getInstance().releaseLock(psndocWadocs[0].getPk_wa_grd(),  PubEnv.getPk_user(), null);
    		
    	}
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2004-6-3)
     *
     * @param key
     *            String
     *
     */
    public void deleteByPsndocWadocVO(PsndocWadocVO vo)
            throws nc.vo.pub.BusinessException {

        try {
            dmo.delete(vo);
            // 根据人员主键，薪资项目主键，工资等级类别更新以前的记录
            // if(vo.getRecordnum()!=null&&vo.getRecordnum().intValue()>0)
            // dmo.updatePrePsnWadocFlag(vo.getPk_psndoc(),vo.getPk_wa_item(),vo.getPk_wa_grd(),vo.getRecordnum(),new
            // Boolean(false));
        } catch (Exception e) {
            Logger.error(e);

        }
    }

    /**
     * 用VO对象的属性值更新数据库。
     *
     * 创建日期：(2004-6-3)
     *
     * @param psndocWadoc
     *            nc.vo.hi.wadoc.PsndocWadocVO
     *
     */
    public void update(PsndocWadocVO psndocWadoc)
            throws nc.vo.pub.BusinessException {

        try {
            dmo.update(psndocWadoc);
        } catch (Exception e) {
            Logger.error(e);

        }
    }

    /**
     * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
     *
     * 创建日期：(2004-6-3)
     *
     * @return nc.vo.hi.wadoc.PsndocWadocVO[] 查到的VO对象数组
     * @param unitCode
     *            int
     *
     */
    public PsndocWadocVO[] queryAll(String pk_corp)
            throws nc.vo.pub.BusinessException {

        PsndocWadocVO[] psndocWadocs = null;
        try {
            psndocWadocs = dmo.queryAll(pk_corp);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadocs;
    }

    /**
     * 根据VO中所设定的条件返回所有符合条件的VO数组
     *
     * 创建日期：(2004-6-3)
     *
     * @return nc.vo.hi.wadoc.PsndocWadocVO[]
     * @param psndocWadocVO
     *            nc.vo.hi.wadoc.PsndocWadocVO
     * @param isAnd
     *            boolean 以与条件查询还是以或条件查询
     * @exception java.sql.SQLException
     *                异常说明。
     */
    public PsndocWadocVO[] queryByVO(PsndocWadocVO condPsndocWadocVO,
            Boolean isAnd) throws nc.vo.pub.BusinessException {

        PsndocWadocVO[] psndocWadocs = null;
        try {
            psndocWadocs = dmo.queryByVO(condPsndocWadocVO, isAnd);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadocs;
    }

    /**
     * 此处插入方法描述。 创建日期：(2004-6-5 19:36:53)
     *
     * @return java.lang.String
     * @param qvos
     *            nc.vo.pub.query.QueryConditionVO[]
     */
    public static String getJoinTableStr(List<String> tableCodes) {
        String joinTableStr = "";
        Vector<String> v = new Vector<String>();
        if (tableCodes != null && tableCodes.size() > 0) {
            for (int i = 0; i < tableCodes.size(); i++) {
                // String fieldCode = tableCodes.get(i);
                // //getTableCodeForMultiTable();
                String tableCode = tableCodes.get(i);
                if (tableCode.equalsIgnoreCase("bd_psncl")) {
                    joinTableStr += " inner join bd_psncl on bd_psndoc.pk_psncl = bd_psncl.pk_psncl";
                } else if (!tableCode.equalsIgnoreCase("bd_psndoc") && !tableCode.equalsIgnoreCase("bd_psnbasdoc") && !tableCode.equalsIgnoreCase("bd_deptdoc") && !tableCode.equalsIgnoreCase("hi_psndoc_wadoc")) {
                    if (!v.contains(tableCode)) {
                        v.addElement(tableCode);
                    }
                }
            }
        }
        for (int i = 0; i < v.size(); i++) {
            joinTableStr += " left outer join " + v.elementAt(i) + " on bd_psndoc.pk_psndoc=" + v.elementAt(i) + ".pk_psndoc";
            if ((v.elementAt(i)).startsWith("hi_psndoc") && !(v.elementAt(i)).equalsIgnoreCase("hi_psndoc_flag")) {
                joinTableStr += " and " + v.elementAt(i) + ".recordnum=0";
            }

        }
        return joinTableStr;
    }

    /**
     * 取薪酬体系中金额。 创建日期：(2004-6-23 16:35:24)
     *
     * @return Object[] 第一位保存薪资项目金额的开始日期，第二位保存金额
     * @param psnpk
     *            java.lang.String 人员主键
     * @param waitempk
     *            java.lang.String 薪资项目主键
     * @param date
     *            java.lang.String 截至日期，取最新记录数据时该参数无效
     * @param isHis
     *            java.lang.Boolean 是否取最新纪录，为真时去历史记录，为假时取最新发放记录
     *
     */
    public Object[] getPayOffMoney(String psnpk, String waitempk, String date,
            Boolean isHis) throws nc.vo.pub.BusinessException {

        Object[] res = null;
        try {
            res = dmo.getPayOffMoney(psnpk, waitempk, date, isHis);
        } catch (Exception e) {
            Logger.error(e);

        }
        return res;
    }

    /*
     * （非 Javadoc）
     *
     * @see nc.impl.wa.wadoc.IWaPsndoc#queryAllItemForWadoc(java.lang.String)
     */
    public WaItemVO[] queryAllItemForWadoc(String pk_corp)
            throws nc.vo.pub.BusinessException {

        WaItemVO[] items = null;
        try {
            items = dmo.queryAllItemForWadoc(pk_corp);
        } catch (Exception e) {
            Logger.error(e);

        }
        return items;
    }

    /**
     * 查询人员的所有薪资变动情况。 创建日期：(2004-6-7 11:40:29)
     *
     * @return nc.vo.hi.wadoc.PsndocWadocVO[]
     * @param psnPK
     *            java.lang.String
     *
     */
    public PsndocWadocVO queryAllVOsByPsnPK(String psnPK, String pk_wa_grd,
            String pk_wa_item) throws nc.vo.pub.BusinessException {

        PsndocWadocVO psndocWadoc = null;
        try {
            psndocWadoc = dmo.queryAllVOsByPsnPK(psnPK, pk_wa_grd, pk_wa_item);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadoc;
    }

    /**
     * 查询人员的所有薪资变动情况。 创建日期：(2004-6-7 11:40:29)
     *
     * @return nc.vo.hi.wadoc.PsndocWadocVO[]
     * @param psnPK
     *            java.lang.String
     *
     */
    public PsndocWadocVO[] queryAllVOsByPsnPKAndCond(String psnPK, String cond)
            throws nc.vo.pub.BusinessException {

        PsndocWadocVO[] psndocWadocs = null;
        try {
            psndocWadocs = dmo.queryAllVOsByPsnPKAndCond(psnPK, cond);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadocs;
    }

    /*
     * （非 Javadoc）
     *
     * @see nc.impl.wa.wadoc.IWaPsndoc#queryAllVOsByPsnPKForHI(java.lang.String)
     */
    public PsndocWadocVO[] queryAllVOsByPsnPKForHI(String psnPK)
            throws nc.vo.pub.BusinessException {

        PsndocWadocVO[] psndocWadocs = null;
        try {
            psndocWadocs = dmo.queryAllVOsByPsnPKForHI(psnPK);
        } catch (Exception e) {
            Logger.error(e);

        }
        return psndocWadocs;
    }

    /*
     * （非 Javadoc）
     *
     * @see nc.impl.wa.wadoc.IWaPsndoc#queryWadocMainData(java.lang.String,
     *      java.lang.String, nc.vo.pub.query.ConditionVO[])
     */
    public PsndocWadocMainVO[] queryWadocMainData(String pkcorp,
            String queryStr, List<String> tableCodes, String strItemPK,
            String strGrdPK) throws nc.vo.pub.BusinessException {
    	
    	String cope =    " and (bd_psndoc.psnclscope=" + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_WORK  + " or bd_psndoc.psnclscope=" + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_OTHER + " ) ";

    	return queryWadocMainDataWithPsnclscope(pkcorp, queryStr, tableCodes, strItemPK, strGrdPK, cope);
    }
    
    /*
     * （非 Javadoc）
     *
     * @see nc.impl.wa.wadoc.IWaPsndoc#queryWadocMainData(java.lang.String,
     *      java.lang.String, nc.vo.pub.query.ConditionVO[])
     */
    public PsndocWadocMainVO[] queryWadocMainDataMorePsnclscope(String pkcorp,
            String queryStr, List<String> tableCodes, String strItemPK,
            String strGrdPK) throws nc.vo.pub.BusinessException {

    String cope = 	"  and (1=1) " ;//  and (bd_psndoc.psnclscope=" + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_WORK  + " or bd_psndoc.psnclscope=" + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_RETIRE + " or bd_psndoc.psnclscope=" + nc.vo.hi.pub.CommonValue.PSNCLSCOPE_OTHER + " ) ";
    
    return queryWadocMainDataWithPsnclscope(pkcorp, queryStr, tableCodes, strItemPK, strGrdPK, cope);
    	
    }
    
    
    public PsndocWadocMainVO[] queryWadocMainDataWithPsnclscope(String pkcorp,
            String queryStr, List<String> tableCodes, String strItemPK,
            String strGrdPK,String psnclscope) throws nc.vo.pub.BusinessException {

        PsndocWadocMainVO[] vos = null;
        try {

            StringBuffer sbSelect = new StringBuffer();

            sbSelect.append(" select ");
            sbSelect.append(" wa_prmlv.levelname as wa_prmlv_levelname, ");
            sbSelect.append("  wa_seclv.levelname as wa_seclv_levelname, ");
            sbSelect.append("  hi_psndoc_wadoc.nmoney, ");
            sbSelect.append(" bd_psndoc.psncode, ");
            sbSelect.append("  bd_psndoc.psnname, ");
            sbSelect.append("  bd_psncl.psnclassname, ");
            sbSelect.append("  om_job.jobname, ");
            sbSelect.append("  bd_deptdoc.deptcode, ");
            sbSelect.append("  bd_deptdoc.deptname, ");
            sbSelect.append("  bd_psndoc.pk_psndoc, ");
            sbSelect.append("  hi_psndoc_wadoc.pk_wa_item, ");
            sbSelect.append("  hi_psndoc_wadoc.pk_wa_grd, ");
            sbSelect.append("  hi_psndoc_wadoc.waflag, ");
            sbSelect.append("  hi_psndoc_wadoc.workflowFlag, ");
            sbSelect.append("  hi_psndoc_wadoc.criterionvalue, ");
            sbSelect.append("  wa_item.vname as pk_wa_item_showname, ");
            sbSelect.append("  wa_item.iitemid , ");
            sbSelect.append("  hi_psndoc_wadoc.negotiation_wage ");

            // -add for V5.7 薪资普调 start
            sbSelect.append(", wa_grade.wagradename,wa_grade.prmlv_money_sort , wa_grade.seclv_money_sort, wa_grade.ismultsec ");
            sbSelect.append(", wa_prmlv.pk_wa_prmlv as pk_wa_pralv , wa_seclv.pk_wa_seclv, wa_criterion.pk_wa_crt," +
            		"wa_grade_ver.effect_flag,om_duty.dutyname ");
            // -add for V5.7 薪资普调 end

            StringBuffer sbtableStr = new StringBuffer();

            sbtableStr.append(" from ");
            sbtableStr.append("    bd_psndoc  ");
            sbtableStr.append("        left outer join hi_psndoc_wadoc  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_psndoc = bd_psndoc.pk_psndoc and ");
            sbtableStr.append("        hi_psndoc_wadoc.waflag = 'Y' and ");
            sbtableStr.append("        hi_psndoc_wadoc.recordnum = 0 and ");
            sbtableStr.append("        bd_psndoc.indocflag = 'Y'  ");
            sbtableStr.append("        inner join bd_psnbasdoc  ");
            sbtableStr.append("        on bd_psndoc.pk_psnbasdoc = bd_psnbasdoc.pk_psnbasdoc  ");

            sbtableStr.append("        inner join bd_psncl  ");
            sbtableStr.append("        on bd_psndoc.pk_psncl = bd_psncl.pk_psncl  ");
            sbtableStr.append("        left join om_job  ");
            sbtableStr.append("        on bd_psndoc.pk_om_job = om_job.pk_om_job  ");
            sbtableStr.append("        left join om_duty  ");
            sbtableStr.append("        on bd_psndoc.dutyname = om_duty.pk_om_duty  ");
            // -add for V5.7 薪资普调 start
            sbtableStr.append("        left outer join wa_grade  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_wa_grd = wa_grade.pk_wa_grd ");

            sbtableStr.append("        inner join bd_deptdoc  ");
            sbtableStr.append("        on bd_psndoc.pk_deptdoc=bd_deptdoc.pk_deptdoc  ");
            sbtableStr.append("        left outer join wa_prmlv  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_wa_pralv = wa_prmlv.pk_wa_prmlv  ");
            sbtableStr.append(getJoinTableStr(tableCodes));
            sbtableStr.append("        left outer join wa_seclv  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_wa_seclv = wa_seclv.pk_wa_seclv  ");

            sbtableStr.append("        left outer join wa_criterion  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_wa_grd = wa_criterion.pk_wa_grd and ");
            sbtableStr.append("        isnull(hi_psndoc_wadoc.pk_wa_seclv, 'not_have_pk_wa_seclv') = isnull(wa_criterion.pk_wa_seclv, 'not_have_pk_wa_seclv') and ");
            sbtableStr.append("        hi_psndoc_wadoc.pk_wa_pralv = wa_criterion.pk_wa_prmlv ");

            sbtableStr.append("        left outer join wa_grade_ver  ");
            sbtableStr.append("        on wa_grade_ver.pk_wa_grd = wa_criterion.pk_wa_grd   and wa_grade_ver.effect_flag = 'Y'  and wa_criterion.pk_wa_gradever = wa_grade_ver.pk_wa_gradever ");

            sbtableStr.append("        left outer join wa_item  ");
            sbtableStr.append("        on hi_psndoc_wadoc.pk_wa_item = wa_item.pk_wa_item ");
            // -add for V5.7 薪资普调 end

            StringBuffer whereStr = new StringBuffer();
            whereStr.append(" where bd_psndoc.pk_corp = '" + pkcorp + "' and bd_psndoc.indocflag = 'Y' and (bd_psndoc.sealdate is null) ");
            /**
             * 普调仅普调在职人员与其他人员
             */
            whereStr.append(psnclscope);
            		
            
            String orderStr = " order by bd_deptdoc.deptcode,bd_psndoc.psncode,wa_item.iitemid ";
            if (queryStr != null) {
            	// zhanghua 先按定调资查出人员，按人员查所有薪资项目，实现按薪级查询，调其他薪资类别
            	if(queryStr.indexOf("bd_psndoc.") == -1){
            		whereStr.append(" and bd_psndoc.pk_psndoc in (select pk_psndoc from hi_psndoc_wadoc where dr =0 and " +queryStr+")");
            	}else{
            		whereStr.append(" and " + queryStr);
            	}
            }

            // -add for V5.7 薪资普调 start
            if (!StringUtils.isEmpty(strItemPK)) {
                whereStr.append("   and hi_psndoc_wadoc.pk_wa_item = '" + strItemPK + "' and wa_grade_ver.effect_flag = 'Y' ");
            }

            if (!StringUtils.isEmpty(strGrdPK)) {
                whereStr.append("   and hi_psndoc_wadoc.pk_wa_grd = '" + strGrdPK + "'");
            }
            // -add for V5.7 薪资普调 end
            String sqlStr = sbSelect.toString() + sbtableStr.toString() + whereStr.toString() + orderStr;
            System.out.print( whereStr.toString());
            // 得到所有的子VO
            PsndocWadocVO[] subVOs = dmo.queryWadocMainData(sqlStr);
            Hashtable<String, PsndocWadocMainVO> htMainVO = new Hashtable<String, PsndocWadocMainVO>();
            Vector<String> vpkpsn = new Vector<String>();
            if (subVOs == null) {
                subVOs = new PsndocWadocVO[0];
            }
            for (int i = 0; i < subVOs.length; i++) {
                PsndocWadocMainVO mainvo = htMainVO.get(subVOs[i].getPk_psndoc());
                if (mainvo == null) {
                    // 如果没有该人的记录，创建一个加入Hsshtable
                    mainvo = new PsndocWadocMainVO();
                    mainvo.setPsnCode(subVOs[i].getPsnCode());
                    mainvo.setPsnName(subVOs[i].getPsnName());
                    mainvo.setDeptCode(subVOs[i].getDeptCode());
                    mainvo.setDeptName(subVOs[i].getDeptName());
                    mainvo.setPk_psndoc(subVOs[i].getPk_psndoc());
                    mainvo.setPsnclassname(subVOs[i].getPsnclassname());
                    mainvo.setJobname(subVOs[i].getJobname());
                    mainvo.setDutyname(subVOs[i].getDutyname());
                    // 记录人员主键的顺序
                    vpkpsn.addElement(subVOs[i].getPk_psndoc());
                }
                // Map<String, Object> hamValue = new HashMap<String, Object>();
                if (subVOs[i].getWaflag() != null && subVOs[i].getWaflag().booleanValue() && ((subVOs[i].getEffect_flag() != null && subVOs[i].getEffect_flag().booleanValue()) || (subVOs[i].getEffect_flag() == null && subVOs[i].getPk_wa_crt() == null))) {
                    // hamValue.put(PsndocWadocVO.PK_WA_PRALV,
                    // subVOs[i].getPk_wa_pralv());
                    // hamValue.put(PsndocWadocVO.PK_WA_SECLV,
                    // subVOs[i].getPk_wa_seclv());
                    // hamValue.put(PsndocWadocVO.NMONEY,
                    // subVOs[i].getNmoney());
                    // hamValue.put(PsndocWadocVO.CRITERIONVALUE,
                    // subVOs[i].getCriterionvalue());
                    // // wangkf add
                    //
                    // hamValue.put(PsndocWadocVO.NEGOTIATION_WAGE,
                    // subVOs[i].getNegotiation_wage());
                    // // 为了调级使用 薪资普调
                    // hamValue.put(PsndocWadocVO.PRMLV_MONEY_SORT,
                    // subVOs[i].getPrmlv_money_sort());
                    // hamValue.put(PsndocWadocVO.SECLV_MONEY_SORT,
                    // subVOs[i].getSeclv_money_sort());
                    // hamValue.put(PsndocWadocVO.PK_WA_PRALV,
                    // subVOs[i].getPk_wa_pralv());

                    mainvo.getValues().put(subVOs[i].getPk_wa_item(), subVOs[i]);
                }
                htMainVO.put(subVOs[i].getPk_psndoc(), mainvo);

            }
            // 按照人员主键的顺序把数据取出存入数组
            vos = new PsndocWadocMainVO[vpkpsn.size()];
            for (int k = 0; k < vpkpsn.size(); k++) {
                vos[k] = htMainVO.get(vpkpsn.elementAt(k));
            }
        } catch (Exception e) {
            Logger.error(e);
            throw new BusiBeanException(e.getCause());

        }
        return vos;
    }

    /**
     * 用VO对象的属性值更新数据库。
     *
     * 创建日期：(2004-6-3)
     *
     * @param psndocWadoc
     *            nc.vo.hi.wadoc.PsndocWadocVO
     *
     */
    public void updatePsndocWadoc(PsndocWadocVO psndocWadoc)
            throws nc.vo.pub.BusinessException {

        try {

            /*  String strValidatorSql = " select * from wa_grade_ver where pk_wa_grd ='"+psndocWadoc.getPk_wa_grd()+"' and effect_flag = 'Y' ";

            if (!dmo.isValueExist(strValidatorSql))
            {
                Logger.debug("请先为薪资标准设置版本");
                throw new BusinessException("请先为薪资标准设置版本！");
            }*/
            dmo.update(psndocWadoc);
            if (psndocWadoc.getLastflag().booleanValue() && psndocWadoc.getWaflag().booleanValue()) {

                // 如果这个项目是最新记录并且发放
                dmo.updateWaFlag(psndocWadoc);
            }
        } catch (Exception e) {
            Logger.error(e);

        }
    }

    /**
     * 数据导入
     */
    public Map importExcelData(PsndocWadocVO[] vos)
            throws nc.vo.pub.BusinessException {
        // list中放人员主键
        List<String> listkey = new ArrayList<String>();
        Map listmap = new HashMap();
        try {
            Map recordnummap = new HashMap();
            // 根据人员主键得到对象
            Map<String, List<PsndocWadocVO>> map = new HashMap<String, List<PsndocWadocVO>>();

            // 导入信息的判断，首先是得到薪资项目主键
            for (int i = vos.length - 1; i >= 0; i--) {
                PsndocWadocVO vo = vos[i];
                // 通过薪资项目名称得到薪资项目主键
                if (vo.getVname() == null || vo.getVname().equalsIgnoreCase("")) {
                    throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000005")//@res "要导入的数据中，第 "
 + (i + 4) + ResHelper.getString("6013v57_2","UPP6013v57_2-000006")//@res " 行中薪资项目为空，或者该行为空行请删除!"
);
                }
                String sql = "select pk_wa_item  from wa_item where vname = '" + vo.getVname() + "'";
                String itemkey = dmo.getItemKey(sql);
                vo.setPk_wa_item(itemkey);
                
                //add by hepengc 导入的定调资的数据主界面上无显示导入金额  start 
//                // 判断序号
//                if (recordnummap.get(itemkey) == null) {
//                    recordnummap.put(itemkey, 0);
//                } else {
//                    recordnummap.put(itemkey, (Integer.valueOf(recordnummap.get(itemkey).toString()) + 1));
//                }
                //add by hepengc 导入的定调资的数据主界面上无显示导入金额  end 
                
                // 同过员工编号、单位名称得到人员工作信息主键
                String psnsql = "select pk_psndoc from bd_psndoc where psncode = '" + vo.getPsnCode() + "' and pk_corp = '" + vo.getCorpcode() + "'";
                String psnkey = dmo.getItemKey(psnsql);
                vo.setPk_psndoc(psnkey);
                //add by hepengc 导入的定调资的数据主界面上无显示导入金额  start 
                // 判断序号
                if (recordnummap.get(psnkey+itemkey) == null){
                    recordnummap.put(psnkey+itemkey, 0);
                } else {
                    recordnummap.put(psnkey+itemkey, (Integer.valueOf(recordnummap.get(psnkey+itemkey).toString()) + 1));
                }
                //add by hepengc 导入的定调资的数据主界面上无显示导入金额  end 
                
                // 通过项目主键、以及单位主键得到薪资标准的主键
                
                //add by hepengc 解决薪资标准类别和标准表建在集团，没有建在公司,“从定调资信息维护”不能导入工资数据的问题 start
                //String gradesql = "select pk_wa_grd from wa_grade  where pk_wa_item ='" + itemkey + "' and pk_corp ='" + vo.getCorpcode() + "' and wagradename = '"+vo.getWagradename()+"'";
                String gradesql = "select pk_wa_grd from wa_grade  where pk_wa_item ='" + itemkey + "' and wagradename = '"+vo.getWagradename()+"'";
                //add by hepengc 解决薪资标准类别和标准表建在集团，没有建在公司,“从定调资信息维护”不能导入工资数据的问题 end
                
                String pkwagrd = dmo.getItemKey(gradesql);
                vo.setPk_wa_grd(pkwagrd);
                // 通过薪资标准主键以及级别名称得到级别主键
                if (vo.getWa_prmlv_levelname() != null && !vo.getWa_prmlv_levelname().equalsIgnoreCase("")) {
                    String prmsql = "select pk_wa_prmlv from wa_prmlv where pk_wa_grd = '" + pkwagrd + "' and levelname ='" + vo.getWa_prmlv_levelname() + "'";
                    vo.setPk_wa_pralv(dmo.getItemKey(prmsql));
                }
                // 通过薪资标准主键以及档别名称得到档别主键
                if (vo.getWa_seclv_levelname() != null && !vo.getWa_seclv_levelname().equalsIgnoreCase("")) {
                    String secsql = "select pk_wa_seclv from wa_seclv where pk_wa_grd = '" + pkwagrd + "' and levelname ='" + vo.getWa_seclv_levelname() + "'";
                    vo.setPk_wa_seclv(dmo.getItemKey(secsql));
                }
                // 得到变动原因的主键
                if (vo.getDocname() != null && !vo.getDocname().equalsIgnoreCase("")) {
                    // String causesql = "select pk_defdoc from bd_defdoc where
                    // docname='"+vo.getDocname()+"' and (pk_corp
                    // ='"+vo.getCorpcode()+"' or pk_corp = '0001') and
                    // (sealflag is null or sealflag <> 'Y')";
                    String causesql = " select n.pk_defdoc  from bd_defdoc n ,bd_defdoclist m  where n.docname = '" + vo.getDocname() + "'  and (n.pk_corp = '" + vo.getCorpcode() + "' or n.pk_corp = '0001')   and (n.sealflag is null or n.sealflag <> 'Y')   and n.pk_defdoclist = m.pk_defdoclist  and m.doclistname ='薪资变动原因'";
                    vo.setPk_changecause(dmo.getItemKey(causesql));
                }
                // 是否来自流程
                vo.setWorkflowflag(new UFBoolean(false));
                // 业务类型
                vo.setIadjustmatter(1);
                //add by hepengc 导入的定调资的数据主界面上无显示导入金额  start 
                // 记录序号
//                vo.setRecordnum(Integer.valueOf(recordnummap.get(itemkey).toString()));
                
                vo.setRecordnum(Integer.valueOf(recordnummap.get(psnkey+itemkey).toString()));
                 //add by hepengc 导入的定调资的数据主界面上无显示导入金额  end 
                // 设置不同的对象
                if (map.get(psnkey) == null) {
                    // 存放对象
                    List<PsndocWadocVO> listvo = new ArrayList<PsndocWadocVO>();
                    // 把主键存放的List中
                    listkey.add(psnkey);
                    listvo.add(vo);
                    // PsndocWadocVO[] wadocvos =
                    // listvo.toArray((PsndocWadocVO[])
                    // Array.newInstance(PsndocWadocVO.class,listvo.size()));
                    map.put(psnkey, listvo);
                } else {
                    map.get(psnkey).add(vo);
                }

                // 非谈判工资的情况先，如果当前的数据对象中，薪资级别、级别金额、金额三个字段一个都能为空
                if (!vo.getNegotiation_wage().booleanValue()) {
                    // if((vo.getWa_prmlv_levelname()!=null&&!vo.getWa_prmlv_levelname().equalsIgnoreCase(""))&&(vo.getPk_wa_pralv()==null||vo.getPk_wa_pralv().equalsIgnoreCase("")
                    // ||vo.getCriterionvalue()==null||vo.getNmoney()==null)){
                    // 当导入的数据填写了薪资级别
                    if ((vo.getWa_prmlv_levelname() != null && !vo.getWa_prmlv_levelname().equalsIgnoreCase(""))) {
                        // 首先是判断级别，当没有查档当前的薪资级别时
                        if (vo.getPk_wa_pralv() == null || vo.getPk_wa_pralv().equalsIgnoreCase("")) {
                            throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000007")//@res "要插入的数据,人员："
 + vo.getPsnName() + ResHelper.getString("common","UC000-0003385")//@res "薪资项目"
 + vo.getVname() + ResHelper.getString("60130715","UPPT60130715-000007")//@res "薪资标准"
 + vo.getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000008")//@res "为非谈判工资、请填写正确的薪资级别,请确认!"
);
                        } else {// 存在当前的级别的时候
                            // 判断当前的标准是0否是存在薪资档别
                            String selesql = "select pk_wa_seclv from wa_seclv where pk_wa_grd = '" + pkwagrd + "'";
                            String key = dmo.getItemKey(selesql);
                            if (key != null && !key.equalsIgnoreCase("")) {// 存在档别的情况
                                if (vo.getWa_seclv_levelname() == null || vo.getWa_seclv_levelname().equalsIgnoreCase("")) {
                                    throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000007")//@res "要插入的数据,人员："
 + vo.getPsnName() + ResHelper.getString("6013v57_2","UPP6013v57_2-000009")//@res "薪资项目："
 + vo.getVname() + ResHelper.getString("60130715","UPT60130715-000004")//@res "薪资标准"
 + vo.getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000010")//@res "为非谈判工资、请填写薪资档别,请确认!"
);
                                } else {
                                    if (vo.getPk_wa_seclv() == null || vo.getPk_wa_seclv().equalsIgnoreCase("")) {
                                        throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000007")//@res "要插入的数据,人员："
 + vo.getPsnName() + ResHelper.getString("common","UC000-0003385")//@res "薪资项目"
 + vo.getVname() + ResHelper.getString("60130715","UPT60130715-000004")//@res "薪资标准"
 + vo.getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000011")//@res "为非谈判工资、请填写正确的薪资档别,请确认!"
);
                                    }
                                }
                            }
                        }
                        // throw new
                        // nc.vo.pub.BusinessException("要插入的数据,人员："+vo.getPsnName()+",薪资项目："+vo.getVname()+",薪资标准："+vo.getWagradename()+",为非谈判工资、不存在此薪资级别,请确认!");
                    } else {
                        throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000007")//@res "要插入的数据,人员："
 + vo.getPsnName() + ResHelper.getString("common","UC000-0003385")//@res "薪资项目"
 + vo.getVname() + ResHelper.getString("60130715","UPT60130715-000004")//@res "薪资标准"
 + vo.getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000012")//@res "为非谈判工资、请填写薪资级别,请确认!"
);
                    }
                }
                // 如果金额不存在的情况下的判断
                if (vo.getNmoney() == null) {
                    throw new nc.vo.pub.BusinessException(ResHelper.getString("6013v57_2","UPP6013v57_2-000013")//@res "要插入的数据,人员"
 + vo.getPsnName() + ResHelper.getString("common","UC000-0003385")//@res "薪资项目"
 + vo.getVname() + ResHelper.getString("60130715","UPT60130715-000004")//@res "薪资标准"
 + vo.getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000014")//@res "没有填写金额,请确认!"
);
                }

            }
            listmap.put("key", listkey);
            listmap.put("vo", map);
            // 如果数据库中存在定调资数据，则两方面的数据要进行比较
            // 得到存在的数据
            /*
             * for(int m = 0; m <listkey.size();m++){ String key =
             * listkey.get(m); List datalistvo = map.get(key); PsndocWadocVO[]
             * psndocvos = (PsndocWadocVO[])datalistvo.toArray((PsndocWadocVO[])
             * Array.newInstance(PsndocWadocVO.class,datalistvo.size()));
             * //进行比较、插入操作 if(psndocvos.length>0){ //如果数据库中存在数据要进行判断
             * PsndocWadocVO[] subvos = queryAllVOsByPsnPKForHI(key); //数据比较
             * compareWadocVO(psndocvos,subvos); //对于没有冲突的数据，要进行数据更新操作
             * updateArrayInfo(subvos,psndocvos); //执行插入操作
             * this.insetArrayInfo(psndocvos); } }
             */

        } catch (Exception e) {
            Logger.error(e);
            throw new nc.vo.pub.BusinessException(e.getMessage());
        }

        return listmap;
    }

    /**
     * 比较要存入的数据与已经存在的数据是否存在冲突
     *
     * @param listkey
     * @return
     * @throws nc.vo.pub.BusinessException
     */
    public Map compareDataInfo(PsndocWadocVO[] vos)
            throws nc.vo.pub.BusinessException {
        boolean flag = true;
        Map map = null;
        try {
            Map mapinfo = importExcelData(vos);
            List<String> keylist = (List) mapinfo.get("key");
            Map<String, List> keymap = (Map) mapinfo.get("vo");
            for (int m = 0; m < keylist.size(); m++) {
                String key = keylist.get(m);
                List datalistvo = keymap.get(key);
                PsndocWadocVO[] psndocvos = (PsndocWadocVO[]) datalistvo.toArray((PsndocWadocVO[]) Array.newInstance(PsndocWadocVO.class, datalistvo.size()));
                // 进行比较、插入操作
                if (psndocvos.length > 0) {
                    // 如果数据库中存在数据要进行判断
                    PsndocWadocVO[] subvos = queryAllVOsByPsnPKForHI(key);
                    // 数据比较
                    map = compareWadocVO(psndocvos, subvos);
                    if (map != null) {
                        boolean bool = (Boolean) map.get("flag");
                        if (!bool) {
                            break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            Logger.error(e.getMessage(),e);
            throw new nc.vo.pub.BusinessException(e.getMessage());
        }
        return map;
    }

    /**
     * 插入数据
     *
     * @param listkey
     * @param map
     * @return
     * @throws nc.vo.pub.BusinessException
     */
    public List<String> insertInfo(PsndocWadocVO[] vos)
            throws nc.vo.pub.BusinessException {
        List<String> keylist = null;
        try {
            Map mapinfo = importExcelData(vos);
            keylist = (List) mapinfo.get("key");
            Map<String, List> keymap = (Map) mapinfo.get("vo");
            for (int m = 0; m < keylist.size(); m++) {
                String key = keylist.get(m);
                List datalistvo = keymap.get(key);
                PsndocWadocVO[] psndocvos = (PsndocWadocVO[]) datalistvo.toArray((PsndocWadocVO[]) Array.newInstance(PsndocWadocVO.class, datalistvo.size()));
                // 进行比较、插入操作
                if (psndocvos.length > 0) {
                    // 如果数据库中存在数据要进行判断
                    PsndocWadocVO[] subvos = queryAllVOsByPsnPKForHI(key);
                    // 数据比较
                    // compareWadocVO(psndocvos,subvos);
                    // 对于没有冲突的数据，要进行数据更新操作
                    updateArrayInfo(subvos, psndocvos);
                    // 执行插入操作
                    this.insetArrayInfo(psndocvos);
                }
            }
        } catch (Exception e) {
            Logger.error(e);
            throw new nc.vo.pub.BusinessException(e.getMessage());
        }
        return keylist;
    }

    /**
     * 此方法的主要作用是判断数据并插入到数据库
     *
     * @param vos
     * @throws nc.vo.pub.BusinessException
     */
    public void insetArrayInfo(PsndocWadocVO[] vos)
            throws nc.vo.pub.BusinessException {
        try {
            dmo.insertArray(vos);
        } catch (Exception e) {
            Logger.error(e);
        }
    }

    public void batchInsertPsndocWadocVO(PsndocWadocVO[] vos)   throws nc.vo.pub.BusinessException{
    	 if (vos.length > 0) {
             // 如果数据库中存在数据要进行判断
//             PsndocWadocVO[] subvos = queryAllVOsByPsnPKForHI(key);
             // 数据比较
             // compareWadocVO(psndocvos,subvos);
             // 对于没有冲突的数据，要进行数据更新操作
//             updateArrayInfo(subvos, vos);
             // 执行插入操作
    		 
//    		 validate(psVo)
    		 
             this.insertArray(vos);
         }
    }
    
    /**
     * 
     */
    public  GradeVO[]   queryGradeVOs(String itemid ,String pkcorp)   throws nc.vo.pub.BusinessException{
    	return dmo.queryGradeVOs(itemid, pkcorp);
    }
    /**
     * 更新以前的数据
     *
     * @param vos
     * @throws nc.vo.pub.BusinessException
     */
    public void updateArrayInfo(PsndocWadocVO[] vos, PsndocWadocVO[] insertvo)
            throws nc.vo.pub.BusinessException {
        try {
            // 可以List的作用是设置薪资项目、薪资标准主键
            List<String> keylist = new ArrayList<String>();
            Map<String, List<PsndocWadocVO>> map = new HashMap<String, List<PsndocWadocVO>>();
            // 把同薪资项目，同标准的放到一起
            for (int b = 0; b < vos.length; b++) {
            	//modify by hepengc 把薪资导入中原本按照薪资项目和薪资标准来分组标记最新记录改为按照薪资项目分组标记最新记录     start
//                String key = vos[b].getPk_wa_item() + vos[b].getPk_wa_grd();
                String key = vos[b].getPk_wa_item();
                //modify by hepengc 把薪资导入中原本按照薪资项目和薪资标准来分组标记最新记录改为按照薪资项目分组标记最新记录     end
                if (map.get(key) == null) {
                    List<PsndocWadocVO> volist = new ArrayList<PsndocWadocVO>();
                    volist.add(vos[b]);
                    map.put(key, volist);
                    // 把key值保存下来
                    keylist.add(key);
                } else {
                    map.get(key).add(vos[b]);
                }
            }
            // 把要插入的数据进行解析操作
            Map<String, List<PsndocWadocVO>> insertmap = new HashMap<String, List<PsndocWadocVO>>();
            // 把同薪资项目，同标准的放到一起
            for (int b = 0; b < insertvo.length; b++) {
            	//modify by hepengc 把薪资导入中原本按照薪资项目和薪资标准来分组标记最新记录改为按照薪资项目分组标记最新记录     start
//                String inkey = insertvo[b].getPk_wa_item() + insertvo[b].getPk_wa_grd();
            	 String inkey = insertvo[b].getPk_wa_item();
                //modify by hepengc 把薪资导入中原本按照薪资项目和薪资标准来分组标记最新记录改为按照薪资项目分组标记最新记录     start
                if (insertmap.get(inkey) == null) {
                    List<PsndocWadocVO> involist = new ArrayList<PsndocWadocVO>();
                    involist.add(insertvo[b]);
                    insertmap.put(inkey, involist);
                } else {
                    insertmap.get(inkey).add(insertvo[b]);
                }
            }
            // 最后操作是更新数据库
            for (int n = 0, len = keylist.size(); n < len; n++) {    
                String curkey = keylist.get(n);
                // 对于已经存在的数据
                List<PsndocWadocVO> list = map.get(curkey);
                PsndocWadocVO[] updatevo = list.toArray((PsndocWadocVO[]) Array.newInstance(PsndocWadocVO.class, list.size()));
                // 对于将要插入的数据
                if (insertmap.get(curkey) != null) {
                    List<PsndocWadocVO> inslist = insertmap.get(curkey);
                    PsndocWadocVO[] invo = inslist.toArray((PsndocWadocVO[]) Array.newInstance(PsndocWadocVO.class, inslist.size()));
                    this.updateInfo(updatevo, invo);
                }

            }

        } catch (Exception e) {
            Logger.error(e);
        }
    }

    public void updateInfo(PsndocWadocVO[] vos, PsndocWadocVO[] insertvo)
            throws nc.vo.pub.BusinessException {
        try {
            for (int i = 0; i < vos.length; i++) {
                vos[i].setRecordnum(vos[i].getRecordnum() + insertvo.length);
                vos[i].setLastflag(new UFBoolean(false));
                dmo.update(vos[i]);
            }
        } catch (Exception e) {
            Logger.error(e);
        }
    }

    /**
     * 对象比较
     *
     * @param insertvo
     * @param subvo
     * @throws nc.vo.pub.BusinessException
     */
    public Map compareWadocVO(PsndocWadocVO[] insertvo, PsndocWadocVO[] subvo)
            throws nc.vo.pub.BusinessException {
        Map map = null;
        if (ArrayUtils.isEmpty(subvo))
        {
            return null;
        }
        boolean reflag = true;
        // 循环判断
        for (int i = 0; i < insertvo.length; i++) {
            boolean inflag = insertvo[i].getWaflag().booleanValue();
            if (inflag) {
                UFDate begindate = insertvo[i].getBegindate();
                for (int n = 0; n < subvo.length; n++) {
                    boolean flag = subvo[n].getWaflag().booleanValue();
                    if (flag) {
                        UFDate subbegindate = subvo[n].getBegindate();
                        if (begindate.compareTo(subbegindate) == 0 && insertvo[i].getPk_wa_item().equalsIgnoreCase(subvo[n].getPk_wa_item()) && insertvo[i].getPk_wa_grd().equalsIgnoreCase(subvo[n].getPk_wa_grd())) {
                            // throw new
                            // nc.vo.pub.BusinessException("要插入的数据,人员："+insertvo[i].getPsnName()+",薪资项目："+insertvo[i].getVname()+",薪资标准："+insertvo[i].getWagradename()+",与已经存在的数据的薪资起始时间有冲突,请确认!");
                            String message = ResHelper.getString("6013v57_2","UPP6013v57_2-000013")//@res "要插入的数据,人员"
 + insertvo[i].getPsnName() + ResHelper.getString("common","UC000-0003385")//@res "薪资项目"
 + insertvo[i].getVname() + ResHelper.getString("60130715","UPT60130715-000004")//@res "薪资标准"
 + insertvo[i].getWagradename() + ResHelper.getString("6013v57_2","UPP6013v57_2-000015")//@res "与已经存在的数据的薪资起始时间有冲突,请确认!"
;
                            reflag = false;
                            map = new HashMap();
                            map.put("flag", reflag);
                            map.put("info", message);
                            break;
                        }
                    }
                }
            }
        }
        return map;
    }

    /**
     * 薪资普调-定调资信息维护的场合<BR>
     * 1:“按最新薪资标准调整薪资金额”规则<BR>
     * 2:“级别档别调整”规则：<BR>
     * 3:用户自己调整<BR>
     * <BR>
     */
    public AdjustWadocVO[] batchAdjust(BatchAdjustVO adjustwadocvo,
            AdjustWadocVO[] adjustWadocPsnInfoVOs) throws BusinessException {
        return getAdjustTool().batchAdjust(adjustwadocvo, adjustWadocPsnInfoVOs);
    }

    public AdjustWadocVO[] queryWadocMainData4AdjustInfo(String pkcorp,
            String queryStr, List<String> tableCodes,
            BatchAdjustVO batchadjustVO) throws BusinessException {

        PsndocWadocMainVO[] psndocWadocMainVOs = queryWadocMainData(pkcorp, queryStr, tableCodes, batchadjustVO.getPk_wa_item(), batchadjustVO.getPk_wa_grd());
        AdjustWadocVO[] adjustWadocPsnInfoVOs = getAdjustTool().filterPsnInfo(psndocWadocMainVOs, batchadjustVO);
        return getAdjustTool().batchAdjust(batchadjustVO, adjustWadocPsnInfoVOs);
    }

    /**
     * 薪资普调后台处理类-定调资的场合
     *
     * @param batchadjustVO
     * @return
     */
    public AdjustWadocVO[] queryAdjustWadocVOs4Adjust(
            BatchAdjustVO batchadjustVO, PsnappaproveBVO[] psnappaproveBVOs) {
        return null;
    }

    /**
     * 薪资普调完成，持久化普调数据
     *
     * @param adjustWadocPsnInfoVOs
     * @throws BusinessException
     */
    public void insertArray4Adjust(AdjustWadocVO[] adjustWadocPsnInfoVOs,
            BatchAdjustVO batchAdjustVO) throws BusinessException {
        if (ArrayUtils.isEmpty(adjustWadocPsnInfoVOs)) {
            return;
        }

        insertArray(getAdjustTool().corverPsndocWadocVO(adjustWadocPsnInfoVOs, batchAdjustVO));
    }

    private PsndocWadocAdjustTool adjustTool;

    public PsndocWadocAdjustTool getAdjustTool() {
        if (adjustTool == null) {
            adjustTool = new PsndocWadocAdjustTool();
        }
        return adjustTool;
    }

    public void setAdjustTool(PsndocWadocAdjustTool adjustTool) {
        this.adjustTool = adjustTool;
    }

}