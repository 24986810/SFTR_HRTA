/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.impl.wa.wa_020;


import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

import nc.bs.logging.Logger;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.pub.SuperDMO;
import nc.impl.wa.wa_033.TmCorpDMO;
import nc.itf.hr.wa.IWaMultiReport;
import nc.vo.bd.b00.IDataType;
import nc.vo.hash.hashVO.CircHashVO;
import nc.vo.hr.tools.pub.GeneralVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFDouble;
import nc.vo.wa.wa_008.WaclassVO;
import nc.vo.wa.wa_020.WaMultiReportVO01;
import nc.vo.wa.wa_020.WaMultiReportVO02;
import nc.vo.wa.wa_024.ItemVO;
import nc.vo.wa.wa_033.TmCorpVO;
import nc.vo.wa.wa_034.TmDeptVO;

/**
 * Data的Impl类
 *
 * 创建日期：(2001-8-14)
 *
 * @author：
 */
public class WaMultiReportImpl implements IWaMultiReport {

	/**
	 * DataImpl 构造子注解。
	 */
	public WaMultiReportImpl() {
		super();
	}

	/* （非 Javadoc）
	 * @see nc.impl.wa.wa_020.IwaWaMultiReport#ejbCreate()
	 */
	private void reportException(Exception e) {
		e.printStackTrace(System.err);
		Logger.error(e.getMessage(), e);
	}


	/* （非 Javadoc）
	 * @see nc.impl.wa.wa_020.IwaWaMultiReport#queryWaMultiReport01(nc.vo.wa.wa_024.ItemVO[], java.lang.String, nc.vo.wa.wa_008.WaclassVO[], java.lang.String, java.lang.String, java.lang.Integer)
	 */
	public WaMultiReportVO01[] queryWaMultiReport01(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear,
			String a_strPeriod, Integer maxRow) throws nc.vo.pub.BusinessException {

		WaMultiReportVO01[] vos = null;
		try {
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//WaMultiReportVO01[] conformVos =
			// dmo.queryWaMultiReport01(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			nc.bs.logging.Logger.error("取人员数据s:" + System.currentTimeMillis());
			Hashtable h = dmo.queryWaMultiReport01_hash(
					a_aryItemInfoVO, a_strWhereSQL, a_aryWaClassVO, a_strYear,
					a_strPeriod, maxRow);
			nc.bs.logging.Logger.error("取人员数据e:" + System.currentTimeMillis());
			//人员
			//bsj edited: 不用单取人员，直接从人员数据里面取即可
			//nc.bs.logging.Logger.error("单取人员s:" + System.currentTimeMillis());
			//String[] tempPsnid =
			//dmo.queryWaMultiReport01psn(
			//a_strWhereSQL,
			//a_aryWaClassVO,
			//a_strYear,
			//a_strPeriod,maxRow);
			//nc.bs.logging.Logger.error("单取人员e:" + System.currentTimeMillis());

			Object[] tempArray = h.keySet().toArray();
			String[] tempPsnid = new String[tempArray.length];

			for (int i = 0; i < tempArray.length; i++) {
				tempPsnid[i] = tempArray[i].toString();
			}

			//开始整合V0
			nc.bs.logging.Logger.error("开始整合V0......");
			nc.bs.logging.Logger.error("开始整合V0 s:" + System.currentTimeMillis());
			//所需变量
			Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>(); //整合后的VECTOR
			WaMultiReportVO01 vo = null; //整合后的VO
			Vector v001Vo = new Vector(); //临时VECTOR
			String s = ""; //人员名称
			String sCode = ""; //人员编码
			String jobname = ""; //所在岗位
			//临时VECTOR
			Vector<String> vNames = new Vector<String>();
			Vector<Object> vValues = new Vector<Object>();
			Vector<String> vTypes = new Vector<String>();
			//临时数组
			String[] names = null;
			Object[] values = null;
			String[] types = null;
			//VECTOR转换成数组
			String[] appendNames = null;
			Object[] appendValues = null;
			String[] appendTypes = null;
			//
			WaMultiReportVO01 tmpVo = new WaMultiReportVO01();
			//按人员
			for (String element : tempPsnid) {
				vo = new WaMultiReportVO01();
				v001Vo.removeAllElements();
				s = "";
				sCode = "";
				jobname = "";
				//查找人员相同的VO
				//for (int j=0;j<conformVos.length;j++){
				//if
				// (conformVos[j].getPsnid().equals(tempPsnid[i])){//找到人员相同的VO
				//v001Vo.addElement(conformVos[j]);
				//if (s.equals("")) s = conformVos[j].getPsnname();//人员名称
				//if (sCode.equals("")) sCode =
				// conformVos[j].getPsncode();//人员编码
				//if (v001Vo.size() == a_aryWaClassVO.length) break;
				//}
				//}

				v001Vo = (Vector) h.get(element);
				if (v001Vo == null) {
					v001Vo = new Vector<Object>();
				}
				if (v001Vo.size() > 0) {
					WaMultiReportVO01 vot = (WaMultiReportVO01) v001Vo.get(0);
					if (s.equals("")) {
						s = vot.getPsnname(); //人员名称
					}
					if (sCode.equals("")) {
						sCode = vot.getPsncode(); //人员编码
					}
					if (jobname.equals("")) {
						jobname = vot.getJobname(); //所在岗位
					}
				}
				//临时VECTOR
				vNames.removeAllElements();
				vValues.removeAllElements();
				vTypes.removeAllElements();
				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v001Vo.size(); j++) {
					tmpVo = null;
					tmpVo = (WaMultiReportVO01) v001Vo.elementAt(j);
					//临时数组
					names = tmpVo.getAppendNames();
					values = tmpVo.getAppendValues();
					types = tmpVo.getAppendTypes();
					for (int k = 0; k < names.length; k++) { //动态部门
						vNames.addElement(names[k]);
						vValues.addElement(values[k]);
						vTypes.addElement(types[k]);
					}
				}
				//VECTOR转换成数组
				appendNames = new String[vNames.size()];
				appendValues = new Object[vValues.size()];
				appendTypes = new String[vTypes.size()];
				for (int j = 0; j < appendNames.length; j++) {
					appendNames[j] = vNames.elementAt(j).toString();
					appendValues[j] = vValues.elementAt(j);
					appendTypes[j] = vTypes.elementAt(j).toString();
				}
				//整合后的VO赋值
				vo.setPsnid(element);
				vo.setPsnname(s);
				vo.setPsncode(sCode);
				vo.setJobname(jobname);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			nc.bs.logging.Logger.error("整合V0完成");
			vos = new WaMultiReportVO01[v.size()];
			if (v.size() > 0) {
				v.copyInto(vos);
			}
			nc.bs.logging.Logger.error("整合V0结束 e:" + System.currentTimeMillis());
		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"DataBean::queryWaMultiReport01(ItemInfoVO[] a_aryItemInfoVO,String a_strWhereSQL, nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear, String a_strPeriod) Exception!");
		}
		return vos;
	}

	/* （非 Javadoc）
	 * @see nc.impl.wa.wa_020.IwaWaMultiReport#queryWaMultiReport02(nc.vo.wa.wa_024.ItemVO[], java.lang.String, nc.vo.wa.wa_008.WaclassVO[], java.lang.String, java.lang.String)
	 */
	public WaMultiReportVO02[] queryWaMultiReport02(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear,
			String a_strPeriod) throws nc.vo.pub.BusinessException {

		WaMultiReportVO02[] conformVos = null;//datas = null;
		try { //deptpks
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//conformVos =
			// dmo.queryWaMultiReport02(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			java.util.Hashtable h = dmo
			.queryWaMultiReport02_hash(a_aryItemInfoVO, a_strWhereSQL,
					a_aryWaClassVO, a_strYear, a_strPeriod);
			//整合VO

			//得到所有的部门
			Vector vDeptId = (Vector) h.get("deptpks");
			if (vDeptId == null || vDeptId.size() < 0) {
				vDeptId = new Vector();
			}
			//int len=conformVos.length;
			//for (int i = 0;i<len;i++){
			//String sDeptid = conformVos[i].getDeptid();
			//String sFlag = "N";
			//if(vDeptId.contains(sDeptid)){
			//sFlag = "Y";
			//}
			////for(int j=0;j<vDeptId.size();j++){
			////if (vDeptId.elementAt(j).toString().equals(sDeptid)){
			////sFlag = "Y";
			////break;
			////}
			////}
			//if (sFlag.equals("N")){
			//vDeptId.addElement(sDeptid);
			//}
			//}
			//整合VO
			String[] tempDeptid = new String[vDeptId.size()];//所用的部门
			if (vDeptId.size() > 0) {
				vDeptId.copyInto(tempDeptid);
			}
			Vector<WaMultiReportVO02> v = new Vector<WaMultiReportVO02>();//整合后的VECTOR
			//按部门
			for (String element : tempDeptid) {
				WaMultiReportVO02 vo = new WaMultiReportVO02();//整合后的VO
				Vector v002Vo = new Vector();//临时VECTOR
				String s = "";//部门名称
				String sDeptcode = "";
				//查找部门相同的VO
				//for (int j=0;j<conformVos.length;j++){
				//if
				// (conformVos[j].getDeptid().equals(tempDeptid[i])){//找到部门相同的VO
				//v002Vo.addElement(conformVos[j]);
				//if (s.equals("")) s = conformVos[j].getDeptname();//部门名称
				//if (sDeptcode.equals("")) sDeptcode =
				// conformVos[j].getDeptcode();//部门编码
				//}
				//}
				v002Vo = (Vector) h.get(element);
				if (v002Vo == null) {
					v002Vo = new Vector();
				}
				if (v002Vo.size() > 0) {
					WaMultiReportVO02 vot = (WaMultiReportVO02) v002Vo.get(0);
					if (s.equals("")) {
						s = vot.getDeptname();//部门名称
					}
					if (sDeptcode.equals("")) {
						sDeptcode = vot.getDeptcode();//部门编码
					}
				}
				//临时VECTOR
				Vector<String> vNames = new Vector<String>();
				Vector<Object> vValues = new Vector<Object>();
				Vector<String> vTypes = new Vector<String>();
				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v002Vo.size(); j++) {
					WaMultiReportVO02 tmpVo = new WaMultiReportVO02();
					tmpVo = (WaMultiReportVO02) v002Vo.elementAt(j);
					//临时数组
					String[] names = tmpVo.getAppendNames();
					Object[] values = tmpVo.getAppendValues();
					String[] types = tmpVo.getAppendTypes();
					for (int k = 0; k < names.length; k++) {//动态部门
						vNames.addElement(names[k]);
						vValues.addElement(values[k]);
						vTypes.addElement(types[k]);
					}
				}
				//VECTOR转换成数组
				String[] appendNames = new String[vNames.size()];
				Object[] appendValues = new Object[vValues.size()];
				String[] appendTypes = new String[vTypes.size()];
				for (int j = 0; j < appendNames.length; j++) {
					appendNames[j] = vNames.elementAt(j).toString();
					appendValues[j] = vValues.elementAt(j);
					appendTypes[j] = vTypes.elementAt(j).toString();
				}
				//整合后的VO赋值
				vo.setDeptid(element);
				vo.setDeptname(s);
				vo.setDeptcode(sDeptcode);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			conformVos = new WaMultiReportVO02[v.size()];
			if (v.size() > 0) {
				v.copyInto(conformVos);
			}

		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"DataBean::queryWaMultiReport02(ItemInfoVO[] a_aryItemInfoVO,String a_strWhereSQL, nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear, String a_strPeriod) Exception!");
		}
		return conformVos;
	}

	public String getWherePart(String[] classids, String caccyear, String caccperiod){
		String wherePart = "";
		StringBuffer sqlB = new StringBuffer();
		for (int i = 0; i < classids.length; i ++ ) {
			String  classid = classids[i];
			if(i == 0){
				sqlB.append("(");
			}
			sqlB.append(" (wa_data.classid = " + classid + " and ");            //   1
			sqlB.append("       wa_data.cyear || wa_data.cperiod = ");  //   2
			sqlB.append("       (select distinct wa_period.cyear || wa_period.cperiod ");  //   3
			sqlB.append("           from wa_period inner join wa_periodstate ");
			sqlB.append("                on wa_periodstate.pk_periodset = wa_period.pk_wa_period ");
			sqlB.append("          where wa_period.caccyear = " + caccyear + " and wa_period.caccperiod = " + caccperiod + " and ");
			sqlB.append("                wa_periodstate.classid = " + classid + ")) ");

			if(i == classids.length -1){
				sqlB.append(")");
			}else{
				sqlB.append(" or ");
			}
		}
		return wherePart;
	}

	/**
	 * 工资总额实发金额统计
	 *
	 * @author wzq
	 */
	public CircHashVO[] queryPracMoney(String pkcorp, String pkdept, String
			cyear, boolean iscontra) throws nc.vo.pub.BusinessException{
		try{
			WaMultiReportDMO reportdmo = new WaMultiReportDMO();
			SuperDMO supDMO = new SuperDMO();

			if( pkcorp == null && pkdept == null ) {
				return null;
			}

			ArrayList<CircHashVO> array = new ArrayList<CircHashVO>();
			if( pkcorp != null ){
				//String[] corppks = reportdmo.queryAllChildCorp(pkcorp);
				String[] corppks = new String[]{pkcorp};
				if( corppks == null || corppks.length < 0 ) {
					return null;
				}

				for (String corppk : corppks) {
					ItemVO[] itemvos = reportdmo.getAllItems(corppk, null);
					CircHashVO tmpvo = reportdmo.getAllSumMny(itemvos,corppk,null,cyear);
					if(tmpvo == null){
						continue;
					}
					tmpvo.setAttribute("zesort",NCLangResOnserver.getInstance().getStrByID("60131604","UPP60131604-000156")/** 实际工资总额 */,IDataType.CHAR);
					array.add(tmpvo);
					if( iscontra ){
						SuperVO[] vos = supDMO.queryByWhereClause(TmCorpVO.class, " is_release = 'Y' and dr = 0 and pk_corp = '"+corppk+"' and theyear = '" +cyear +"' " );
						CircHashVO tmpvo2 = new CircHashVO();
						tmpvo2.setAttribute("zesort",NCLangResOnserver.getInstance().getStrByID("60131604","UPP60131604-000157")/** "分配工资总额" */,IDataType.CHAR);
						if( vos != null && vos.length > 0 ){
							int namelen = vos[0].getAttributeNames().length;
							for( int j=0; j<namelen; j++ ){
								tmpvo2.setAttributeValue(vos[0].getAttributeNames()[j],vos[0].getAttributeValue(vos[0].getAttributeNames()[j]));
							}
						}
						array.add(tmpvo2);
					}
				}
			}
			else{
				//String[] deptpks = reportdmo.queryAllChildDept(pkdept);
				String[] deptpks = new String[]{pkdept};
				if( deptpks == null || deptpks.length < 1 ) {
					return null;
				}

				for (String deptpk : deptpks) {
					ItemVO[] itemvos = reportdmo.getAllItems(null, deptpk);
					CircHashVO tmpvo = reportdmo.getAllSumMny(itemvos,null,deptpk,cyear);

					if(tmpvo == null) {
						continue;
					}

					tmpvo.setAttribute("zesort",NCLangResOnserver.getInstance().getStrByID("60131604","UPP60131604-000156")/** 实际工资总额 */,IDataType.CHAR);
					array.add(tmpvo);
					if( iscontra ){
						SuperVO[] vos = supDMO.queryByWhereClause(TmDeptVO.class, " is_release = 'Y' and dr = 0 and pk_deptdoc = '"+deptpk+"' and theyear = '"+cyear+"'");
						CircHashVO tmpvo2 = new CircHashVO();
						tmpvo2.setAttribute("zesort",NCLangResOnserver.getInstance().getStrByID("60131604","UPP60131604-000157")/** "分配工资总额" */,IDataType.CHAR);

						if( vos != null && vos.length > 0 ){
							int namelen = vos[0].getAttributeNames().length;
							for( int j=0; j<namelen; j++ ){
								tmpvo2.setAttributeValue(vos[0].getAttributeNames()[j],vos[0].getAttributeValue(vos[0].getAttributeNames()[j]));
							}
						}
						array.add(tmpvo2);
					}
				}
			}

			if( array.size() > 0 ){
				return array.toArray(new CircHashVO[0]);
			} else {
				return null;
			}
		}
		catch(Exception e){
			e.printStackTrace();
			throw new nc.vo.pub.BusinessException(e.getMessage());
		}
	}
	/**
	 * 单位工资总额台账
	 *
	 * @author guoad
	 */
	//	public CircHashVO[] getPeriodMoney(String pkcorp, String accYear, String accPeriod,
	//			boolean iscontra) throws BusinessException {
	//		try {
	//			DataDMO dmo = new DataDMO();
	//			WaMultiReportDMO reportdmo = new WaMultiReportDMO();
	//
	//			//得到当前公司的所有纳入工资总额的薪资类别
	//			String[] classId = dmo.getClassId(pkcorp);
	//
	//			if(classId == null || classId.length < 1){
	//				return null;
	//			}
	//			//取得纳入工资总额类别的纳入工资总额项目
	//			HashMap itemMap = new HashMap();
	//			for (int i = 0; i < classId.length; i++) {
	//				String cacuItem = dmo.getCacuItem(classId[i]);
	//				//如果没有纳入工资总额的项目
	//				if (cacuItem == null) {
	//					itemMap.put(classId[i], null);
	//				} else {
	//					itemMap.put(classId[i], cacuItem);
	//				}
	//			}
	//			//取得每个薪资类别对应的会计期间的并集
	//			int startNum = 1;
	//			int ednNum = 20;
	//			String[] periods = reportdmo.getallPeriod(accYear,classId);
	//
	//			for(int i = 0; i < periods.length; i++){
	//                //根据会计期间得到需要记入本会计期间的薪资期间
	//				for(){
	//
	//
	//				}
	//				//String periodCon = reportdmo.getPeriodCon(accYear, accPeriod, classId[i]);
	//				//如果当前薪资类别不存在纳入工资总额的新资项目，跳过当前类别进行下一个薪资类别的计算
	//				if(itemMap.get(classId[i]) == null){
	//				continue;
	//				}
	//
	//
	//
	//			}
	//
	//			return null;
	//		} catch (Exception ex) {
	//			reportException(ex);
	//			  throw new nc.vo.pub.BusinessException("");
	//		}
	//	}

	/**
	 * 员工工资台账
	 *
	 * @author wzq
	 */
	public GeneralVO[] queryStuffReport(String pkdept, String userid,
			String cyear, ItemVO[] itemvos) throws nc.vo.pub.BusinessException {
		try {
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			return dmo.queryStuffReport(pkdept, userid, cyear, itemvos);
		} catch (Exception e) {
			e.printStackTrace();
			throw new nc.vo.pub.BusinessException(e.getMessage());
		}
	}

	/* （非 Javadoc）
	 * @see nc.impl.wa.wa_020.IwaWaMultiReport#getPeriodByYear()
	 */
	public Hashtable getReportPeriodByYear() throws nc.vo.pub.BusinessException {
		Hashtable hashPeriod = null;
		String[] years = null;
		try {
			TmCorpDMO dmo = new TmCorpDMO();
			years = dmo.getWaYear();
			hashPeriod = dmo.getPeriodByYear(years);
			return hashPeriod;
		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"WaMultiReportBean::getPeriodByYear() Exception!", e);
		}

	}

	/**
	 *
	 * 修改历史:<Strong>xuanlt 2007 六月 19<Strong>
	 * @param year
	 * @param period
	 * @return
	 * @throws nc.vo.pub.BusinessException
	 * @see
	 */
	public ArrayList<String[]> getWAPeriodByAccperiod(String year ,String period) throws nc.vo.pub.BusinessException {
		try {
			TmCorpDMO dmo = new TmCorpDMO();
			return dmo.getWAPeriodByAccperiod(year, period);
		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"WaMultiReportBean::getWAPeriodByAccperiod() Exception!", e);
		}

	}


	public WaMultiReportVO01[] queryWaMultiReport01ByAccPeriod(

			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String accYear,
			String accMonth, Integer maxRow, String userid,
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO1// zhanghua增加导出选项
			) throws BusinessException {
		WaMultiReportVO01[] vos = null;
		try {
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//WaMultiReportVO01[] conformVos =
			// dmo.queryWaMultiReport01(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			nc.bs.logging.Logger.error("取人员数据s:" + System.currentTimeMillis());
			java.util.Hashtable h = dmo.queryWaMultiReport01ByAccperiod_hash(
					a_aryItemInfoVO, a_strWhereSQL, a_aryWaClassVO, accYear,accMonth, maxRow, userid,a_aryItemInfoVO1);
			nc.bs.logging.Logger.error("取人员数据e:" + System.currentTimeMillis());


			Object[] tempArray = h.keySet().toArray();
			String[] tempPsnid = new String[tempArray.length];

			for (int i = 0; i < tempArray.length; i++) {
				tempPsnid[i] = tempArray[i].toString();
			}

			//开始整合V0
			nc.bs.logging.Logger.error("开始整合V0......");
			nc.bs.logging.Logger.error("开始整合V0 s:" + System.currentTimeMillis());
			//所需变量
			Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>(); //整合后的VECTOR
			WaMultiReportVO01 vo = null; //整合后的VO
			Vector v001Vo = new Vector(); //临时VECTOR

			//临时VECTOR
			List<String> namesList = null;
			List<Object> valueList = null;
			List<String> typeList = null;
			

			//临时数组
			String[] names = null;
			Object[] values = null;
			String[] types = null;
			//VECTOR转换成数组
			String[] appendNames = null;
			Object[] appendValues = null;
			String[] appendTypes = null;
			//
			WaMultiReportVO01 tmpVo = new WaMultiReportVO01();
			//按人员
			for (String element : tempPsnid) {
				vo = new WaMultiReportVO01();
				v001Vo.removeAllElements();

				String s = null; //人员名称
				String sCode = null; //人员编码
				String jobname = null; //所在岗位
				String id = null; //身份证号
				String bankname = null; //代发银行
				String vacccode = null; //银行账号

				v001Vo = (Vector) h.get(element);
				if (v001Vo == null) {
					v001Vo = new Vector();
				}
				namesList = new ArrayList<String>();
				valueList = new ArrayList<Object>();
				typeList = new ArrayList<String>();
				
					

				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v001Vo.size(); j++) {

					tmpVo = (WaMultiReportVO01) v001Vo.elementAt(j);

					if (s == null) {
						s = tmpVo.getPsnname(); //人员名称
					}
					if (sCode == null) {
						sCode = tmpVo.getPsncode(); //人员编码
					}
					if (jobname == null) {
						jobname = tmpVo.getJobname(); //所在岗位
					}
					if (id == null) {
						id = tmpVo.getId(); //身份证号
					}

					if (bankname == null) {
						bankname = tmpVo.getBankname(); //代发银行
					}
					if (vacccode == null) {
						vacccode = tmpVo.getVacccode(); //银行账号
					}

					//临时数组
					names = tmpVo.getAppendNames();
					values = tmpVo.getAppendValues();
					types = tmpVo.getAppendTypes();
					
					int expitemlenth = 0;
					if(a_aryItemInfoVO1 != null){
						expitemlenth = a_aryItemInfoVO1.length;
					}
					for(int k = 0; k < expitemlenth; k++){
						namesList.add(names[k]);
						valueList.add(values[k]);
						typeList.add(types[k]);
					}
					// zhanghua
					for (int k = expitemlenth; k < names.length; k++) { //动态部门
						if(namesList.contains(names[k])){
							int index = namesList.indexOf(names[k]);

							Object val = valueList.get(index);
							UFDouble sum = val == null ? new UFDouble("0.00") : new UFDouble(val.toString());

							if(values[k]!=null){
								sum = sum.add(new UFDouble(values[k].toString()));
							}
							valueList.set(index, sum);

						}else{
							namesList.add(names[k]);
							valueList.add(values[k]);
							typeList.add(types[k]);
						}


					}
				}
				//VECTOR转换成数组
				appendNames = namesList.toArray(new String[namesList.size()]);
				appendValues = valueList.toArray(new Object[valueList.size()]);
				appendTypes = typeList.toArray(new String[typeList.size()]);


				//整合后的VO赋值
				vo.setPsnid(element);
				vo.setPsnname(s);
				vo.setPsncode(sCode);
				vo.setJobname(jobname);
				vo.setId(id);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				vo.setBankname(bankname);
				vo.setVacccode(vacccode);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			nc.bs.logging.Logger.error("整合V0完成");
			vos = new WaMultiReportVO01[v.size()];
			if (v.size() > 0) {
				v.copyInto(vos);
			}
			nc.bs.logging.Logger.error("整合V0结束 e:" + System.currentTimeMillis());
		} catch(OutOfMemoryError e){
			throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131604","UPP60131604-000181")/*@res "数据溢出错误， 原因选择的类别太多或者项目太多."*/);
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException(e.getMessage());
		}
		return vos;
	}


	public WaMultiReportVO02[] queryWaMultiReport02ByAccperiod(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO,
			String accYear, String accPeriod, String userid) throws BusinessException {

		WaMultiReportVO02[] conformVos = null;//datas = null;
		try { //deptpks
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//conformVos =
			// dmo.queryWaMultiReport02(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			Hashtable h = dmo
			.queryWaMultiReport02ByAccperiod_hash(a_aryItemInfoVO, a_strWhereSQL,
					a_aryWaClassVO, accYear,accPeriod, userid);
			//整合VO

			//得到所有的部门
			Vector vDeptId = (Vector) h.get("deptpks");
			if (vDeptId == null || vDeptId.size() < 0) {
				vDeptId = new Vector();
			}
			//int len=conformVos.length;
			//for (int i = 0;i<len;i++){
			//String sDeptid = conformVos[i].getDeptid();
			//String sFlag = "N";
			//if(vDeptId.contains(sDeptid)){
			//sFlag = "Y";
			//}
			////for(int j=0;j<vDeptId.size();j++){
			////if (vDeptId.elementAt(j).toString().equals(sDeptid)){
			////sFlag = "Y";
			////break;
			////}
			////}
			//if (sFlag.equals("N")){
			//vDeptId.addElement(sDeptid);
			//}
			//}
			//整合VO
			String[] tempDeptid = new String[vDeptId.size()];//所用的部门
			if (vDeptId.size() > 0) {
				vDeptId.copyInto(tempDeptid);
			}
			Vector<WaMultiReportVO02> v = new Vector<WaMultiReportVO02>();//整合后的VECTOR
			//按部门
			for (String element : tempDeptid) {
				WaMultiReportVO02 vo = new WaMultiReportVO02();//整合后的VO
				Vector v002Vo = new Vector();//临时VECTOR
				String s = "";//部门名称
				String sDeptcode = "";
				//查找部门相同的VO
				//for (int j=0;j<conformVos.length;j++){
				//if
				// (conformVos[j].getDeptid().equals(tempDeptid[i])){//找到部门相同的VO
				//v002Vo.addElement(conformVos[j]);
				//if (s.equals("")) s = conformVos[j].getDeptname();//部门名称
				//if (sDeptcode.equals("")) sDeptcode =
				// conformVos[j].getDeptcode();//部门编码
				//}
				//}
				v002Vo = (Vector) h.get(element);
				if (v002Vo == null) {
					v002Vo = new Vector();
				}
				if (v002Vo.size() > 0) {
					WaMultiReportVO02 vot = (WaMultiReportVO02) v002Vo.get(0);
					if (s.equals("")) {
						s = vot.getDeptname();//部门名称
					}
					if (sDeptcode.equals("")) {
						sDeptcode = vot.getDeptcode();//部门编码
					}
				}
				//临时VECTOR
				Vector<String> vNames = new Vector<String>();
				Vector<Object> vValues = new Vector<Object>();
				Vector<String> vTypes = new Vector<String>();
				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v002Vo.size(); j++) {
					WaMultiReportVO02 tmpVo = new WaMultiReportVO02();
					tmpVo = (WaMultiReportVO02) v002Vo.elementAt(j);
					//临时数组
					String[] names = tmpVo.getAppendNames();
					Object[] values = tmpVo.getAppendValues();
					String[] types = tmpVo.getAppendTypes();
					for (int k = 0; k < names.length; k++) {//动态部门
						vNames.addElement(names[k]);
						vValues.addElement(values[k]);
						vTypes.addElement(types[k]);
					}
				}
				//VECTOR转换成数组
				String[] appendNames = new String[vNames.size()];
				Object[] appendValues = new Object[vValues.size()];
				String[] appendTypes = new String[vTypes.size()];
				for (int j = 0; j < appendNames.length; j++) {
					appendNames[j] = vNames.elementAt(j).toString();
					appendValues[j] = vValues.elementAt(j);
					appendTypes[j] = vTypes.elementAt(j).toString();
				}
				//整合后的VO赋值
				vo.setDeptid(element);
				vo.setDeptname(s);
				vo.setDeptcode(sDeptcode);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			conformVos = new WaMultiReportVO02[v.size()];
			if (v.size() > 0) {
				v.copyInto(conformVos);
			}

		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"DataBean::queryWaMultiReport02(ItemInfoVO[] a_aryItemInfoVO,String a_strWhereSQL, nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear, String a_strPeriod) Exception!");
		}
		return conformVos;
	}

	/**
	 * VERSION 2007 六月 20
	 * @author xuanlt
	 * @param itemInfoVO
	 * @param whereSQL
	 * @param waClassVO
	 * @param alist
	 * @param maxRow
	 * @return
	 * @throws BusinessException
	 * @see nc.itf.hr.wa.IWaMultiReport#queryWaMultiReport01Bylist(nc.vo.wa.wa_024.ItemVO[], java.lang.String, nc.vo.wa.wa_008.WaclassVO[], java.util.ArrayList, java.lang.Integer)
	 */
	public  WaMultiReportVO01[] queryWaMultiReport01Bylist(ItemVO[] a_aryItemInfoVO, String a_strWhereSQL, WaclassVO[] a_aryWaClassVO, ArrayList alist, Integer maxRow)  throws nc.vo.pub.BusinessException{

		WaMultiReportVO01[] vos = null;
		try {
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//WaMultiReportVO01[] conformVos =
			// dmo.queryWaMultiReport01(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			nc.bs.logging.Logger.error("取人员数据s:" + System.currentTimeMillis());
			Hashtable h = dmo.queryWaMultiReport01_hash(
					a_aryItemInfoVO, a_strWhereSQL, a_aryWaClassVO, alist, maxRow);
			nc.bs.logging.Logger.error("取人员数据e:" + System.currentTimeMillis());
			//人员
			//bsj edited: 不用单取人员，直接从人员数据里面取即可
			//nc.bs.logging.Logger.error("单取人员s:" + System.currentTimeMillis());
			//String[] tempPsnid =
			//dmo.queryWaMultiReport01psn(
			//a_strWhereSQL,
			//a_aryWaClassVO,
			//a_strYear,
			//a_strPeriod,maxRow);
			//nc.bs.logging.Logger.error("单取人员e:" + System.currentTimeMillis());

			Object[] tempArray = h.keySet().toArray();
			String[] tempPsnid = new String[tempArray.length];

			for (int i = 0; i < tempArray.length; i++) {
				tempPsnid[i] = tempArray[i].toString();
			}

			//开始整合V0
			nc.bs.logging.Logger.error("开始整合V0......");
			nc.bs.logging.Logger.error("开始整合V0 s:" + System.currentTimeMillis());
			//所需变量
			Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>(); //整合后的VECTOR
			WaMultiReportVO01 vo = null; //整合后的VO
			Vector v001Vo = new Vector(); //临时VECTOR
			String s = ""; //人员名称
			String sCode = ""; //人员编码
			String jobname = ""; //所在岗位
			//临时VECTOR
			Vector<String> vNames = new Vector<String>();
			Vector<Object> vValues = new Vector<Object>();
			Vector<String> vTypes = new Vector<String>();
			//临时数组
			String[] names = null;
			Object[] values = null;
			String[] types = null;
			//VECTOR转换成数组
			String[] appendNames = null;
			Object[] appendValues = null;
			String[] appendTypes = null;
			//
			WaMultiReportVO01 tmpVo = new WaMultiReportVO01();
			//按人员
			for (String element : tempPsnid) {
				vo = new WaMultiReportVO01();
				v001Vo.removeAllElements();
				s = "";
				sCode = "";
				jobname = "";
				//查找人员相同的VO
				//for (int j=0;j<conformVos.length;j++){
				//if
				// (conformVos[j].getPsnid().equals(tempPsnid[i])){//找到人员相同的VO
				//v001Vo.addElement(conformVos[j]);
				//if (s.equals("")) s = conformVos[j].getPsnname();//人员名称
				//if (sCode.equals("")) sCode =
				// conformVos[j].getPsncode();//人员编码
				//if (v001Vo.size() == a_aryWaClassVO.length) break;
				//}
				//}

				v001Vo = (java.util.Vector) h.get(element);
				if (v001Vo == null) {
					v001Vo = new java.util.Vector();
				}
				if (v001Vo.size() > 0) {
					WaMultiReportVO01 vot = (WaMultiReportVO01) v001Vo.get(0);
					if (s.equals("")) {
						s = vot.getPsnname(); //人员名称
					}
					if (sCode.equals("")) {
						sCode = vot.getPsncode(); //人员编码
					}
					if (jobname.equals("")) {
						jobname = vot.getJobname(); //所在岗位
					}
				}
				//临时VECTOR
				vNames.removeAllElements();
				vValues.removeAllElements();
				vTypes.removeAllElements();
				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v001Vo.size(); j++) {
					tmpVo = null;
					tmpVo = (WaMultiReportVO01) v001Vo.elementAt(j);
					//临时数组
					names = tmpVo.getAppendNames();
					values = tmpVo.getAppendValues();
					types = tmpVo.getAppendTypes();
					for (int k = 0; k < names.length; k++) { //动态部门
						vNames.addElement(names[k]);
						vValues.addElement(values[k]);
						vTypes.addElement(types[k]);
					}
				}
				//VECTOR转换成数组
				appendNames = new String[vNames.size()];
				appendValues = new Object[vValues.size()];
				appendTypes = new String[vTypes.size()];
				for (int j = 0; j < appendNames.length; j++) {
					appendNames[j] = vNames.elementAt(j).toString();
					appendValues[j] = vValues.elementAt(j);
					appendTypes[j] = vTypes.elementAt(j).toString();
				}
				//整合后的VO赋值
				vo.setPsnid(element);
				vo.setPsnname(s);
				vo.setPsncode(sCode);
				vo.setJobname(jobname);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			nc.bs.logging.Logger.error("整合V0完成");
			vos = new WaMultiReportVO01[v.size()];
			if (v.size() > 0) {
				v.copyInto(vos);
			}
			nc.bs.logging.Logger.error("整合V0结束 e:" + System.currentTimeMillis());
		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"DataBean::queryWaMultiReport01(ItemInfoVO[] a_aryItemInfoVO,String a_strWhereSQL, nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, ArrayList<String[]> alist) Exception!");
		}
		return vos;
	}

	/**
	 * 根据多个薪资期间与薪资类别进行多类别薪资报表的汇总
	 *
	 * @author xuanlt
	 * @param itemInfoVO
	 * @param whereSQL
	 * @param waClassVO
	 * @param list         薪资期间列表
	 * @return
	 * @throws BusinessException
	 * @see nc.itf.hr.wa.IWaMultiReport#queryWaMultiReport02Bylist(nc.vo.wa.wa_024.ItemVO[],
	 *      java.lang.String, nc.vo.wa.wa_008.WaclassVO[], java.util.ArrayList)
	 */
	public WaMultiReportVO02[] queryWaMultiReport02Bylist(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO,
			ArrayList aList) throws nc.vo.pub.BusinessException {

		WaMultiReportVO02[] conformVos = null;//datas = null;
		try { //deptpks
			WaMultiReportDMO dmo = new WaMultiReportDMO();
			//conformVos =
			// dmo.queryWaMultiReport02(a_aryItemInfoVO,a_strWhereSQL,a_aryWaClassVO,a_strYear,a_strPeriod);
			Hashtable h = dmo
			.queryWaMultiReport02_hash(a_aryItemInfoVO, a_strWhereSQL,
					a_aryWaClassVO, aList);
			//整合VO

			//得到所有的部门
			Vector vDeptId = (Vector) h.get("deptpks");
			if (vDeptId == null || vDeptId.size() < 0) {
				vDeptId = new Vector();
			}
			//int len=conformVos.length;
			//for (int i = 0;i<len;i++){
			//String sDeptid = conformVos[i].getDeptid();
			//String sFlag = "N";
			//if(vDeptId.contains(sDeptid)){
			//sFlag = "Y";
			//}
			////for(int j=0;j<vDeptId.size();j++){
			////if (vDeptId.elementAt(j).toString().equals(sDeptid)){
			////sFlag = "Y";
			////break;
			////}
			////}
			//if (sFlag.equals("N")){
			//vDeptId.addElement(sDeptid);
			//}
			//}
			//整合VO
			String[] tempDeptid = new String[vDeptId.size()];//所用的部门
			if (vDeptId.size() > 0) {
				vDeptId.copyInto(tempDeptid);
			}
			Vector<WaMultiReportVO02> v = new Vector<WaMultiReportVO02>();//整合后的VECTOR
			//按部门
			for (String element : tempDeptid) {
				WaMultiReportVO02 vo = new WaMultiReportVO02();//整合后的VO
				Vector v002Vo = new Vector();//临时VECTOR
				String s = "";//部门名称
				String sDeptcode = "";
				//查找部门相同的VO
				//for (int j=0;j<conformVos.length;j++){
				//if
				// (conformVos[j].getDeptid().equals(tempDeptid[i])){//找到部门相同的VO
				//v002Vo.addElement(conformVos[j]);
				//if (s.equals("")) s = conformVos[j].getDeptname();//部门名称
				//if (sDeptcode.equals("")) sDeptcode =
				// conformVos[j].getDeptcode();//部门编码
				//}
				//}
				v002Vo = (Vector) h.get(element);
				if (v002Vo == null) {
					v002Vo = new Vector();
				}
				if (v002Vo.size() > 0) {
					WaMultiReportVO02 vot = (WaMultiReportVO02) v002Vo.get(0);
					if (s.equals("")) {
						s = vot.getDeptname();//部门名称
					}
					if (sDeptcode.equals("")) {
						sDeptcode = vot.getDeptcode();//部门编码
					}
				}
				//临时VECTOR
				Vector<String> vNames = new Vector<String>();
				Vector<Object> vValues = new Vector<Object>();
				Vector<String> vTypes = new Vector<String>();
				//人员相同的VO中的动态部分合并
				for (int j = 0; j < v002Vo.size(); j++) {
					WaMultiReportVO02 tmpVo = new WaMultiReportVO02();
					tmpVo = (WaMultiReportVO02) v002Vo.elementAt(j);
					//临时数组
					String[] names = tmpVo.getAppendNames();
					Object[] values = tmpVo.getAppendValues();
					String[] types = tmpVo.getAppendTypes();
					for (int k = 0; k < names.length; k++) {//动态部门
						vNames.addElement(names[k]);
						vValues.addElement(values[k]);
						vTypes.addElement(types[k]);
					}
				}
				//VECTOR转换成数组
				String[] appendNames = new String[vNames.size()];
				Object[] appendValues = new Object[vValues.size()];
				String[] appendTypes = new String[vTypes.size()];
				for (int j = 0; j < appendNames.length; j++) {
					appendNames[j] = vNames.elementAt(j).toString();
					appendValues[j] = vValues.elementAt(j);
					appendTypes[j] = vTypes.elementAt(j).toString();
				}
				//整合后的VO赋值
				vo.setDeptid(element);
				vo.setDeptname(s);
				vo.setDeptcode(sDeptcode);
				vo.setAppendNames(appendNames);
				vo.setAppendValues(appendValues);
				vo.setAppendTypes(appendTypes);
				//加入到整合后的VECTOR
				v.addElement(vo);
			}
			//得到整合后的VO数组
			conformVos = new WaMultiReportVO02[v.size()];
			if (v.size() > 0) {
				v.copyInto(conformVos);
			}

		} catch (Exception e) {
			reportException(e);
			throw new nc.vo.pub.BusinessException(
					"DataBean::queryWaMultiReport02(ItemInfoVO[] a_aryItemInfoVO,String a_strWhereSQL, nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strYear, String a_strPeriod) Exception!");
		}
		return conformVos;
	}
}
