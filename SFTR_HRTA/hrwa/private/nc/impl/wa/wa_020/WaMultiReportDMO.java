/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.impl.wa.wa_020;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.bs.ml.NCLangResOnserver;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.impl.wa.wa_002.ClassitemDMO;
import nc.impl.wa.wa_pub.LocSqlTrans;
import nc.jdbc.framework.processor.ResultSetProcessor;
import nc.vo.bd.b00.IDataType;
import nc.vo.hash.hashVO.CircHashVO;
import nc.vo.hr.tools.pub.GeneralVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDouble;
import nc.vo.wa.wa_001.WaGlobalVO;
import nc.vo.wa.wa_020.WaMultiReportVO01;
import nc.vo.wa.wa_020.WaMultiReportVO02;
import nc.vo.wa.wa_024.ItemVO;

/**
 * Data的DMO类。
 *
 * 创建日期：(2001-8-14)
 *
 * @author：
 */
public class WaMultiReportDMO extends DataManageObject {
	/**
	 * DataDMO 构造子注解。
	 *
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public WaMultiReportDMO() throws javax.naming.NamingException,
	SystemException {
		super();
	}

	/**
	 * DataDMO 构造子注解。
	 *
	 * @param dbName
	 *            java.lang.String 在EJB Server中配置的数据库DataSource名称。
	 * @exception javax.naming.NamingException
	 *                父类构造子抛出的异常。
	 * @exception nc.bs.pub.SystemException
	 *                父类构造子抛出的异常。
	 */
	public WaMultiReportDMO(String dbName) throws javax.naming.NamingException,
	SystemException {
		super(dbName);
	}

	/**
	 * 多类别报表 所执行的SQL示例如下： SELECT DISTINCT
	 * WA_DATA.PSNID,BD_PSNDOC.PSNCODE,BD_PSNDOC.PSNNAME , WA_DATA.F_1,
	 * WA_DATAZ.F_1, WA_DATA.F_2, WA_DATAZ.F_2, WA_DATA.F_3, WA_DATAZ.F_3 FROM
	 * WA_DATA , WA_DATAZ, BD_PSNDOC WHERE WA_DATA.CLASSID in
	 * ('00000000000000000001','00000000000000000002') AND WA_DATA.CYEAR =
	 * '2001' AND WA_DATA.CPERIOD = '08'AND WA_DATA.ISTOPFLAG=0 AND
	 * WA_DATA.PSNID = BD_PSNDOC.PK_PSNDOC AND WA_DATA.PSNID = WA_DATAZ.PSNID
	 * AND WA_DATA.CYEAR = WA_DATAZ.CYEAR AND WA_DATA.CPERIOD = WA_DATAZ.CPERIOD
	 * AND WA_DATA.CLASSID = WA_DATAZ.CLASSID ORDER BY WA_DATA.PSNID
	 */
	public WaMultiReportVO01[] queryWaMultiReport01(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strCurYear,
			String a_strCurPeriod, Integer maxRow) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod, maxRow });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (a_strCurYear == null || a_strCurYear.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}
		if (a_strCurPeriod == null || a_strCurPeriod.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000003")/* @res "当前期间参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", wa_data.f_"
			+ element.getIitemid().toString()
			+ ", wa_dataz.f_"
			+ element.getIitemid().toString();
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")";
			//删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc";

		//	得到所有的查询人员
		String sql = "select distinct wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname "
			+ l_strItemSQL
			+ " from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " left join om_job on om_job.pk_om_job = bd_psndoc.pk_om_job "
			+ " where  wa_data.classid in ("
			+ l_strClassSQL
			+ ") and wa_data.cyear = '"
			+ a_strCurYear
			+ "' and wa_data.cperiod = '"
			+ a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  ";

		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables);
		sql += " and (wa_data.psnid in (";

		String tempsql = "select "
			+ " wa_data.psnid from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " where wa_data.classid in ("
			+ l_strClassSQL
			+ ") and wa_data.cyear = '"
			+ a_strCurYear
			+ "' and wa_data.cperiod = '"
			+ a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  "
			+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
					a_strWhereSQL, "wa_data", "psnid", tables);

		WaMultiReportVO01[] l_aryWaMultiReportVO01 = null;
		Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			tempsql = nc.impl.wa.wa_pub.LocSqlTrans.getInstance().transSql(tempsql,con);
			String tempTable =  nc.impl.wa.wa_pub.LocSqlTrans.getInstance()
			.createTempTable(con, "tempTable_wa_data", tempsql, "psnid");
			sql += "select top ";
			sql += maxRow.intValue();
			sql += " psnid from " + tempTable + "))";
			sql += " order by wa_data.psnid";
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO01 l_WaMultiReportVO01Single = new WaMultiReportVO01();
				l_WaMultiReportVO01Single
				.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single
				.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single
				.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// psnid :
				String psnid = rs.getString(1);
				l_WaMultiReportVO01Single.setPsnid(psnid == null ? null : psnid
						.trim());
				//psncode:
				String psncode = rs.getString(2);
				l_WaMultiReportVO01Single.setPsncode(psncode == null ? null
						: psncode.trim());
				// psnname :
				String psnname = rs.getString(3);
				l_WaMultiReportVO01Single.setPsnname(psnname == null ? null
						: psnname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO01Single.setWaclassid(waclassid == null ? null
						: waclassid.trim());
				// jobname :
				String jobname = rs.getString(5);
				l_WaMultiReportVO01Single.setJobname(jobname == null ? null
						: jobname.trim());
				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO01Single.getAppendNames()[i] = waclassid
						+ ".WA_DATA.F_"
						+ a_aryItemInfoVO[Integer
						                  .parseInt((new Integer(i / 2))
						                		  .toString())].getIitemid()
						                		  .toString();

					} else {
						l_WaMultiReportVO01Single.getAppendNames()[i] = "WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer
							                  .parseInt((new Integer(i / 2))
							                		  .toString())].getIitemid()
							                		  .toString();
					}
					l_WaMultiReportVO01Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO01Single.getAppendValues()[i] = rs
					.getBigDecimal(6 + i);

				}

				v.addElement(l_WaMultiReportVO01Single);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		if (v.size() > 0) {
			l_aryWaMultiReportVO01 = new WaMultiReportVO01[v.size()];
			v.copyInto(l_aryWaMultiReportVO01);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod, maxRow });
		/** ********************************************************** */

		return l_aryWaMultiReportVO01;
	}

	/**
	 * 多类别报表 所执行的SQL示例如下： SELECT DISTINCT
	 * WA_DATA.PSNID,BD_PSNDOC.PSNCODE,BD_PSNDOC.PSNNAME , WA_DATA.F_1,
	 * WA_DATAZ.F_1, WA_DATA.F_2, WA_DATAZ.F_2, WA_DATA.F_3, WA_DATAZ.F_3 FROM
	 * WA_DATA , WA_DATAZ, BD_PSNDOC WHERE WA_DATA.CLASSID in
	 * ('00000000000000000001','00000000000000000002') AND WA_DATA.CYEAR =
	 * '2001' AND WA_DATA.CPERIOD = '08'AND WA_DATA.ISTOPFLAG=0 AND
	 * WA_DATA.PSNID = BD_PSNDOC.PK_PSNDOC AND WA_DATA.PSNID = WA_DATAZ.PSNID
	 * AND WA_DATA.CYEAR = WA_DATAZ.CYEAR AND WA_DATA.CPERIOD = WA_DATAZ.CPERIOD
	 * AND WA_DATA.CLASSID = WA_DATAZ.CLASSID ORDER BY WA_DATA.PSNID
	 */
	public java.util.Hashtable<String, Vector<WaMultiReportVO01>> queryWaMultiReport01_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strCurYear,
			String a_strCurPeriod, Integer maxRow) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod, maxRow });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (a_strCurYear == null || a_strCurYear.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}
		if (a_strCurPeriod == null || a_strCurPeriod.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000003")/* @res "当前期间参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", wa_data.f_"
			+ element.getIitemid().toString()
			+ ", wa_dataz.f_"
			+ element.getIitemid().toString();
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc";

		//	得到所有的查询人员
		String sql = "select distinct wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname "
			+ l_strItemSQL
			+ " from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " left join om_job on om_job.pk_om_job = bd_psndoc.pk_om_job "
			+ " where  wa_data.classid in ("
			+ l_strClassSQL
			+ ") and wa_data.cyear = '"
			+ a_strCurYear
			+ "' and wa_data.cperiod = '"
			+ a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  ";

		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables);
		sql += " and (wa_data.psnid in (";

		String tempsql = "select distinct "
			+ " wa_data.psnid from wa_data inner join  wa_dataz on wa_data.pk_wa_data=wa_dataz.pk_wa_dataz inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " where wa_data.classid in ("
			+ l_strClassSQL
			+ ") and wa_data.cyear = '"
			+ a_strCurYear
			+ "' and wa_data.cperiod = '"
			+ a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  "
			+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
					a_strWhereSQL, "wa_data", "psnid", tables);

		java.util.Hashtable<String, Vector<WaMultiReportVO01>> h = new java.util.Hashtable<String, Vector<WaMultiReportVO01>>();
		Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			tempsql = LocSqlTrans.getInstance().transSql(tempsql,con);
			String tempTable =  LocSqlTrans.getInstance().createTempTable(con, "tempTable_wa_data", tempsql, "psnid");
			sql += "select top ";
			sql += maxRow.intValue();
			sql += " psnid from " + tempTable + "))";
			sql += " order by wa_data.psnid";
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO01 l_WaMultiReportVO01Single = new WaMultiReportVO01();
				l_WaMultiReportVO01Single.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// psnid :
				String psnid = rs.getString(1);
				l_WaMultiReportVO01Single.setPsnid(psnid == null ? null : psnid.trim());
				//psncode:
				String psncode = rs.getString(2);
				l_WaMultiReportVO01Single.setPsncode(psncode == null ? null : psncode.trim());
				// psnname :
				String psnname = rs.getString(3);
				l_WaMultiReportVO01Single.setPsnname(psnname == null ? null : psnname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO01Single.setWaclassid(waclassid == null ? null : waclassid.trim());
				// jobname :
				String jobname = rs.getString(5);
				l_WaMultiReportVO01Single.setJobname(jobname == null ? null : jobname.trim());

				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO01Single.getAppendNames()[i] = waclassid + ".WA_DATA.F_"
						+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();

					} else {
						l_WaMultiReportVO01Single.getAppendNames()[i] = "WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();
					}
					l_WaMultiReportVO01Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO01Single.getAppendValues()[i] = rs.getBigDecimal(6 + i);

				}
				if (v.size() > 0) {
					WaMultiReportVO01 t = v.get(0);
					if (t.getPsnid().equals(l_WaMultiReportVO01Single.getPsnid())) {
						v.addElement(l_WaMultiReportVO01Single);
					} else {
						h.put(t.getPsnid(), v);
						v = new java.util.Vector<WaMultiReportVO01>();
						v.addElement(l_WaMultiReportVO01Single);
					}
				} else {
					v.addElement(l_WaMultiReportVO01Single);
				}
			}
			if (v.size() > 0) {
				WaMultiReportVO01 t = v.get(0);
				h.put(t.getPsnid(), v);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod, maxRow });
		/** ********************************************************** */

		return h;
	}

	/**
	 * 多类别报表 所执行的SQL示例如下： SELECT DISTINCT
	 * WA_DATA.PSNID,BD_PSNDOC.PSNCODE,BD_PSNDOC.PSNNAME , WA_DATA.F_1,
	 * WA_DATAZ.F_1, WA_DATA.F_2, WA_DATAZ.F_2, WA_DATA.F_3, WA_DATAZ.F_3 FROM
	 * WA_DATA , WA_DATAZ, BD_PSNDOC WHERE WA_DATA.CLASSID in
	 * ('00000000000000000001','00000000000000000002') AND WA_DATA.CYEAR =
	 * '2001' AND WA_DATA.CPERIOD = '08'AND WA_DATA.ISTOPFLAG=0 AND
	 * WA_DATA.PSNID = BD_PSNDOC.PK_PSNDOC AND WA_DATA.PSNID = WA_DATAZ.PSNID
	 * AND WA_DATA.CYEAR = WA_DATAZ.CYEAR AND WA_DATA.CPERIOD = WA_DATAZ.CPERIOD
	 * AND WA_DATA.CLASSID = WA_DATAZ.CLASSID ORDER BY WA_DATA.PSNID
	 */
	public java.util.Hashtable<String, Vector<WaMultiReportVO01>> queryWaMultiReport01_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, ArrayList<String[]> aList, Integer maxRow) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, aList, maxRow });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (aList == null || aList.size()==0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}


		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_"
			+ element.getIitemid().toString()
			+ "), sum(wa_dataz.f_"
			+ element.getIitemid().toString()+")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc";

		//	得到所有的查询人员
		String sql = "select distinct wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname "
			+ l_strItemSQL
			+ " from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " left join om_job on om_job.pk_om_job = bd_psndoc.pk_om_job "
			+ " where  wa_data.classid in ("
			+ l_strClassSQL
			+ ") "+ getPeriodConditon(aList)
			+ "and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  ";

		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables);
		sql += " and (wa_data.psnid in (";

		String tempsql = "select distinct "
			+ " wa_data.psnid from wa_data inner join  wa_dataz on wa_data.pk_wa_data=wa_dataz.pk_wa_dataz inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " where wa_data.classid in ("
			+ l_strClassSQL
			+ ") "	+ getPeriodConditon(aList)

			+ " and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  "
			+ "  bd_psndoc.dr=0 and  "
			+ nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
					a_strWhereSQL, "wa_data", "psnid", tables);

		java.util.Hashtable<String, Vector<WaMultiReportVO01>> h = new java.util.Hashtable<String, Vector<WaMultiReportVO01>>();
		Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			tempsql = LocSqlTrans.getInstance().transSql(tempsql,con);
			String tempTable =  LocSqlTrans.getInstance().createTempTable(con, "tempTable_wa_data", tempsql, "psnid");
			sql += "select top ";
			sql += maxRow.intValue();
			sql += " psnid from " + tempTable + "))";
			sql += " group  by wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname";
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO01 l_WaMultiReportVO01Single = new WaMultiReportVO01();
				l_WaMultiReportVO01Single.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO01Single.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// psnid :
				String psnid = rs.getString(1);
				l_WaMultiReportVO01Single.setPsnid(psnid == null ? null : psnid.trim());
				//psncode:
				String psncode = rs.getString(2);
				l_WaMultiReportVO01Single.setPsncode(psncode == null ? null : psncode.trim());
				// psnname :
				String psnname = rs.getString(3);
				l_WaMultiReportVO01Single.setPsnname(psnname == null ? null : psnname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO01Single.setWaclassid(waclassid == null ? null : waclassid.trim());
				// jobname :
				String jobname = rs.getString(5);
				l_WaMultiReportVO01Single.setJobname(jobname == null ? null : jobname.trim());

				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO01Single.getAppendNames()[i] = waclassid + ".WA_DATA.F_"
						+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();

					} else {
						l_WaMultiReportVO01Single.getAppendNames()[i] = "WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();
					}
					l_WaMultiReportVO01Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO01Single.getAppendValues()[i] = rs.getBigDecimal(6 + i);

				}

				//为什么对 首元素特别"照顾"
				if (v.size() > 0) {
					WaMultiReportVO01 t = v.get(0);
					if (t.getPsnid().equals(l_WaMultiReportVO01Single.getPsnid())) {
						v.addElement(l_WaMultiReportVO01Single);
					} else {
						h.put(t.getPsnid(), v);
						v = new java.util.Vector<WaMultiReportVO01>();
						v.addElement(l_WaMultiReportVO01Single);
					}
				} else {
					v.addElement(l_WaMultiReportVO01Single);
				}
			}//end while

			if (v.size() > 0) {
				WaMultiReportVO01 t = v.get(0);
				h.put(t.getPsnid(), v);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO,aList, maxRow });
		/** ********************************************************** */

		return h;
	}


	@SuppressWarnings("unchecked")
	public HashSet<String> getWaItemUser(String userid, WaGlobalVO globalVO) throws SystemException, NamingException, DAOException {

		ClassitemDMO classitemDMO = new ClassitemDMO();
		String whereSql = classitemDMO.getItemPkSqlByUseridClassid(userid, new WaGlobalVO[]{globalVO});
		StringBuffer sqlB = new StringBuffer("select wa_item.iitemid from wa_item ");
		sqlB.append("   where  wa_item.pk_wa_item in (");
		sqlB.append(whereSql);
		sqlB.append("   )");

		BaseDAO baseDAO = new BaseDAO();

		return(HashSet<String>) baseDAO.executeQuery(sqlB.toString(), new ResultSetProcessor() {
			private static final long serialVersionUID = 0L;

			public Object handleResultSet(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				HashSet<String> hashMap  = new HashSet<String>();
				while (rs.next()) {
					hashMap.add("wa_data.f_" + rs.getInt(1));
				}
				return hashMap;
			}
		});

	}



	/**
	 *
	 * @param a_aryItemInfoVO
	 * @param a_strWhereSQL
	 * @param a_aryWaClassVO
	 * @param aList
	 * @param maxRow
	 * @return
	 * @throws NamingException
	 * @throws DAOException
	 * @throws SystemException
	 */
	public java.util.Hashtable<String, Vector<WaMultiReportVO01>> queryWaMultiReport01ByAccperiod_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String accYear, String accPeriod, Integer maxRow, String userid,
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO1// zhanghua
			) throws SQLException, SystemException, DAOException, NamingException {

		// 传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000000")/* "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000018")/* "查看的薪资类别参数非法！" */);
		}

		if (accYear == null || accYear.equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000002")/* "当前年参数非法！" */);
		}

		if (accPeriod == null || accPeriod.equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131604", "UPP60131604-000183")/* "当前期间参数非法！" */);
		}

		String[] tempClass = new String[a_aryWaClassVO.length];
		// 得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			tempClass[i] = a_aryWaClassVO[i].getPrimaryKey();
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		// 得到导出薪资项目 zhanghua
		String l_strItemSQL01 = "";
		String l_strItemSQL02 ="";
		
		if(a_aryItemInfoVO1 != null){
			for(ItemVO element : a_aryItemInfoVO1){
				l_strItemSQL01 = l_strItemSQL01 + ","+element.getPk_wa_item();
			}
		}
		
		//l_strItemSQL02 = l_strItemSQL01.substring(0, l_strItemSQL01.length()-1);
		// bug的提出: 操作员查询两个薪资类别
		// 的数据,但是每一个薪资类别的数据都超过最大行数的限制.因此查询结果中只能显示一个类别的薪资数据,其它类别都是空
		// 解决方案 :首先检索出psnid
		// 得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_" + element.getIitemid().toString() + "), sum(wa_dataz.f_" + element.getIitemid().toString() + ")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 4) {
			String simbal = a_strWhereSQL.trim().substring(0, 4);
			if (simbal.equalsIgnoreCase("and")) {
				a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; // 删除and并防止
			}
		} else {
			a_strWhereSQL = "1=1";
		}

		String tables = "bd_psndoc,bd_psnbasdoc";

		// 得到所有的查询人员

		String sql = "select ";
		String tempsql = "select top "+maxRow.intValue()+" psnid from (select distinct ";//2012.10.19 外包装一层，增加个数

		sql += "  wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname, bd_psnbasdoc.id, wa_bank.bank_name,wa_psn.vacccode "
			+ l_strItemSQL01
			+ l_strItemSQL
			+ " from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
			+ " inner join wa_waclass  on  wa_data.classid= wa_waclass.pk_wa_class"
			+ " inner join wa_period  on wa_data.cyear = wa_period.cyear and wa_data.cperiod = wa_period.cperiod  and  wa_waclass.pk_periodscheme= wa_period.pk_periodscheme  "
			+ " inner join wa_periodstate on wa_periodstate.pk_periodset = wa_period.pk_wa_period   and  wa_periodstate.classid  = wa_data.classid  "
			// +
			// " left join om_job on om_job.pk_om_job = bd_psndoc.pk_om_job "//兼职人员的岗位会无法带出
			+ " left join om_job on om_job.pk_om_job = wa_data.pk_om_job "
			+ " left join wa_psn left join wa_bank on wa_psn.bankid = wa_bank.pk_wa_bank on "
			+ " wa_psn.psnid=wa_data.psnid and  wa_psn.classid =  wa_data.classid"
			+ " AND wa_psn.cyear = wa_data.cyear AND wa_psn.cperiod = wa_data.cperiod AND wa_psn.istopflag = 0 and wa_psn.dr=0 "
			// begin zhanghua
			+" left join v_hi_gwgz on bd_psndoc.pk_psndoc = v_hi_gwgz.pk_psndoc "
			+" left join v_hi_gwjb on bd_psndoc.pk_psndoc = v_hi_gwjb.pk_psndoc "
			+" left join v_hi_xjgz on bd_psndoc.pk_psndoc = v_hi_xjgz.pk_psndoc "
			+" left join v_hi_gwjt on bd_psndoc.pk_psndoc = v_hi_gwjt.pk_psndoc "
			+" left join v_hi_gznx  on bd_psndoc.pk_psndoc = v_hi_gznx.pk_psndoc "
			+" left join bd_defdoc on bd_psnbasdoc.permanreside = bd_defdoc.pk_defdoc and bd_defdoc.dr=0"
			+" left join bd_psncl on bd_psndoc.pk_psncl= bd_psncl.pk_psncl and bd_psncl.dr=0"
			// end
			+ " where  wa_periodstate.ipayoffflag = 1 and wa_data.classid in (" + l_strClassSQL + ") " + " and wa_period.caccyear= '" + accYear + "' and wa_period.caccperiod= '" + accPeriod + "'"
			+ getPayofflagCondition() + " and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  " + "  bd_psndoc.dr=0  ";

		tempsql += " " //maxRow.intValue() //2012.10.19 sqt 外包装一层  增加个数
		+ "  wa_data.psnid  "
		+ " from wa_data inner join  wa_dataz on wa_data.classid=wa_dataz.classid and wa_data.psnid=wa_dataz.psnid and wa_data.cyear=wa_dataz.cyear and wa_data.cperiod=wa_dataz.cperiod  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc "
		+ " inner join  wa_waclass  on  wa_data.classid= wa_waclass.pk_wa_class"
		+ " inner join    wa_period  on wa_data.cyear = wa_period.cyear and wa_data.cperiod = wa_period.cperiod  and  wa_waclass.pk_periodscheme= wa_period.pk_periodscheme  "
		+ "   INNER JOIN wa_periodstate on wa_periodstate.pk_periodset = wa_period.pk_wa_period   and  wa_periodstate.classid  = wa_data.classid  "
		// +
		// " left join om_job on om_job.pk_om_job = bd_psndoc.pk_om_job "//兼职人员的岗位会无法带出
		+ " left join om_job on om_job.pk_om_job = wa_data.pk_om_job "

		+ " where  wa_periodstate.ipayoffflag = 1 and wa_data.classid in (" + l_strClassSQL + ") " + " and wa_period.caccyear= '" + accYear + "' and wa_period.caccperiod= '" + accPeriod + "'"
		+ getPayofflagCondition() + " and wa_data.istopflag=0 and wa_data.dr = 0 and  wa_dataz.dr = 0  and  " + "  bd_psndoc.dr=0 ";

		String temp = nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(a_strWhereSQL, "wa_data", "psnid", tables);

		if (temp != null && temp.trim().length() > 0 && temp.trim().startsWith("and")) {
			sql += temp;
			tempsql += temp;
		} else {
			sql += " and (" + temp + ")";
			tempsql += " and (" + temp + ")";
		}

		//2012.10.19  sqt 外包装一层，查出个数才正确
		tempsql += ")  ";
		java.util.Hashtable<String, Vector<WaMultiReportVO01>> h = new java.util.Hashtable<String, Vector<WaMultiReportVO01>>();
		Vector<WaMultiReportVO01> v = new Vector<WaMultiReportVO01>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();

			sql += "  and wa_data.psnid in( " + tempsql + ")";
			sql += " group  by wa_data.psnid,bd_psndoc.psncode,bd_psndoc.psnname,wa_data.classid, om_job.jobname, bd_psnbasdoc.id ,wa_bank.bank_name,wa_psn.vacccode"+l_strItemSQL01+" order by  wa_data.psnid ";

			stmt = con.prepareStatement(sql);
			System.err.println("sql语句:" + sql);
			ResultSet rs = stmt.executeQuery();
			
			int expitemlength = 0;
			if(a_aryItemInfoVO1 != null){
				expitemlength = a_aryItemInfoVO1.length;
			}

			while (rs.next()) {
				WaMultiReportVO01 l_WaMultiReportVO01Single = new WaMultiReportVO01();
				l_WaMultiReportVO01Single.setAppendTypes(new String[(a_aryItemInfoVO.length * 2 + expitemlength)]);
				l_WaMultiReportVO01Single.setAppendNames(new String[(a_aryItemInfoVO.length * 2 + expitemlength)]);
				l_WaMultiReportVO01Single.setAppendValues(new Object[(a_aryItemInfoVO.length * 2 + expitemlength)]);
				// psnid :
				String psnid = rs.getString(1);
				l_WaMultiReportVO01Single.setPsnid(psnid == null ? null : psnid.trim());
				// psncode:
				String psncode = rs.getString(2);
				l_WaMultiReportVO01Single.setPsncode(psncode == null ? null : psncode.trim());
				// psnname :
				String psnname = rs.getString(3);
				l_WaMultiReportVO01Single.setPsnname(psnname == null ? null : psnname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO01Single.setWaclassid(waclassid == null ? null : waclassid.trim());
				// jobname :
				String jobname = rs.getString(5);
				l_WaMultiReportVO01Single.setJobname(jobname == null ? null : jobname.trim());
				// id :
				String id = rs.getString(6);
				l_WaMultiReportVO01Single.setId(id == null ? null : id.trim());

				// bankname :
				String bankname = rs.getString(7);
				l_WaMultiReportVO01Single.setBankname(bankname == null ? null : bankname.trim());
				// vacccode
				String vacccode = rs.getString(8);
				l_WaMultiReportVO01Single.setVacccode(vacccode == null ? null : vacccode.trim());


				
				WaGlobalVO globalVO = new WaGlobalVO();
				globalVO.setWaClassPK(waclassid);
				globalVO.setWaYear(accYear);
				globalVO.setWaPeriod(accPeriod);
				globalVO.setCurUserid(userid);
				
				if(a_aryItemInfoVO1 != null){
					for(int i = 0; i < a_aryItemInfoVO1.length; i++){
						l_WaMultiReportVO01Single.getAppendNames()[i] = a_aryItemInfoVO1[i].getPk_wa_item();
						l_WaMultiReportVO01Single.getAppendValues()[i] = rs.getString(9 + i);
					}
				}
				

				// 动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2 ; i++) {

					// 确定项目名称
					if (i % 2 == 0) {
						l_WaMultiReportVO01Single.getAppendNames()[expitemlength + i] = waclassid + ".WA_DATA.F_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();

					} else {
						l_WaMultiReportVO01Single.getAppendNames()[expitemlength + i] = "WA_DATAZ.F_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString();
					}

					// 确定项目值
					if (ishaveItemPower(globalVO, "wa_data.f_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString())) {
						l_WaMultiReportVO01Single.getAppendValues()[expitemlength + i] = rs.getBigDecimal(9 + expitemlength + i);
					} else {
						l_WaMultiReportVO01Single.getAppendValues()[expitemlength + i] = null;
					}
					// 确定项目数据类型
					l_WaMultiReportVO01Single.getAppendTypes()[expitemlength + i] = "1";
				}

				if (v.size() > 0) {
					WaMultiReportVO01 t = v.get(0);
					if (t.getPsnid().equals(l_WaMultiReportVO01Single.getPsnid())) {
						v.addElement(l_WaMultiReportVO01Single);
					} else {
						h.put(t.getPsnid(), v);
						v = new java.util.Vector<WaMultiReportVO01>();
						v.addElement(l_WaMultiReportVO01Single);
					}
				} else {
					v.addElement(l_WaMultiReportVO01Single);
				}
			}// end while

			if (v.size() > 0) {
				WaMultiReportVO01 t = v.get(0);
				h.put(t.getPsnid(), v);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		return h;
	}

	/**
	 * 只查询出已经发放的数据
	 * 屏蔽掉了
	 * Created on 2007-11-5
	 * @author zhangg
	 * @return
	 */
	private String getPayofflagCondition(){
		/*	StringBuffer sqlB = new StringBuffer();
		sqlB.append("   and exists ");                        //   1
		sqlB.append("  (select 1 ");                          //   2
		sqlB.append("           from wa_periodstate ");
		sqlB.append("          where wa_periodstate.pk_periodset = wa_period.pk_wa_period ");
		sqlB.append("            and (wa_periodstate.ipayoffflag = 1 or ");
		sqlB.append("                wa_periodstate.iaccountmark = 1) ");
		sqlB.append("            and wa_periodstate.classid = wa_data.classid) ");
		return sqlB.toString();*/
		return " ";

	}
	/**
	 * construction the query condition according to the alist
	 * 修改历史:<Strong>xuanlt 2007 六月 19<Strong>
	 * @param alist
	 * @return
	 * @see
	 */
	private String getPeriodConditon(ArrayList<String[]> alist){
		if(alist==null || alist.size()==0){
			return "";
		}
		StringBuffer conditon = new StringBuffer();
		for (int index = 0; index < alist.size(); index++) {
			conditon.append("(wa_data.cyear = "+"'"+alist.get(index)[0]+"' and wa_data.cperiod = '"+alist.get(index)[1]+"') or");
		}

		if(conditon.length()>0){

			return " and ("+conditon.substring(0, conditon.length()-3)+") ";
		}else{
			return "";
		}

	}

	/**
	 * 查找构成报表WaMultiReport01所有人员
	 *
	 */
	public String[] queryWaMultiReport01psn(String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strCurYear,
			String a_strCurPeriod, Integer maxRow) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01psn", new Object[] { a_strWhereSQL,
				a_aryWaClassVO, a_strCurYear, a_strCurPeriod, maxRow });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (a_strCurYear == null || a_strCurYear.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}
		if (a_strCurPeriod == null || a_strCurPeriod.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000003")/* @res "当前期间参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//	得到所有的查询人员
		//----worm modify
		//需要关联bd_psndoc
		//yxl update 关联bd_psndoc
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc";
		String sql = "select top "
			+ maxRow.intValue()
			+ " psnid from (select distinct wa_data.psnid from wa_data  inner join bd_psndoc on wa_data.psnid=bd_psndoc.pk_psndoc   inner join bd_psnbasdoc on bd_psndoc.pk_psnbasdoc=bd_psnbasdoc.pk_psnbasdoc  "
			+ " where   bd_psndoc.dr=0  and wa_data.classid in ("
			+ l_strClassSQL + ") and wa_data.cyear = '" + a_strCurYear
			+ "' and wa_data.cperiod = '" + a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and ";
		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables)
				//sql += a_strWhereSQL
				+ " order by wa_data.psnid)";

		Vector<String> v = new Vector<String>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				// psnid :
				String psnid = rs.getString(1);
				v.addElement(psnid == null ? null : psnid.trim());
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		String[] l_arystrPsn = new String[v.size()];
		if (v.size() > 0) {
			v.copyInto(l_arystrPsn);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport01psn", new Object[] { a_strWhereSQL,
				a_aryWaClassVO, a_strCurYear, a_strCurPeriod, maxRow });
		/** ********************************************************** */

		return l_arystrPsn;
	}

	/**
	 * 多类别报表 所执行的SQL示例如下： SELECT DISTINCT
	 * WA_DATA.PSNID,BD_PSNDOC.PSNCODE,BD_PSNDOC.PSNNAME , WA_DATA.F_1,
	 * WA_DATAZ.F_1, WA_DATA.F_2, WA_DATAZ.F_2, WA_DATA.F_3, WA_DATAZ.F_3 FROM
	 * WA_DATA , WA_DATAZ, BD_PSNDOC WHERE WA_DATA.CLASSID in
	 * ('00000000000000000001','00000000000000000002') AND WA_DATA.CYEAR =
	 * '2001' AND WA_DATA.CPERIOD = '08'AND WA_DATA.ISTOPFLAG=0 AND
	 * WA_DATA.PSNID = BD_PSNDOC.PK_PSNDOC AND WA_DATA.PSNID = WA_DATAZ.PSNID
	 * AND WA_DATA.CYEAR = WA_DATAZ.CYEAR AND WA_DATA.CPERIOD = WA_DATAZ.CPERIOD
	 * AND WA_DATA.CLASSID = WA_DATAZ.CLASSID ORDER BY WA_DATA.PSNID
	 */
	public WaMultiReportVO02[] queryWaMultiReport02(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strCurYear,
			String a_strCurPeriod) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (a_strCurYear == null || a_strCurYear.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}
		if (a_strCurPeriod == null || a_strCurPeriod.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000003")/* @res "当前期间参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_"
			+ element.getIitemid().toString()
			+ "), sum(wa_dataz.f_"
			+ element.getIitemid().toString() + ")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc,bd_deptdoc";

		//	得到所有的查询人员
		String sql = "select distinct  wa_data.deptid, max(bd_deptdoc.deptcode), max(bd_deptdoc.deptname),wa_data.classid "
			+ l_strItemSQL
			+ " from wa_data , wa_dataz, bd_deptdoc,bd_psnbasdoc,bd_psndoc "
			+ " where  wa_data.classid in ("
			+ l_strClassSQL
			+ ") and wa_data.cyear = '"
			+ a_strCurYear
			+ "' and wa_data.cperiod = '"
			+ a_strCurPeriod
			+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and "
			+ " bd_psnbasdoc.pk_psnbasdoc = bd_psndoc.pk_psnbasdoc and bd_psnbasdoc.dr=0 and  "
			+ " bd_psndoc.pk_psndoc = wa_data.psnid and bd_psndoc.dr=0 and "
			+ " wa_data.psnid = wa_dataz.psnid and wa_data.deptid = bd_deptdoc.pk_deptdoc and wa_data.cyear = wa_dataz.cyear and wa_data.cperiod = wa_dataz.cperiod and wa_data.classid = wa_dataz.classid and wa_dataz.dr =0  and ";
		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables)
				+
				//      sql += a_strWhereSQL +
				" group by wa_data.deptid,wa_data.classid";
		WaMultiReportVO02[] l_aryWaMultiReportVO02 = null;
		Vector<WaMultiReportVO02> v = new Vector<WaMultiReportVO02>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO02 l_WaMultiReportVO02Single = new WaMultiReportVO02();
				l_WaMultiReportVO02Single
				.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// deptid :
				String deptid = rs.getString(1);
				l_WaMultiReportVO02Single.setDeptid(deptid == null ? null
						: deptid.trim());
				//deptcode:
				String deptcode = rs.getString(2);
				l_WaMultiReportVO02Single.setDeptcode(deptcode == null ? null
						: deptcode.trim());
				// deptname :
				String deptname = rs.getString(3);
				l_WaMultiReportVO02Single.setDeptname(deptname == null ? null
						: deptname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO02Single.setWaclassid(waclassid == null ? null
						: waclassid.trim());

				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO02Single.getAppendNames()[i] = waclassid + ".SUM(WA_DATA.F_"
						+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString() + ")";

					} else {
						l_WaMultiReportVO02Single.getAppendNames()[i] = "SUM(WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString() + ")";
					}
					l_WaMultiReportVO02Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO02Single.getAppendValues()[i] = rs.getBigDecimal(5 + i);

				}

				v.addElement(l_WaMultiReportVO02Single);
			}
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		l_aryWaMultiReportVO02 = new WaMultiReportVO02[v.size()];
		if (v.size() > 0) {
			v.copyInto(l_aryWaMultiReportVO02);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod });
		/** ********************************************************** */

		return l_aryWaMultiReportVO02;
	}

	/**
	 * 多类别报表 所执行的SQL示例如下： SELECT DISTINCT
	 * WA_DATA.PSNID,BD_PSNDOC.PSNCODE,BD_PSNDOC.PSNNAME , WA_DATA.F_1,
	 * WA_DATAZ.F_1, WA_DATA.F_2, WA_DATAZ.F_2, WA_DATA.F_3, WA_DATAZ.F_3 FROM
	 * WA_DATA , WA_DATAZ, BD_PSNDOC WHERE WA_DATA.CLASSID in
	 * ('00000000000000000001','00000000000000000002') AND WA_DATA.CYEAR =
	 * '2001' AND WA_DATA.CPERIOD = '08'AND WA_DATA.ISTOPFLAG=0 AND
	 * WA_DATA.PSNID = BD_PSNDOC.PK_PSNDOC AND WA_DATA.PSNID = WA_DATAZ.PSNID
	 * AND WA_DATA.CYEAR = WA_DATAZ.CYEAR AND WA_DATA.CPERIOD = WA_DATAZ.CPERIOD
	 * AND WA_DATA.CLASSID = WA_DATAZ.CLASSID ORDER BY WA_DATA.PSNID
	 */
	public java.util.Hashtable<String, Vector<Serializable>> queryWaMultiReport02_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String a_strCurYear,
			String a_strCurPeriod) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod });
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (a_strCurYear == null || a_strCurYear.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}
		if (a_strCurPeriod == null || a_strCurPeriod.trim().equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000003")/* @res "当前期间参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_"
			+ element.getIitemid().toString()
			+ "), sum(wa_dataz.f_"
			+ element.getIitemid().toString() + ")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc,bd_deptdoc";

		//	得到所有的查询人员
		String sql = "select distinct  wa_data.deptid, max(bd_deptdoc.deptcode), max(bd_deptdoc.deptname),wa_data.classid "
			+ l_strItemSQL
			+ " from wa_data , wa_dataz, bd_deptdoc ";

		if( a_strWhereSQL.indexOf("bd_psndoc") > 0 ) {
			sql += " , bd_psndoc ";
		}
		if( a_strWhereSQL.indexOf("bd_psnbasdoc") > 0 ) {
			sql += " ,bd_psnbasdoc ";
		}

		sql += " where  wa_data.classid in (" + l_strClassSQL
		+ ") and wa_data.cyear = '" + a_strCurYear
		+ "' and wa_data.cperiod = '" + a_strCurPeriod
		+ "'and wa_data.istopflag=0 and wa_data.dr = 0 and ";
		if( a_strWhereSQL.indexOf("bd_psndoc") > 0 ) {
			sql += " bd_psndoc.pk_psndoc = wa_data.psnid and bd_psndoc.dr=0 and ";
		}
		if( a_strWhereSQL.indexOf("bd_psnbasdoc") > 0 ) {
			sql += " bd_psnbasdoc.pk_psnbasdoc = wa_data.pk_psnbasdoc and bd_psnbasdoc.dr=0 and  ";
		}


		sql	+= " wa_data.pk_wa_data = wa_dataz.pk_wa_dataz and wa_data.deptid = bd_deptdoc.pk_deptdoc and ";
		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables)
				//      sql += a_strWhereSQL +
				+ " group by wa_data.deptid  ,wa_data.classid     order by  wa_data.deptid   ";

		java.util.Hashtable<String, Vector<Serializable>> h = new java.util.Hashtable<String, Vector<Serializable>>();
		Vector<Serializable> v = new Vector<Serializable>();
		Vector<Serializable> v_dept = new Vector<Serializable>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO02 l_WaMultiReportVO02Single = new WaMultiReportVO02();
				l_WaMultiReportVO02Single
				.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// deptid :
				String deptid = rs.getString(1);
				l_WaMultiReportVO02Single.setDeptid(deptid == null ? null
						: deptid.trim());
				//deptcode:
				String deptcode = rs.getString(2);
				l_WaMultiReportVO02Single.setDeptcode(deptcode == null ? null
						: deptcode.trim());
				// deptname :
				String deptname = rs.getString(3);
				l_WaMultiReportVO02Single.setDeptname(deptname == null ? null
						: deptname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO02Single.setWaclassid(waclassid == null ? null
						: waclassid.trim());

				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO02Single.getAppendNames()[i] = waclassid
						+ ".SUM(WA_DATA.F_"
						+ a_aryItemInfoVO[Integer
						                  .parseInt((new Integer(i / 2))
						                		  .toString())].getIitemid()
						                		  .toString() + ")";

					} else {
						l_WaMultiReportVO02Single.getAppendNames()[i] = "SUM(WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer
							                  .parseInt((new Integer(i / 2))
							                		  .toString())].getIitemid()
							                		  .toString() + ")";
					}
					l_WaMultiReportVO02Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO02Single.getAppendValues()[i] = rs
					.getBigDecimal(5 + i);

				}
				if (v.size() > 0) {
					WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
					if (t.getDeptid().equals(
							l_WaMultiReportVO02Single.getDeptid())) {
						v.addElement(l_WaMultiReportVO02Single);
					} else {
						h.put(t.getDeptid(), v);
						v = new java.util.Vector<Serializable>();
						v.addElement(l_WaMultiReportVO02Single);
						v_dept
						.addElement(l_WaMultiReportVO02Single
								.getDeptid());
					}
				} else {
					v.addElement(l_WaMultiReportVO02Single);
					v_dept.addElement(l_WaMultiReportVO02Single.getDeptid());
				}
				//v.addElement(l_WaMultiReportVO02Single);
			}
			if (v.size() > 0) {
				WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
				h.put(t.getDeptid(), v);
			}
			if (v_dept.size() > 0) {
				h.put("deptpks", v_dept);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, a_strCurYear,
				a_strCurPeriod });
		/** ********************************************************** */

		return h;
	}

	public java.util.Hashtable<String, Vector<Serializable>> queryWaMultiReport02_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, ArrayList<String[]> aList) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, aList});
		/** ********************************************************** */

		//传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000000")/* @res "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000018")/* @res "查看的薪资类别参数非法！" */);
		}

		if (aList == null||aList.size()==0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
					"60131601", "UPP60131601-000002")/* @res "当前年参数非法！" */);
		}

		//得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'"
				+ a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		//得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_"
			+ element.getIitemid().toString()
			+ "), sum(wa_dataz.f_"
			+ element.getIitemid().toString() + ")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; //删除and并防止用or条件时把范围放大
		} else {
			a_strWhereSQL = "1=1";
		}
		String tables = "bd_psndoc,bd_psnbasdoc,bd_deptdoc";

		//	得到所有的查询人员
		String sql = "select distinct  wa_data.deptid, max(bd_deptdoc.deptcode), max(bd_deptdoc.deptname),wa_data.classid "
			+ l_strItemSQL
			+ " from wa_data , wa_dataz, bd_deptdoc ";

		if( a_strWhereSQL.indexOf("bd_psndoc") > 0 ) {
			sql += " , bd_psndoc ";
		}
		if( a_strWhereSQL.indexOf("bd_psnbasdoc") > 0 ) {
			sql += " ,bd_psnbasdoc ";
		}

		sql += " where  wa_data.classid in (" + l_strClassSQL
		+ ") " + getPeriodConditon(aList)+
		" and wa_data.istopflag=0 and wa_data.dr = 0 and ";
		if( a_strWhereSQL.indexOf("bd_psndoc") > 0 ) {
			sql += " bd_psndoc.pk_psndoc = wa_data.psnid and bd_psndoc.dr=0 and ";
		}
		if( a_strWhereSQL.indexOf("bd_psnbasdoc") > 0 ) {
			sql += " bd_psnbasdoc.pk_psnbasdoc = wa_data.pk_psnbasdoc and bd_psnbasdoc.dr=0 and  ";
		}


		sql	+= " wa_data.pk_wa_data = wa_dataz.pk_wa_dataz and wa_data.deptid = bd_deptdoc.pk_deptdoc and ";
		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(
				a_strWhereSQL, "wa_data", "psnid", tables)
				//      sql += a_strWhereSQL +
				+ " group by wa_data.deptid  ,wa_data.classid     order by  wa_data.deptid   ";

		java.util.Hashtable<String, Vector<Serializable>> h = new java.util.Hashtable<String, Vector<Serializable>>();
		Vector<Serializable> v = new Vector<Serializable>();
		Vector<Serializable> v_dept = new Vector<Serializable>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO02 l_WaMultiReportVO02Single = new WaMultiReportVO02();
				l_WaMultiReportVO02Single
				.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single
				.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// deptid :
				String deptid = rs.getString(1);
				l_WaMultiReportVO02Single.setDeptid(deptid == null ? null
						: deptid.trim());
				//deptcode:
				String deptcode = rs.getString(2);
				l_WaMultiReportVO02Single.setDeptcode(deptcode == null ? null
						: deptcode.trim());
				// deptname :
				String deptname = rs.getString(3);
				l_WaMultiReportVO02Single.setDeptname(deptname == null ? null
						: deptname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO02Single.setWaclassid(waclassid == null ? null
						: waclassid.trim());

				//动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {

					if (i % 2 == 0) {
						l_WaMultiReportVO02Single.getAppendNames()[i] = waclassid
						+ ".SUM(WA_DATA.F_"
						+ a_aryItemInfoVO[Integer
						                  .parseInt((new Integer(i / 2))
						                		  .toString())].getIitemid()
						                		  .toString() + ")";

					} else {
						l_WaMultiReportVO02Single.getAppendNames()[i] = "SUM(WA_DATAZ.F_"
							+ a_aryItemInfoVO[Integer
							                  .parseInt((new Integer(i / 2))
							                		  .toString())].getIitemid()
							                		  .toString() + ")";
					}
					l_WaMultiReportVO02Single.getAppendTypes()[i] = "1";

					l_WaMultiReportVO02Single.getAppendValues()[i] = rs
					.getBigDecimal(5 + i);

				}
				if (v.size() > 0) {
					WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
					if (t.getDeptid().equals(
							l_WaMultiReportVO02Single.getDeptid())) {
						v.addElement(l_WaMultiReportVO02Single);
					} else {
						h.put(t.getDeptid(), v);
						v = new java.util.Vector<Serializable>();
						v.addElement(l_WaMultiReportVO02Single);
						v_dept
						.addElement(l_WaMultiReportVO02Single
								.getDeptid());
					}
				} else {
					v.addElement(l_WaMultiReportVO02Single);
					v_dept.addElement(l_WaMultiReportVO02Single.getDeptid());
				}
				//v.addElement(l_WaMultiReportVO02Single);
			}
			if (v.size() > 0) {
				WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
				h.put(t.getDeptid(), v);
			}
			if (v_dept.size() > 0) {
				h.put("deptpks", v_dept);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020.WaMultiReportDMO",
				"queryWaMultiReport02_hash", new Object[] { a_aryItemInfoVO,
				a_strWhereSQL, a_aryWaClassVO, aList });
		/** ********************************************************** */

		return h;
	}

	private HashMap<String, HashSet<String>> useritemMap = null;

	/**
	 * 是否具有该类别的该项目权限
	 * Created on 2008-11-10
	 * @author zhangg
	 * @param globalVO
	 * @param item
	 * @return
	 * @throws SystemException
	 * @throws DAOException
	 * @throws NamingException
	 */
	private boolean ishaveItemPower(WaGlobalVO globalVO, String item) throws SystemException, DAOException, NamingException{
		if(useritemMap == null){
			useritemMap = new HashMap<String, HashSet<String>>();
		}
		String key = globalVO.getWaClassPK() + globalVO.getCurUserid();
		if(useritemMap.get(key) == null){
			useritemMap.put(key, getWaItemUser(globalVO.getCurUserid(), globalVO));
		}
		HashSet<String> itemSet = useritemMap.get(key);
		if(itemSet != null){
			return itemSet.contains(item);
		}
		return false;
	}
	/**
	 *
	 * Created on 2008-11-10
	 * @author zhangg
	 * @param a_aryItemInfoVO
	 * @param a_strWhereSQL
	 * @param a_aryWaClassVO
	 * @param accYear
	 * @param accPeriod
	 * @param userid
	 * @return
	 * @throws SQLException
	 * @throws SystemException
	 * @throws DAOException
	 * @throws NamingException
	 */
	public java.util.Hashtable<String, Vector<Serializable>> queryWaMultiReport02ByAccperiod_hash(
			nc.vo.wa.wa_024.ItemVO[] a_aryItemInfoVO, String a_strWhereSQL,
			nc.vo.wa.wa_008.WaclassVO[] a_aryWaClassVO, String accYear, String accPeriod, String userid) throws SQLException, SystemException, DAOException, NamingException {

		// 传入参数的合法性校验
		if (a_aryItemInfoVO == null || a_aryItemInfoVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000000")/* "查看的薪资项目参数非法！" */);
		}

		if (a_aryWaClassVO == null || a_aryWaClassVO.length == 0) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000018")/* "查看的薪资类别参数非法！" */);
		}

		if (accYear == null || accYear.equals("")) {
			throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("60131601", "UPP60131601-000002")/* "当前年参数非法！" */);
		}

		if (accPeriod == null || accPeriod.equals("")) {
			throw new SQLException(NCLangResOnserver.getInstance().getStrByID("60131604", "UPP60131604-000183")/* "当前期间参数非法！" */);
		}

		// 得到查看的薪资类别集合,如：" '0001', '0002' "
		String l_strClassSQL = "";
		for (int i = 0; i < a_aryWaClassVO.length; i++) {
			if (i == 0) {
				l_strClassSQL = "'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			} else {
				l_strClassSQL = l_strClassSQL + ",'" + a_aryWaClassVO[i].getPrimaryKey() + "'";
			}
		}

		// 得到查看的薪资项目,如：", F_1, F_2"
		String l_strItemSQL = "";
		for (ItemVO element : a_aryItemInfoVO) {
			l_strItemSQL = l_strItemSQL + ", sum(wa_data.f_" + element.getIitemid().toString() + "), sum(wa_dataz.f_" + element.getIitemid().toString() + ")";
		}
		if (a_strWhereSQL != null && a_strWhereSQL.trim().length() > 0) {
			// a_strWhereSQL 不为空
			if (a_strWhereSQL.trim().startsWith("and") || a_strWhereSQL.trim().startsWith("AND")) {
				// a_strWhereSQL 已and开始
				a_strWhereSQL = "(" + a_strWhereSQL.trim().substring(4) + ")"; // 删除and并防止用or条件时把范围放大
			} else {
				a_strWhereSQL = "(" + a_strWhereSQL.trim() + ")";
			}
		} else {
			a_strWhereSQL = "(1=1)";
		}
		String tables = "bd_psndoc,bd_psnbasdoc,bd_deptdoc";

		// 得到所有的查询人员
		String sql = "select distinct  wa_data.deptid, max(bd_deptdoc.deptcode), max(bd_deptdoc.deptname),wa_data.classid " + l_strItemSQL
		+ " from wa_data , wa_dataz, bd_deptdoc ,wa_waclass,wa_period ,wa_periodstate";//sqt 增加判断是否发放    2013.01.24

		if (a_strWhereSQL.indexOf("bd_psndoc") > 0) {
			sql += " , bd_psndoc ";
		}
		if (a_strWhereSQL.indexOf("bd_psnbasdoc") > 0) {
			sql += " ,bd_psnbasdoc ";
		}
																//增加关联关系  sqt  2013.01.24  关联上发放状态表
		sql += " where wa_periodstate.pk_periodset = wa_period.pk_wa_period and wa_periodstate.classid = wa_data.classid and  wa_data.classid= wa_waclass.pk_wa_class  and  wa_data.cyear = wa_period.cyear and wa_data.cperiod = wa_period.cperiod  and  wa_waclass.pk_periodscheme= wa_period.pk_periodscheme "
			+ "  and wa_data.classid in ("
			+ l_strClassSQL
			+ ") "
			+ " and wa_period.caccyear= '"
			+ accYear
			+ "' and wa_period.caccperiod='"
			+ accPeriod
			+ "'"
			+ getPayofflagCondition()
			// 增加关联发放状态表的   发放状态
			+ " and wa_periodstate.ipayoffflag = 1 and wa_data.istopflag=0 and wa_data.dr = 0 and ";
		if (a_strWhereSQL.indexOf("bd_psndoc") > 0) {
			sql += " bd_psndoc.pk_psndoc = wa_data.psnid and bd_psndoc.dr=0 and ";
		}
		if (a_strWhereSQL.indexOf("bd_psnbasdoc") > 0) {
			sql += " bd_psnbasdoc.pk_psnbasdoc = wa_data.pk_psnbasdoc and bd_psnbasdoc.dr=0 and  ";
		}

		sql += " wa_data.pk_wa_data = wa_dataz.pk_wa_dataz and wa_data.deptid = bd_deptdoc.pk_deptdoc and ";
		sql += nc.vo.hr.global.GlobalTool.getConditonWithPsndocForQuery(a_strWhereSQL, "wa_data", "psnid", tables)
		// sql += a_strWhereSQL +
		+ " group by wa_data.deptid  ,wa_data.classid     order by  wa_data.deptid   ";

		java.util.Hashtable<String, Vector<Serializable>> h = new java.util.Hashtable<String, Vector<Serializable>>();
		Vector<Serializable> v = new Vector<Serializable>();
		Vector<Serializable> v_dept = new Vector<Serializable>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql);

			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				WaMultiReportVO02 l_WaMultiReportVO02Single = new WaMultiReportVO02();
				l_WaMultiReportVO02Single.setAppendTypes(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single.setAppendNames(new String[(a_aryItemInfoVO.length * 2)]);
				l_WaMultiReportVO02Single.setAppendValues(new Object[(a_aryItemInfoVO.length * 2)]);
				// deptid :
				String deptid = rs.getString(1);
				l_WaMultiReportVO02Single.setDeptid(deptid == null ? null : deptid.trim());
				// deptcode:
				String deptcode = rs.getString(2);
				l_WaMultiReportVO02Single.setDeptcode(deptcode == null ? null : deptcode.trim());
				// deptname :
				String deptname = rs.getString(3);
				l_WaMultiReportVO02Single.setDeptname(deptname == null ? null : deptname.trim());
				// waclassid :
				String waclassid = rs.getString(4);
				l_WaMultiReportVO02Single.setWaclassid(waclassid == null ? null : waclassid.trim());

				WaGlobalVO globalVO = new WaGlobalVO();
				globalVO.setWaClassPK(waclassid);
				globalVO.setWaYear(accYear);
				globalVO.setWaPeriod(accPeriod);
				globalVO.setCurUserid(userid);

				// 动态字段的值
				for (int i = 0; i < a_aryItemInfoVO.length * 2; i++) {
					String colkeyname = null;
					if (i % 2 == 0) {
						colkeyname = waclassid + ".SUM(WA_DATA.F_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString() + ")";
					} else {
						colkeyname = "SUM(WA_DATAZ.F_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString() + ")";
					}
					l_WaMultiReportVO02Single.getAppendNames()[i] = colkeyname;
					if (ishaveItemPower(globalVO, "wa_data.f_" + a_aryItemInfoVO[Integer.parseInt((new Integer(i / 2)).toString())].getIitemid().toString())) {
						l_WaMultiReportVO02Single.getAppendValues()[i] = rs.getBigDecimal(5 + i);
					} else {
						l_WaMultiReportVO02Single.getAppendValues()[i] = null;
					}

					l_WaMultiReportVO02Single.getAppendTypes()[i] = "1";

				}
				if (v.size() > 0) {
					WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
					if (t.getDeptid().equals(l_WaMultiReportVO02Single.getDeptid())) {
						String []colName = t.getAppendNames();
						String []colType = t.getAppendTypes();
						Object []colValue = t.getAppendValues();
						String []tepColName = l_WaMultiReportVO02Single.getAppendNames();
						String []tepColType = l_WaMultiReportVO02Single.getAppendTypes();
						Object []tmpColValue = l_WaMultiReportVO02Single.getAppendValues();
						for(int i=0;i<colValue.length;i++){
							Object val = colValue[i]==null?UFDouble.ZERO_DBL:colValue[i];
							Object tmpVal = tmpColValue[i]==null?UFDouble.ZERO_DBL:tmpColValue[i];
							colValue[i]= new UFDouble(val.toString()).add(
							new UFDouble(tmpVal.toString()));
						}
						t.setAppendValues(colValue);
					
						v.addElement(t);
					} else {
						h.put(t.getDeptid(), v);
						v = new java.util.Vector<Serializable>();
						v.addElement(l_WaMultiReportVO02Single);
						v_dept.addElement(l_WaMultiReportVO02Single.getDeptid());
					}
				} else {
					v.addElement(l_WaMultiReportVO02Single);
					v_dept.addElement(l_WaMultiReportVO02Single.getDeptid());
				}
				// v.addElement(l_WaMultiReportVO02Single);
			}
			if (v.size() > 0) {
				WaMultiReportVO02 t = (WaMultiReportVO02) v.get(0);
				h.put(t.getDeptid(), v);
			}
			if (v_dept.size() > 0) {
				h.put("deptpks", v_dept);
			}

		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		return h;
	}


	/**
	 * pkcorp / pkdept
	 *
	 * @author wzq
	 */
	public ItemVO[] getAllItems(String pkcorp, String pkdept)
	throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020", "getAllItems", new Object[] {
				pkcorp, pkdept });
		/** ********************************************************** */
		if (pkcorp == null && pkdept == null) {
			return null;
		}

		String sqlitem = null;
		if (pkdept != null) {
			sqlitem = new StringBuffer(100)
			.append(
					"select distinct wa_item.pk_wa_item, wa_item.iitemid, wa_item.vname, wa_item.iitemtype, ")
					.append(
					" wa_item.idefaultflag, wa_item.isintmoney, wa_item.iproperty from wa_item,wa_classitem,wa_waclass,wa_dept ")
					.append(
					" where wa_item.pk_wa_item = wa_classitem.pk_wa_item and wa_classitem.pk_wa_class = wa_waclass.pk_wa_class ")
					.append(
					" and wa_waclass.pk_wa_class = wa_dept.pk_wa_class  ")
					.append(" and wa_dept.pk_deptdoc = '")
					.append(pkdept).append("'").toString();
			;
		} else {
			sqlitem = new StringBuffer(100)
			.append("select distinct wa_item.pk_wa_item, wa_item.iitemid, wa_item.vname, wa_item.iitemtype, ")
			.append(" wa_item.idefaultflag, wa_item.isintmoney , wa_item.iproperty from wa_item,wa_classitem,wa_waclass ")
			.append(" where wa_item.pk_wa_item = wa_classitem.pk_wa_item and wa_classitem.pk_wa_class = wa_waclass.pk_wa_class ")
			.append("  and wa_waclass.pk_corp = '")
			.append(pkcorp).append("'")
			.toString();
			;
		}

		Vector<ItemVO> v = new Vector<ItemVO>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlitem);
			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				ItemVO item = new ItemVO();
				// pk_wa_item :
				String pk_wa_item = rs.getString(1);
				item.setPk_wa_item(pk_wa_item == null ? null : pk_wa_item
						.trim());
				// iitemid :
				Object iitemid = rs.getObject(2);
				item.setIitemid(iitemid == null ? null : new Integer(iitemid
						.toString()));
				// vname :
				String vname = rs.getString(3);
				item.setVname(vname == null ? null : vname.trim());
				// iitemtype :
				Object iitemtype = rs.getObject(4);
				item.setIitemtype(iitemtype == null ? null : new Integer(
						iitemtype.toString()));
				// idefaultflag :
				Object idefaultflag = rs.getObject(5);
				item.setIdefaultflag(idefaultflag == null ? null : new Integer(
						idefaultflag.toString()));
				//isintmoney
				String isintmoney = rs.getString(6);
				item
				.setM_isintmoney(isintmoney != null
						&& isintmoney.trim().equalsIgnoreCase("Y") ? new UFBoolean(
								true)
				: new UFBoolean(false));

				int iproperty = rs.getInt(7);
				item.setIproperty(new Integer(iproperty));

				v.addElement(item);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		if (v.size() > 0) {
			return v.toArray(new ItemVO[0]);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020", "getAllItems", new Object[] {
				pkcorp, pkdept });
		/** ********************************************************** */

		return null;
	}

	/**
	 * pkcorp / pkdept
	 *
	 * @author wzq
	 */
	public CircHashVO getAllSumMny(ItemVO[] itemvos, String pkcorp,
			String pkdept, String cyear) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020", "getAllSumMny", new Object[] {
				itemvos, pkcorp, pkdept, cyear });
		/** ********************************************************** */
		// validate
		if (pkcorp == null && pkdept == null) {
			return null;
		}
		if (itemvos == null || itemvos.length < 1) {
			return null;
		}

		int itemlen = itemvos.length;
		String[] itemnames = new String[itemlen];
		for (int i = 0; i < itemlen; i++) {

			itemnames[i] = new StringBuffer().append("wa_dataz.F_").append(
					itemvos[i].m_iitemid).toString();
		}

		StringBuffer itemsql = new StringBuffer(100);
		for (int i = 0; i < itemlen; i++) {
			int pre = 0;
			if(itemvos[i].getIproperty() == 0){
				pre = 1;
			}else if (itemvos[i].getIproperty() == 1){
				pre = -1;
			}
			itemsql.append(pre + " * sum(").append(itemnames[i]).append(") + ");
		}
		itemsql.append(" sum(wa_dataz.redtotal) ");

		String qrysql = null;
		if (pkcorp == null) {
			qrysql = new StringBuffer(100)
			.append("select v_rpt_wa_period.caccperiod, v_rpt_wa_period.caccyear, ")
			.append(itemsql)
			.append(" as summny from wa_dataz, wa_data, wa_waclass, v_rpt_wa_period ")
			.append(" where wa_dataz.classid = wa_data.classid and wa_dataz.psnid = wa_data.psnid and wa_dataz.cyear = wa_data.cyear and wa_dataz.cperiod = wa_data.cperiod ")
			.append(" and v_rpt_wa_period.cyear = wa_dataz.cyear and v_rpt_wa_period.cperiod = wa_dataz.cperiod and wa_dataz.classid = v_rpt_wa_period.classid and v_rpt_wa_period.caccyear = '")
			.append(cyear)
			.append("' and wa_dataz.classid = wa_waclass.pk_wa_class and wa_data.deptid = '")
			.append(pkdept).append("' and wa_dataz.dr = 0 and wa_waclass.dr = 0 and wa_data.dr = 0 group by v_rpt_wa_period.caccyear, v_rpt_wa_period.caccperiod")
			.toString();
		} else {
			qrysql = new StringBuffer(100)
			.append("select v_rpt_wa_period.caccperiod, v_rpt_wa_period.caccyear, ")
			.append(itemsql)
			.append(" as summny from wa_dataz, wa_waclass, v_rpt_wa_period ")
			.append(" where v_rpt_wa_period.cyear = wa_dataz.cyear and v_rpt_wa_period.cperiod = wa_dataz.cperiod and wa_dataz.classid = v_rpt_wa_period.classid and v_rpt_wa_period.caccyear = '")
			.append(cyear)
			.append("'  and wa_dataz.classid = wa_waclass.pk_wa_class and wa_waclass.pk_corp = '")
			.append(pkcorp).append(
			"' and wa_dataz.dr = 0 and wa_waclass.dr = 0 group by v_rpt_wa_period.caccyear, v_rpt_wa_period.caccperiod")
			.toString();
		}

		CircHashVO hashvo = new CircHashVO();
		new Vector<Object>();
		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(qrysql);
			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				// cperiod
				String cperiod = rs.getString(1);
				if (cperiod == null) {
					continue;
				} else {
					cperiod = cperiod.trim();
				}

				// summny
				Object summny = rs.getObject(3);
				hashvo.setAttribute("m" + Integer.parseInt(cperiod),
						summny == null ? null : new UFDouble(summny.toString(),
								2), IDataType.NUMERIC);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		// add
		hashvo.setAttribute("pk_corp", pkcorp, IDataType.CHAR);
		hashvo.setAttribute("pk_deptdoc", pkdept, IDataType.CHAR);
		hashvo.setAttribute("cyear", cyear, IDataType.CHAR);

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020", "getAllSumMny", new Object[] {
				itemvos, pkcorp, pkdept, cyear });
		/** ********************************************************** */
		return hashvo;
	}

	/**
	 * get all child corp pk
	 *
	 * @author wzq
	 */
	public String[] queryAllChildCorp(String pkcorp) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020", "queryAllChildCorp",
				new Object[] { pkcorp });
		/** ********************************************************** */

		String sql = "select innercode from bd_corp where pk_corp = '" + pkcorp
		+ "'";
		String chilsql = "select pk_corp from bd_corp where innercode like '";

		Connection con = getConnection();
		PreparedStatement pstm = null;
		ResultSet rs = null;
		String[] corppks = null;
		ArrayList<String> array = new ArrayList<String>();

		try {
			pstm = con.prepareStatement(sql);
			rs = pstm.executeQuery();

			String corpcode = null;
			if (rs.next()) {
				corpcode = rs.getString(1);
				corpcode = corpcode.trim();
			} else {
				return null;
			}

			chilsql += corpcode + "%' order by innercode";

			pstm = con.prepareStatement(chilsql);
			rs = pstm.executeQuery();
			while (rs.next()) {
				// pkcorp
				String corppk = rs.getString(1);
				array.add(corppk == null ? "1" : corppk);
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		}

		if (array.size() > 0) {
			corppks = array.toArray(new String[0]);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020", "queryAllChildCorp",
				new Object[] { pkcorp });
		/** ********************************************************** */
		return corppks;
	}

	/**
	 * get all child dept
	 *
	 * @author wzq
	 */
	public String[] queryAllChildDept(String pkdept) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020", "queryAllChildDept",
				new Object[] { pkdept });
		/** ********************************************************** */

		String sql = "select deptcode from bd_deptdoc where pk_deptdoc = '"
			+ pkdept + "'";
		String chilsql = "select pk_deptdoc from bd_deptdoc where deptcode like '";

		Connection con = getConnection();
		PreparedStatement pstm = null;
		ResultSet rs = null;
		String[] deptpks = null;
		ArrayList<String> array = new ArrayList<String>();

		try {
			pstm = con.prepareStatement(sql);
			rs = pstm.executeQuery();

			String deptcode = null;
			if (rs.next()) {
				deptcode = rs.getString(1);
				deptcode = deptcode.trim();
			} else {
				return null;
			}

			chilsql += deptcode + "%' order by deptcode";

			pstm = con.prepareStatement(chilsql);
			rs = pstm.executeQuery();
			while (rs.next()) {
				// pkcorp
				String deptpk = rs.getString(1);
				array.add(deptpk == null ? "1" : deptpk);
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		}

		if (array.size() > 0) {
			deptpks = array.toArray(new String[0]);
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020", "queryAllChildDept",
				new Object[] { pkdept });
		/** ********************************************************** */
		return deptpks;
	}

	public GeneralVO[]  queryStuffReport(String pkdept, String userid,
			String cyear, ItemVO[] itemvos) throws SQLException {
		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.bs.wa.wa_020", "queryStuffReport", new Object[] {
				pkdept, userid, cyear, itemvos });
		/** ********************************************************** */
		// validate
		if (userid == null || cyear == null) {
			return null;
		}
		if (itemvos == null || itemvos.length < 1) {
			return null;
		}

		int itemlen = itemvos.length;
		String[] itemnames = new String[itemlen];
		GeneralVO[]  hashvos = new GeneralVO[itemlen];

		for (int i = 0; i < itemlen; i++) {
			itemnames[i] = new StringBuffer().append("F_").append(itemvos[i].m_iitemid).toString();
			hashvos[i] = new GeneralVO();
			hashvos[i].setAttributeValue("pk_wa_item", itemvos[i].getPk_wa_item());
			hashvos[i].setAttributeValue("vname", itemvos[i].getVname());

		}

		StringBuffer itemsql = new StringBuffer(100);
		for (int i = 0; i < itemlen; i++) {
			itemsql.append("sum(").append(itemnames[i]).append(") as ").append(
					itemnames[i]).append(" , ");
		}
		itemsql.delete(itemsql.length() - 3, itemsql.length());

		String qrysql = null;
		qrysql = new StringBuffer(100).append(
		"select v_rpt_wa_period.caccperiod, v_rpt_wa_period.caccyear, ").append(itemsql)
		.append(" from wa_dataz, v_rpt_wa_period, wa_waclass where wa_dataz.cperiod = v_rpt_wa_period.cperiod and wa_dataz.cyear = v_rpt_wa_period.cyear and wa_dataz.classid = v_rpt_wa_period.classid and v_rpt_wa_period.caccyear = '").append(cyear)
		//.append("' and wa_dataz.deptid = '").append(pkdept)
		.append("' and psnid = '").append(userid)
		
		//增加一个为发放的条件
		.append("' and v_rpt_wa_period.ipayoffflag =1 ")
		
		.append("  and wa_dataz.classid = wa_waclass.pk_wa_class and wa_waclass.icollectflag = 0 and wa_dataz.dr = 0 and wa_waclass.dr = 0 ")
		
//		.append("' and wa_dataz.classid = wa_waclass.pk_wa_class and wa_waclass.icollectflag = 0 and wa_dataz.dr = 0 and wa_waclass.dr = 0 ")
		.append(" group by v_rpt_wa_period.caccyear, v_rpt_wa_period.caccperiod").toString();

		Connection con = null;
		PreparedStatement stmt = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(qrysql);
			ResultSet rs = stmt.executeQuery();
			//
			while (rs.next()) {
				// cperiod
				String cperiod = rs.getString(1);
				if (cperiod == null) {
					continue;
				} else {
					cperiod = cperiod.trim();
				}

				for (int i = 0; i < itemlen; i++) {
					// summny
					Object summny = rs.getObject(3 + i);

					hashvos[i].setAttributeValue("m" + Integer.parseInt(cperiod), summny == null ? null : new UFDouble(summny.toString()));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.bs.wa.wa_020", "queryStuffReport", new Object[] {
				pkdept, userid, cyear, itemvos });
		/** ********************************************************** */
		return hashvos;
	}

	public String[] getallPeriod(String accYear, String[] classId)
	throws SQLException {

		/** ********************************************************** */
		// 保留的系统管理接口：
		beforeCallMethod("nc.impl.wa.wa_020", "getallPeriod", new Object[] {
				accYear, classId });
		/** ********************************************************** */

		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT DISTINCT cperiod FROM v_rpt_wa_period ");
		sqlStr.append(" caccyear = '" + accYear + "' and (");
		if(classId.length == 1){
			sqlStr.append("classid = '" + classId[0] + "'");
		}else{
			for(int i = 0; i < classId.length; i++){
				if(i == 0){
					sqlStr.append("(classid = '" + classId[0] + "')");
				}else{
					sqlStr.append(" or (classid = '" + classId[0] + "')");
				}
			}
		}
		sqlStr.append(")");

		Connection con = null;
		PreparedStatement stmt = null;
		Vector<String> v = new Vector<String>();
		String[] periods = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sqlStr.toString());
			ResultSet rs = stmt.executeQuery();
			while(rs.next()){
				v.add(rs.getString(1));
			}

			periods = new String[v.size()];
			if (v.size() > 0) {
				v.copyInto(periods);
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		/** ********************************************************** */
		// 保留的系统管理接口：
		afterCallMethod("nc.impl.wa.wa_020", "getallPeriod", new Object[] {
				accYear, classId });
		/** ********************************************************** */
		return periods;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2003-11-19 上午 10:22:00)
	 * @param vecDeptAndPsn java.util.Vector
	 * @exception java.lang.Exception 异常说明。
	 */
	public String[] getStrWhereDeptAndPsn(Vector<?> vecDeptAndPsn) {
		String strRT[] = null;
		Vector<String> vecStrs = new Vector<String>();
		try {

			Vector<?> vecDept = (Vector<?>) vecDeptAndPsn.get(0);
			Vector<?> vecPsncl = (Vector<?>) vecDeptAndPsn.get(1);
			String strWhere = (String) vecDeptAndPsn.get(2);
			int intSubNum = 150 - vecPsncl.size();
			if (intSubNum < 0) {
				return null;
			}
			int intStart = 0;
			int j = 0;
			int intCount = 0;
			StringBuffer strWheDept = new StringBuffer();
			StringBuffer strWhePsncl = new StringBuffer();
			StringBuffer strWheDeptAndPsncl = new StringBuffer();
			if (vecPsncl != null && vecPsncl.size() != 0) {
				//拼出人员类别的条件
				strWhePsncl.append(" and bd_psncl.pk_psncl in ( ");
				for (int i = 0; i < vecPsncl.size(); i++) {
					nc.vo.bd.b05.PsnclVO psnclVO = (nc.vo.bd.b05.PsnclVO) vecPsncl.elementAt(i);
					if (psnclVO != null && psnclVO.getPk_psncl() != null) {
						strWhePsncl.append("'" + psnclVO.getPk_psncl() + "'");
						if (i != vecPsncl.size() - 1) {
							strWhePsncl.append(",");
						}
						else {
							strWhePsncl.append(")");
						}
					}
				}
			}
			if (vecDept != null && vecDept.size() != 0) {//如果选择了部门
				int intCou = vecDept.size() / intSubNum;
				if ((vecDept.size() - intCou * intSubNum) == 0 && intCou != 0) {
					intCount = intCou;
				} else {
					intCount = intCou + 1;
				}
				if (intCou == 0) {
					intSubNum = vecDept.size();
				}
				for (int i = 0; i < intCount; i++) {
					//拼出部门的条件

					strWheDept.append(" and bd_deptdoc.pk_deptdoc in ( ");
					for (j = intStart; j < intStart + intSubNum; j++) {
						nc.vo.wa.wa_dept.DeptVO deptVO = (nc.vo.wa.wa_dept.DeptVO) vecDept.elementAt(j);
						if (deptVO != null && deptVO.getPk_deptdoc() != null) {
							strWheDept.append("'" + deptVO.getPk_deptdoc() + "'");
							if (j != intStart + intSubNum - 1) {
								strWheDept.append(",");
							}
							else {
								strWheDept.append(")");
							}
						}
					}

					intStart = j;
					if ((vecDept.size() - intStart) < intSubNum) {
						//最后一次的个数
						intSubNum = vecDept.size() - intStart;
					}
					strWheDeptAndPsncl.append(strWhePsncl);
					strWheDeptAndPsncl.append(strWheDept);

					vecStrs.add(strWheDeptAndPsncl.toString());
					strWheDeptAndPsncl = new StringBuffer("");
					strWheDept = new StringBuffer("");
				}
				strRT = new String[vecStrs.size()];
				if (vecStrs.size() != 0) {
					vecStrs.copyInto(strRT);
				}
			}
			else{//如果没有选择部门,则加上该用户有权限的部门
				strRT = new String[1];
				strRT[0] = strWhePsncl+strWhere;
			}

		}
		catch (Exception e) {
			reportException(e);
		}
		return strRT;
	}
}
