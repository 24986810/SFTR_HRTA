package nc.impl.tbm.tbm_029;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.NCLocator;
import nc.bs.logging.Logger;
import nc.bs.pub.SuperDMO;
import nc.hr.utils.ResHelper;
import nc.impl.tbm.tbm_003.PsncalendarDMO;
import nc.impl.tbm.tbm_003.PsncalendarImpl;
import nc.impl.tbm.tbm_028.FzqxjbImpl;
import nc.itf.hr.ta.IBclbDefining;
import nc.itf.hr.ta.TADelegator;
import nc.itf.uap.bd.refcheck.IReferenceCheck;
import nc.jdbc.framework.processor.BeanListProcessor;
import nc.ui.trade.business.HYPubBO_Client;
import nc.vo.hr.comp.formulaset.FuncParser;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFTime;
import nc.vo.tam.tongren.power.UserClassDeptVO;
import nc.vo.tam.tongren.power.UserClassTypeVO;
import nc.vo.tam.tongren.power.UserDeptVO;
import nc.vo.tam.tongren001.DeptKqBVO;
import nc.vo.tam.tongren003.PanbanWeekBVO;
import nc.vo.tam.tongren008.ApplyBVO;
import nc.vo.tam.tongren008.ApplyHVO;
import nc.vo.tbm.tbm_003.BlcbMutexVO;
import nc.vo.tbm.tbm_003.PsncalendarAllVO;
import nc.vo.tbm.tbm_003.PsncalendarVO;
import nc.vo.tbm.tbm_029.BclbHeaderVO;
import nc.vo.tbm.tbm_029.BclbItemVO;
import nc.vo.tbm.tbm_029.BclbVO;
import nc.vo.trade.pub.HYBillVO;
/**
 * Bclb的BO类
 *
 * 创建日期：(2001-6-6)
 * @author：谢志华
 */
public class BclbImpl  implements IBclbDefining {


	/**
	 * BclbBO 构造子注解。
	 */
	public BclbImpl() {
		super();
	}
	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#deleteBclb(nc.vo.tbm.tbm_029.BclbHeaderVO)
	 */
	public void deleteBclb(BclbHeaderVO vo) throws BusinessException {

		try {
			PsncalendarDMO psncalendarDMO = new PsncalendarDMO();
			psncalendarDMO.deletePsncalendarAllArrayByBclb(vo.getPk_bclbid());

			BclbDMO dmo = new BclbDMO();
			dmo.deleteBclb(vo);

			//add 5.5 更新班别互斥表
			dmo.updateBlcbMutex(vo.getPk_bclbid(),null);

		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::deleteBclb(BclbPK) Exception!",e);
		}
	}
	/**
	 * EJB规范中要求的方法。
	 *
	 * 创建日期：(2001-6-6)
	 */

	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#insert(nc.vo.tbm.tbm_029.BclbVO)
	 */
	public String insertBclb029(BclbVO bclb) throws BusinessException {

		try {
			BclbDMO dmo = new BclbDMO();
			String key = dmo.insert(bclb);

			//add 5.5 更新班别互斥表
			updateBlcbMutex((BclbHeaderVO) bclb.getParentVO(),key);

			return key;
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::insert(BclbVO) Exception!",e);
		}
	}

	/**
	 * 向数据库tbm_bclb表中插入一个BclbHeaderVO对象。
	 * @param bhvo
	 * @return
	 * @throws SQLException
	 */
	public String insertBclbHeader029(BclbHeaderVO bhvo) throws BusinessException {

		try {
			BclbDMO dmo = new BclbDMO();

			if (bhvo.getDefaultFlag().booleanValue()){
				//如果将一个班别设为默认班别
				dmo.updateHeaderForDefault(bhvo);
			}

			String key = dmo.insertHeader(bhvo);
			return key;
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::insertBclbHeader029(BclbHeaderVO) Exception!",e);
		}
	}

	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#isInUse(nc.vo.tbm.tbm_029.BclbHeaderVO)
	 */
	public int isInUseBclb029(BclbHeaderVO vo) throws BusinessException {

		try {
			//ReferenceManagerDMO refdmo = new ReferenceManagerDMO();
			nc.itf.uap.bd.refcheck.IReferenceCheck
			iReferenceCheck= (IReferenceCheck) NCLocator.getInstance().lookup(IReferenceCheck.class.getName());
			if(!iReferenceCheck.isReferenced("tbm_bclb",vo.getPrimaryKey()))
				return 0;
		}
		catch (Exception e) {
			reportException(e);
			//throw new BusinessException("BclbBO::deleteBclb(BclbPK) Exception!",e);
			return 1;
		}
		return 1;
	}
	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#queryAllBclbHeader(java.lang.String, java.lang.String)
	 */
	public BclbHeaderVO[] queryBclb029AllBclbHeader(String unitCode, String gcbm)
	throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.queryAllBclbHeader(unitCode, gcbm);
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::queryAllBclbHeader() Exception!",e);
		}
	}
	/* 
	 * 刘鹏飞新增，2011-4-12 只新增sql变量，方法同上
	 */
	public BclbHeaderVO[] queryBclb029AllBclbHeader(String unitCode, String gcbm,String sql)
	throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.queryAllBclbHeaderBySqlWhe(unitCode, gcbm,sql);
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::queryAllBclbHeader() Exception!",e);
		}
	}
	public BclbHeaderVO queryPresetBclbHeader()throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.queryPresetBclbHeader();
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::queryPresetBclbHeader() Exception!",e);
		}
	}

	public boolean isHadRecord(String whereSql)throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.isHadRecord(whereSql);
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::isHadRecord(String whereSql) Exception!",e);
		}
	}

	/**
	 * 查询公司中的默认班别
	 * @param pkCorp
	 * @return BclbHeaderVO
	 * @throws SQLException
	 */
	public BclbHeaderVO queryDefaultBclbHeader(String pkCorp)throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.queryDefaultBclbHeader(pkCorp);
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::queryDefaultBclbHeader(pkCorp) Exception!",e);
		}
	}

	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#queryAllBclbItem(nc.vo.tbm.tbm_029.BclbHeaderVO)
	 */
	public BclbItemVO[] queryAllBclbItemBclb029(BclbHeaderVO bhvo)
	throws BusinessException {
		try {
			BclbDMO bclbdmo = new BclbDMO();
			return bclbdmo.queryAllBclbItem(bhvo);
		} catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::queryAllBclbItem() Exception!",e);
		}
	}
	private void reportException(Exception e) {
		Logger.error(e.getMessage(), e);}
	/* (non-Javadoc)
	 * @see nc.bs.tbm.tbm_029.IBclb029#update(nc.vo.tbm.tbm_029.BclbVO)
	 */

	public void updateBclb029(BclbVO bclb) throws BusinessException {

		try {

			BclbDMO dmo = new BclbDMO();
			dmo.update(bclb);

			//add 5.5 更新班别互斥表
			BclbHeaderVO bclbHeaderVO = (BclbHeaderVO) bclb.getParentVO();
			updateBlcbMutex(bclbHeaderVO,bclbHeaderVO.getPk_bclbid());
		}
		catch (Exception e) {
			reportException(e);
			if (e.getCause().toString().indexOf("OutOfMemoryError")>=0){
				throw new BusinessException(ResHelper.getString("6017","UPP6017-000845")/*"引用此班别用来排班的数据量过大，请先清理用此班别排班的工作日历！"*/);
			}
			throw new BusinessException("BclbBO::update(BclbVO) Exception!",e);
		}catch (Throwable aThrowable) {
			if (aThrowable instanceof java.lang.OutOfMemoryError) {
				throw new BusinessException(ResHelper.getString("6017","UPP6017-000845")/*"引用此班别用来排班的数据量过大，请先清理用此班别排班的工作日历！"*/);
			}
		}
	}

	public void updateBclb029(BclbVO bclb,boolean isPsncalendarClear,FuncParser fpFuncParser,int l_intRuleScale) throws BusinessException {

		try {
			PsncalendarImpl psncalendarImpl = new PsncalendarImpl();
			PsncalendarDMO psncalendarDMO = new PsncalendarDMO();
			if(isPsncalendarClear){
				psncalendarDMO.deletePsncalendarAllArrayByBclb(bclb.getPk_bclbid());
			}

			//add 增加是否各作息时间段作了修改
			boolean isWtsModify = false;
			BclbItemVO[] tmpbtvs = queryAllBclbItemBclb029((BclbHeaderVO)bclb.getParentVO());
			BclbItemVO[] tmpbtvsnew = (BclbItemVO[])bclb.getChildrenVO();
			if (tmpbtvs.length==tmpbtvsnew.length){
				for (int i = 0; i < tmpbtvsnew.length; i++) {
					if (!tmpbtvsnew[i].getJssj().equals(tmpbtvs[i].getJssj())
							||tmpbtvsnew[i].getWtendday().intValue()!=tmpbtvs[i].getWtendday().intValue()
							||!tmpbtvsnew[i].getKssj().equals(tmpbtvs[i].getKssj())
							||tmpbtvsnew[i].getWtbeginday().intValue()!=tmpbtvs[i].getWtbeginday().intValue()
							||(tmpbtvsnew[i].getCheckInFlag()==null?false:tmpbtvsnew[i].getCheckInFlag().booleanValue())!=(tmpbtvs[i].getCheckInFlag()==null?false:tmpbtvs[i].getCheckInFlag().booleanValue())
							||(tmpbtvsnew[i].getCheckoutFlag()==null?false:tmpbtvsnew[i].getCheckoutFlag().booleanValue())!=(tmpbtvs[i].getCheckoutFlag()==null?false:tmpbtvs[i].getCheckoutFlag().booleanValue())

							//add by zhoulan
							|| (tmpbtvsnew[i].getZsts()==null?null:tmpbtvsnew[i].getZsts().intValue())!=(tmpbtvs[i].getZsts()==null?null:tmpbtvs[i].getZsts().intValue())
					){
						isWtsModify = true;
						break;
					}
				}
			}

			if (isWtsModify){
				//如果作息时间段作了修改，则要更新工作日历，否则不用

				//add 5.5 更新工作日历子表tbm_psncalendarb中遇假日取消的记录
				UFDate[] maxMinDates = psncalendarDMO.queryDateByBclb(bclb.getPk_bclbid(),true);
				if (maxMinDates != null){//被工作日历引用
					UFDate maxDate = maxMinDates[0];
					UFDate minDate = maxMinDates[1];

					//查出库中引用此班别的工作日历记录
					PsncalendarVO[] aryPsncalendarVOs = psncalendarDMO.queryCancelflagPsnArrayByBclbPk(bclb.getPk_bclbid());

					PsncalendarAllVO[] psncalendarAllVOs = new PsncalendarAllVO[aryPsncalendarVOs.length];

					//改为查出此公司所有的假日(不仅仅是开始日期要提前一天，截止日期要推后一天)
					//		(key/value)对为：key 		String（假日日期）
					//						value	Vector（元素为FzqxjbConvertVO）
					FzqxjbImpl fzqxjbImpl = new FzqxjbImpl();
					HashMap dateBeginEndForPsn = fzqxjbImpl.queryAllFzqxjbConvertVOByCorp(bclb.getPk_corp());


					for(int i=0 ;i<aryPsncalendarVOs.length ;i++){

						PsncalendarVO l_PsncalendarVOTemp = aryPsncalendarVOs[i]; //某个人员某一天的日历数据

						//step.1.取得某一天的假日信息(包括哪些时段、哪些人享受)
						//       取得下一天的假日信息(包括哪些时段、哪些人享受)
						//       取得上一天的假日信息(包括哪些时段、哪些人享受)
						Vector dateBeginEndForPsnTmpAll = new Vector();
						Vector dateBeginEndForPsnTmp = dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().toString())==null?new Vector():(Vector)dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().toString());
						Vector dateBeginEndForPsnTmp2 = dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().getDateAfter(1).toString())==null?new Vector():(Vector)dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().getDateAfter(1).toString());
						Vector dateBeginEndForPsnTmp3 = dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().getDateBefore(1).toString())==null?new Vector():(Vector)dateBeginEndForPsn.get(l_PsncalendarVOTemp.getCalendar().getDateBefore(1).toString());

						dateBeginEndForPsnTmpAll.addAll(dateBeginEndForPsnTmp);
						dateBeginEndForPsnTmpAll.addAll(dateBeginEndForPsnTmp2);
						dateBeginEndForPsnTmpAll.addAll(dateBeginEndForPsnTmp3);

						BclbHeaderVO bhvo = (BclbHeaderVO)bclb.getParentVO();
						//BclbItemVO[] tmpbtvs = bclb.getBclbItemVOs();

						if (dateBeginEndForPsnTmpAll.size()>0){

							//step.2.找出此人此天享受的所有假日时间段
							//		 和此人下一天享受的所有假日时间段	
							//		 和此人上一天享受的所有假日时间段	
							Vector fzqxjbVOsEnjoyed = psncalendarImpl.findEnjoyedFzqxjbVOs(l_PsncalendarVOTemp.getPk_psndoc(),fpFuncParser,dateBeginEndForPsnTmpAll);

							//step.3.用此人此天享受的所有假日时间段 分割 正常作息时间段(享受的假日时间段有相交的先取并集)
							//查询出作息时间数据

							Vector psncalendarbVOs = null;
							Vector psncalHolidayVOs = null;

							if (tmpbtvs!=null && tmpbtvs.length>0){
								Object[] returnedObj = psncalendarImpl.splitBclbItem(l_PsncalendarVOTemp.getCalendar(),bhvo,tmpbtvs,fzqxjbVOsEnjoyed);
								psncalendarbVOs = (Vector)returnedObj[0];
								psncalHolidayVOs = (Vector)returnedObj[1];
							}

							psncalendarAllVOs[i] = new PsncalendarAllVO();
							psncalendarAllVOs[i].setPsncalendarVO(l_PsncalendarVOTemp);


							psncalendarAllVOs[i].setPsncalendarbVOs(psncalendarbVOs==null?new Vector():psncalendarbVOs,true,l_intRuleScale);
							if (psncalHolidayVOs!=null && psncalHolidayVOs.size() >0){
								//
							}else {
								//modify 5.5 如果是遇假日取消但和假日没有交集也不插Psncalendarb子表
								psncalendarAllVOs[i].setPsncalendarbVOs(null,false,l_intRuleScale);
							}

							psncalendarAllVOs[i].setPsncalHolidayVOs(psncalHolidayVOs==null?new Vector():psncalHolidayVOs);
						}else{
							Vector psncalendarbVOs = null;
							if (tmpbtvs!=null && tmpbtvs.length>0){
								psncalendarbVOs = psncalendarImpl.bclbItemVOsToPsncalendarbVOs(tmpbtvs);
							}
							psncalendarAllVOs[i] = new PsncalendarAllVO();
							psncalendarAllVOs[i].setPsncalendarVO(l_PsncalendarVOTemp);

							//modify 5.5 如果是遇假日照旧则不插Psncalendarb子表，为改动最小，先设置后清空
							psncalendarAllVOs[i].setPsncalendarbVOs(psncalendarbVOs==null?new Vector():psncalendarbVOs,true,l_intRuleScale);
							psncalendarAllVOs[i].setPsncalendarbVOs(null,false,l_intRuleScale);

							psncalendarAllVOs[i].setPsncalHolidayVOs(null);
						}
					}
					TADelegator.getPsncalendar().insertPsncalendarAllArrayUseDefault(psncalendarAllVOs);
				}
			}

			BclbDMO dmo = new BclbDMO();
			dmo.update(bclb);

			//add 5.5 更新班别互斥表
			BclbHeaderVO bclbHeaderVO = (BclbHeaderVO) bclb.getParentVO();
			updateBlcbMutex(bclbHeaderVO,bclbHeaderVO.getPk_bclbid());
		}
		catch (Exception e) {
			reportException(e);
			if (e.getCause().toString().indexOf("OutOfMemoryError")>=0){
				throw new BusinessException(ResHelper.getString("6017","UPP6017-000845")/*"引用此班别用来排班的数据量过大，请先清理用此班别排班的工作日历！"*/);
			}
			throw new BusinessException("BclbBO::update(BclbVO) Exception!",e);
		}catch (Throwable aThrowable) {
			if (aThrowable instanceof java.lang.OutOfMemoryError) {
				throw new BusinessException(ResHelper.getString("6017","UPP6017-000845")/*"引用此班别用来排班的数据量过大，请先清理用此班别排班的工作日历！"*/);
			}
		}
	}

	public void updateBlcbMutex(BclbHeaderVO bclbHeaderVO,String pkBclbHeaderVO) throws BusinessException {

		try {

			//新插入(或修改)的班别的开始时间点和结束时间点，假设为一固定时间点
			int timebegindaytypeUpdate = bclbHeaderVO.getTimebeginday().intValue();
			UFDate timebegindayUpdate = new UFDate("2000-01-02").getDateAfter(timebegindaytypeUpdate);//timebegindaytypeUpdate
			UFTime timebegintimeUpdate = new UFTime(bclbHeaderVO.getTimebegintime());
			UFDateTime beginDayTimeUpdate = new UFDateTime(timebegindayUpdate,timebegintimeUpdate);//开始时间点

			int timeenddaytypeUpdate = bclbHeaderVO.getTimeendday().intValue();
			UFDate timeenddayUpdate = new UFDate("2000-01-02").getDateAfter(timeenddaytypeUpdate);//timeenddaytypeUpdate
			UFTime timeendtimeUpdate = new UFTime(bclbHeaderVO.getTimeendtime());
			UFDateTime endDayTimeUpdate = new UFDateTime(timeenddayUpdate,timeendtimeUpdate);//结束时间点

			//得到库中所有的班别
			BclbDMO dmo = new BclbDMO();
			BclbHeaderVO[] bclbHeaderVOs = dmo.queryAllBclbHeader(bclbHeaderVO.getPk_corp(), null);
			java.util.ArrayList<BlcbMutexVO> resultList = new java.util.ArrayList<BlcbMutexVO>();
			for (int i =0 ;i<bclbHeaderVOs.length ;i++){
				BclbHeaderVO aBclbHeaderVO = bclbHeaderVOs[i];

				if (aBclbHeaderVO.getPk_bclbid().equals(pkBclbHeaderVO)){//如果是自身则跳过，在循环外校验，否则可能会加两次
					continue;
				}

				//以库中已存在的班别为第一天班别，新插入(或修改)的班别为第二天的班别，进行互斥校验
				int timebegindaytype = aBclbHeaderVO.getTimebeginday().intValue();
				UFDate timebeginday = (timebegindaytype==1?new UFDate("2000-01-03"):(timebegindaytype==-1?new UFDate("2000-01-01"):new UFDate("2000-01-02")));
				UFTime timebegintime = new UFTime(aBclbHeaderVO.getTimebegintime());
				UFDateTime beginDayTime = new UFDateTime(timebeginday,timebegintime);//开始时间点

				int timeenddaytype = aBclbHeaderVO.getTimeendday().intValue();
				UFDate timeendday = (timeenddaytype==1?new UFDate("2000-01-03"):(timeenddaytype==-1?new UFDate("2000-01-01"):new UFDate("2000-01-02")));
				UFTime timeendtime = new UFTime(aBclbHeaderVO.getTimeendtime());
				UFDateTime endDayTime = new UFDateTime(timeendday,timeendtime);//结束时间点

				UFDateTime beginDayTimeUpdateAfter = new UFDateTime(beginDayTimeUpdate.getDate().getDateAfter(1),beginDayTimeUpdate.getUFTime());
				UFDateTime endDayTimeUpdateAfter = new UFDateTime(endDayTimeUpdate.getDate().getDateAfter(1),endDayTimeUpdate.getUFTime());
				//if (beginDayTime.compareTo(endDayTimeUpdateAfter)<0 && endDayTime.compareTo(beginDayTimeUpdateAfter)>0){
				if (endDayTime.compareTo(beginDayTimeUpdateAfter)>0){
					//临界值已考虑，即一个班别紧接另一班别排班，中间没有空闲１秒，是允许的
					BlcbMutexVO aBlcbMutexVO = new BlcbMutexVO();
					aBlcbMutexVO.setPk_corp(bclbHeaderVO.getPk_corp());
					aBlcbMutexVO.setFirstblcbid(aBclbHeaderVO.getPk_bclbid());
					aBlcbMutexVO.setFirstblcbname(aBclbHeaderVO.getLbmc());
					aBlcbMutexVO.setNextblcbid(pkBclbHeaderVO);
					aBlcbMutexVO.setNextblcbname(bclbHeaderVO.getLbmc());
					//5.5加上互斥时间长度
					//InputParamVO tempVO = new InputParamVO();
					//tempVO.setStarttime(beginDayTime);
					//tempVO.setEndtime(endDayTime);
					//InputParamVO tempVO2 = new InputParamVO();
					//tempVO2.setStarttime(beginDayTimeUpdateAfter);
					//tempVO2.setEndtime(endDayTimeUpdateAfter);
					//int intersectionSec = TbmBSCall.getTimeIntersectionSec(tempVO,tempVO2);
					int intersectionSec = UFDateTime.getSecondsBetween(beginDayTimeUpdateAfter, endDayTime);
					aBlcbMutexVO.setMutextime(new Integer(intersectionSec));
					//5.5加上互斥时间长度
					resultList.add(aBlcbMutexVO);
				}

				UFDateTime beginDayTimeUpdateBefore = new UFDateTime(beginDayTimeUpdate.getDate().getDateBefore(1),beginDayTimeUpdate.getUFTime());
				UFDateTime endDayTimeUpdateBefore = new UFDateTime(endDayTimeUpdate.getDate().getDateBefore(1),endDayTimeUpdate.getUFTime());
				//以新插入(或修改)的班别为第一天班别，库中已存在的班别为第二天的班别，进行互斥校验
				//if (beginDayTime.compareTo(endDayTimeUpdateBefore)<0 && endDayTime.compareTo(beginDayTimeUpdateBefore)>0){
				if (endDayTimeUpdateBefore.compareTo(beginDayTime)>0){
					BlcbMutexVO aBlcbMutexVO = new BlcbMutexVO();
					aBlcbMutexVO.setPk_corp(bclbHeaderVO.getPk_corp());
					aBlcbMutexVO.setFirstblcbid(pkBclbHeaderVO);
					aBlcbMutexVO.setFirstblcbname(bclbHeaderVO.getLbmc());
					aBlcbMutexVO.setNextblcbid(aBclbHeaderVO.getPk_bclbid());
					aBlcbMutexVO.setNextblcbname(aBclbHeaderVO.getLbmc());
					//5.5加上互斥时间长度
					//InputParamVO tempVO = new InputParamVO();
					//tempVO.setStarttime(beginDayTime);
					//tempVO.setEndtime(endDayTime);
					//InputParamVO tempVO2 = new InputParamVO();
					//tempVO2.setStarttime(beginDayTimeUpdateBefore);
					//tempVO2.setEndtime(endDayTimeUpdateBefore);
					//int intersectionSec = TbmBSCall.getTimeIntersectionSec(tempVO,tempVO2);
					int intersectionSec = UFDateTime.getSecondsBetween(beginDayTime, endDayTimeUpdateBefore);
					aBlcbMutexVO.setMutextime(new Integer(intersectionSec));
					//5.5加上互斥时间长度
					resultList.add(aBlcbMutexVO);
				}
			}

			//5.5加上以新插入(或修改)的班别为第一天班别,并且以自身为为第二天的班别，进行互斥校验
			UFDateTime beginDayTimeUpdateBefore = new UFDateTime(beginDayTimeUpdate.getDate().getDateBefore(1),beginDayTimeUpdate.getUFTime());
			UFDateTime endDayTimeUpdateBefore = new UFDateTime(endDayTimeUpdate.getDate().getDateBefore(1),endDayTimeUpdate.getUFTime());
			//if (beginDayTimeUpdate.compareTo(endDayTimeUpdateBefore)<0 && endDayTimeUpdate.compareTo(beginDayTimeUpdateBefore)>0){
			if (endDayTimeUpdateBefore.compareTo(beginDayTimeUpdate)>0){
				BlcbMutexVO aBlcbMutexVO = new BlcbMutexVO();
				aBlcbMutexVO.setPk_corp(bclbHeaderVO.getPk_corp());
				aBlcbMutexVO.setFirstblcbid(pkBclbHeaderVO);
				aBlcbMutexVO.setFirstblcbname(bclbHeaderVO.getLbmc());
				aBlcbMutexVO.setNextblcbid(pkBclbHeaderVO);
				aBlcbMutexVO.setNextblcbname(bclbHeaderVO.getLbmc());
				//5.5加上互斥时间长度
				//InputParamVO tempVO = new InputParamVO();
				//tempVO.setStarttime(beginDayTimeUpdate);
				//tempVO.setEndtime(endDayTimeUpdate);
				//InputParamVO tempVO2 = new InputParamVO();
				//tempVO2.setStarttime(beginDayTimeUpdateBefore);
				//tempVO2.setEndtime(endDayTimeUpdateBefore);
				//int intersectionSec = TbmBSCall.getTimeIntersectionSec(tempVO,tempVO2);
				int intersectionSec = UFDateTime.getSecondsBetween(beginDayTimeUpdate, endDayTimeUpdateBefore);
				aBlcbMutexVO.setMutextime(new Integer(intersectionSec));
				//5.5加上互斥时间长度
				resultList.add(aBlcbMutexVO);
			}

			if (resultList.size()>0){
				BlcbMutexVO[] blcbMutexVOs = new BlcbMutexVO[resultList.size()];
				resultList.toArray(blcbMutexVOs);
				dmo.updateBlcbMutex(pkBclbHeaderVO,blcbMutexVOs);
			}else {
				dmo.updateBlcbMutex(pkBclbHeaderVO,null);
			}
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBO::update(BclbVO) Exception!",e);
		}
	}

	/**
	 * 通过主键获得VO对象。
	 * @param key
	 * @return
	 * @throws BusinessException
	 */
	public BclbHeaderVO findBclbHeaderByPrimaryKey(String key)throws BusinessException{

		BclbHeaderVO bclbHeaderVO = null;
		try {
			BclbDMO bclbdmo = new BclbDMO();
			bclbHeaderVO = bclbdmo.findHeaderByPrimaryKey(key);
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbImpl::findBclbHeaderByPrimaryKey(String key) Exception!", e);
		}
		return bclbHeaderVO;
	}

	/**
	 * 根据VO中所设定的条件返回所有符合条件的VO数组
	 *
	 * 创建日期：(2002-1-22)
	 * @return nc.vo.tbm.tbm_002.BclbVO[]
	 * @param bclbVO nc.vo.tbm.tbm_002.BclbVO
	 * @param isAnd boolean 以与条件查询还是以或条件查询
	 * @exception java.sql.SQLException 异常说明。
	 */
	public BclbVO[] queryBclbByVO(BclbVO condBclbVO, Boolean isAnd) throws BusinessException {

		BclbVO[] bclbs = null;
		try {
			BclbDMO dmo = new BclbDMO();
			bclbs = dmo.queryByVO(condBclbVO, isAnd);
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBean::queryByVO(BclbVO condBclbVO, Boolean isAnd) Exception!", e);
		}
		return bclbs;
	}

	public BclbVO[] queryBclbByCorp(String pkCorp) throws BusinessException {

		BclbVO searchVO = new BclbVO();
		searchVO.setPk_corp(pkCorp);
		return queryBclbByVO(searchVO, false);
	}

	public Map<String,BclbVO> queryBclbByVOMap(BclbVO condBclbVO, Boolean isAnd) throws BusinessException {

		BclbVO[] bclbs = queryBclbByVO(condBclbVO, isAnd);
		if(bclbs==null)
			return null;
		Map<String,BclbVO> retMap = new Hashtable<String, BclbVO>();
		for(BclbVO vo:bclbs){
			retMap.put(vo.getPk_bclbid(), vo);
		}
		return retMap;
	}

	public Map queryBclbByCorpMap(String pkCorp) throws BusinessException {
		BclbVO searchVO = new BclbVO();
		searchVO.setPk_corp(pkCorp);
		return queryBclbByVOMap(searchVO, false);
	}

	/**
	 * 通过主键获得VO对象。
	 *
	 * 创建日期：(2002-1-22)
	 * @return nc.vo.tbm.tbm_002.BclbVO
	 * @param key String
	 * @exception BusinessException 异常说明。
	 */
	public BclbVO findBclbByPrimaryKey(String key) throws BusinessException {

		BclbVO bclb = null;
		try {
			BclbDMO dmo = new BclbDMO();
			bclb = dmo.findByPrimaryKey(key);
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBean::findByPrimaryKey(BclbPK) Exception!", e);
		}
		return bclb;
	}


	public BclbHeaderVO findBclbHeaderByClassName(String className, String pkCorp) throws BusinessException {
		BclbHeaderVO bclbHeaderVO = null;
		try {
			BclbDMO dmo = new BclbDMO();
			bclbHeaderVO = dmo.findBclbHeaderByClassName(className,pkCorp);
		}
		catch (Exception e) {
			reportException(e);
			throw new BusinessException("BclbBean::findByPrimaryKey(BclbPK) Exception!", e);
		}
		return bclbHeaderVO;
	}
	public void insertBclbs(BclbHeaderVO[] bclbHeaderVOs) throws BusinessException {
		BclbVO bclbVO;
		for (int row = 0; row < bclbHeaderVOs.length; row++) {
			bclbVO = new BclbVO();
			bclbVO.setChildrenVO(queryAllBclbItemBclb029(bclbHeaderVOs[row]));
			BclbHeaderVO newvo = findBclbHeaderByPrimaryKey(bclbHeaderVOs[row].getPk_bclbid());
			newvo.setPk_bclbid(null);
			newvo.setPk_corp(bclbHeaderVOs[row].getPk_corp());
			newvo.setDefaultFlag(new UFBoolean("N"));
			newvo.setLbbm(bclbHeaderVOs[row].getLbbm());
			newvo.setLbmc(bclbHeaderVOs[row].getLbmc());
			newvo.setBclbfl(bclbHeaderVOs[row].getBclbfl());
			bclbVO.setParentVO(newvo);
			insertBclb029(bclbVO);
		}

	}



	/* (non-Javadoc)
	 * @see nc.itf.xhnet.IXhnetintface#setRoleOrUserAtdTypeAuth(java.lang.String, java.util.ArrayList, int, java.lang.String, java.lang.String, int)
	 */
	public boolean setRoleOrUserAtdTypeAuth(String tempid,
			ArrayList<UserDeptVO> list, int vflag, String pk_module,
			String pk_corp, int type) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();

		String delsql = "delete from bd_tr_userpower ";
		UserDeptVO[] tempVOs = (UserDeptVO[]) list.toArray(new UserDeptVO[0]);

		try{

			if(vflag == 0){//删除角色
				delsql += " where pk_role = '"+tempid+"' and powertype="+type+" ";
			}
			else if(vflag == 1 ){
				delsql += " where pk_user = '"+tempid+"' and powertype="+type+" ";
			}
			delsql+=" and pk_module='"+pk_module+"' and pk_corp='"+pk_corp+"'";
			baseDao.executeUpdate(delsql);
			baseDao.insertVOArray(tempVOs);

			return true;
		}
		catch(Exception e){
			Logger.error(e.getMessage());
			return false;
		}

	}
	public void onAuditApply(HYBillVO billvo) throws BusinessException {
		// TODO Auto-generated method stub
		ApplyHVO hvo = (ApplyHVO)billvo.getParentVO();
		SuperDMO dmo = new SuperDMO();
		BaseDAO baseDao = new BaseDAO();
		ApplyHVO oldvo = (ApplyHVO)dmo.queryByPrimaryKey(ApplyHVO.class, hvo.getPrimaryKey());
		if(oldvo==null||!oldvo.getTs().equals(hvo.getTs())){
			throw new BusinessException("数据已被他人修改，请刷新");
		}
		dmo.update(hvo);
		ApplyBVO[] bvos = (ApplyBVO[])billvo.getChildrenVO();
		dmo.updateArray(bvos);
//		for(ApplyBVO bvo:bvos ){
//			String sql = " update trtam_deptdoc_kq_b set bisnew='N',denddate='"+bvo.getDenddate()+"' where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and bisnew='Y' and isnull(dr,0)=0 ";
//			String sql2 = " update trtam_paiban_temp set denddate='"+bvo.getDenddate()+"' where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"'  and isnull(dr,0)=0 ";
//			baseDao.executeUpdate(sql);
//			baseDao.executeUpdate(sql2);
//		}
		
	}
	public void onCancleAuditApply(HYBillVO billvo) throws BusinessException {
		// TODO Auto-generated method stub
		ApplyHVO hvo = (ApplyHVO)billvo.getParentVO();
		SuperDMO dmo = new SuperDMO();
		BaseDAO baseDao = new BaseDAO();
		ApplyHVO oldvo = (ApplyHVO)dmo.queryByPrimaryKey(ApplyHVO.class, hvo.getPrimaryKey());
		if(oldvo==null||!oldvo.getTs().equals(hvo.getTs())){
			throw new BusinessException("数据已被他人修改，请刷新");
		}
		dmo.update(hvo);
		ApplyBVO[] bvos = (ApplyBVO[])billvo.getChildrenVO();
		dmo.updateArray(bvos);
//		for(ApplyBVO bvo:bvos ){
//			String sql = " update trtam_deptdoc_kq_b set bisnew='Y',denddate=null where dstartdate='"+bvo.getDstartdate()+"' and pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and bisnew='N' and isnull(dr,0)=0 ";
//			String sql2 = " update trtam_paiban_temp set denddate=null where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"'  and isnull(dr,0)=0 ";
//			baseDao.executeUpdate(sql2);
//			baseDao.executeUpdate(sql);
//		}
		
	}
	public void getOAHoilday(UFDate date) throws BusinessException {
		// TODO Auto-generated method stub
		OaHolidayDMO dmo;
		try {
			dmo = new OaHolidayDMO();
			dmo.getOAHoilday(date);
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	public boolean setClassRoleOrUserAtdTypeAuth(String tempid, ArrayList<UserClassDeptVO> list, int vflag, String pk_module, String pk_corp, int type) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();

		String delsql = "delete from bd_tr_userclasspower ";
		UserClassDeptVO[] tempVOs = (UserClassDeptVO[]) list.toArray(new UserClassDeptVO[0]);

		try{

			if(vflag == 0){//删除角色
				delsql += " where pk_role = '"+tempid+"' and powertype="+type+" ";
			}
			else if(vflag == 1 ){
				delsql += " where pk_user = '"+tempid+"' and powertype="+type+" ";
			}
			delsql+=" and pk_module='"+pk_module+"' and pk_corp='"+pk_corp+"'";
			baseDao.executeUpdate(delsql);
			baseDao.insertVOArray(tempVOs);

			return true;
		}
		catch(Exception e){
			Logger.error(e.getMessage());
			return false;
		}

	}
	public boolean setClassRoleOrUserAtdClassTypeAuth(String tempid, ArrayList<UserClassTypeVO> list, int vflag, String pk_module, String pk_corp, int type) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();

		String delsql = "delete from bd_tr_userclasstype ";
		UserClassTypeVO[] tempVOs = (UserClassTypeVO[]) list.toArray(new UserClassTypeVO[0]);

		try{

			if(vflag == 0){//删除角色
				delsql += " where pk_role = '"+tempid+"' and powertype="+type+" ";
			}
			else if(vflag == 1 ){
				delsql += " where pk_user = '"+tempid+"' and powertype="+type+" ";
			}
			delsql+=" and pk_module='"+pk_module+"' and pk_corp='"+pk_corp+"'";
			baseDao.executeUpdate(delsql);
			baseDao.insertVOArray(tempVOs);

			return true;
		}
		catch(Exception e){
			Logger.error(e.getMessage());
			return false;
		}

	}
	public void onDelApply(HYBillVO billvo) throws BusinessException {
		// TODO Auto-generated method stub
		ApplyHVO hvo = (ApplyHVO)billvo.getParentVO();
		SuperDMO dmo = new SuperDMO();
		BaseDAO baseDao = new BaseDAO();
		ApplyHVO oldvo = (ApplyHVO)dmo.queryByPrimaryKey(ApplyHVO.class, hvo.getPrimaryKey());
		if(oldvo==null||!oldvo.getTs().equals(hvo.getTs())){
			throw new BusinessException("数据已被他人修改，请刷新");
		}
		
		ApplyBVO[] bvos = (ApplyBVO[])billvo.getChildrenVO();
	
		for(ApplyBVO bvo:bvos ){
			String sql = " update trtam_deptdoc_kq_b set bisnew='Y',denddate=null where dstartdate='"+bvo.getDstartdate()+"' and pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and bisnew='N' and isnull(dr,0)=0 ";
			String sql2 = " update trtam_paiban_temp set denddate=null where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"'  and isnull(dr,0)=0 ";
			baseDao.executeUpdate(sql2);
			baseDao.executeUpdate(sql);
		}
	}
	public void onSaveApply(HYBillVO billvo) throws BusinessException {
		// TODO Auto-generated method stub
		ApplyHVO hvo = (ApplyHVO)billvo.getParentVO();
		SuperDMO dmo = new SuperDMO();
		BaseDAO baseDao = new BaseDAO();
		ApplyHVO oldvo = (ApplyHVO)dmo.queryByPrimaryKey(ApplyHVO.class, hvo.getPrimaryKey());
		if(oldvo==null||!oldvo.getTs().equals(hvo.getTs())){
			throw new BusinessException("数据已被他人修改，请刷新");
		}
		
		ApplyBVO[] bvos = (ApplyBVO[])billvo.getChildrenVO();
		
		for(ApplyBVO bvo:bvos ){
			String sql = " update trtam_deptdoc_kq_b set bisnew='N',denddate='"+bvo.getDenddate()+"' where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and bisnew='Y' and isnull(dr,0)=0 ";
			String sql2 = " update trtam_paiban_temp set denddate='"+bvo.getDenddate()+"' where pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"'  and isnull(dr,0)=0 ";
			
			baseDao.executeUpdate(sql);
			baseDao.executeUpdate(sql2);
		}
		
		for(ApplyBVO bvo:bvos ){
			String sql= "select * from trtam_paiban_b where isnull(dr,0)=0 and biszb='N' and pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and ddate>'"+bvo.getDenddate()+"'  and pk_bb not in (select pk_bclbid from tbm_bclb where (lbbm like '9903%' or lbbm like '9905%' or lbbm like '9906%') ) ";
			ArrayList<PanbanWeekBVO> list = (ArrayList<PanbanWeekBVO>)baseDao.executeQuery(sql, new BeanListProcessor(PanbanWeekBVO.class));
			PanbanWeekBVO[] paibanbvos = list.toArray(new PanbanWeekBVO[0]);
			
			if(paibanbvos.length >0){
				for(PanbanWeekBVO paibanvo : paibanbvos){
					try {
						String ddate = paibanvo.getDdate().toString();
						int numday = 0;
						int index = getDay(ddate);
						if(index == 1){
							numday = 7;
						}else{
							numday = index - 1;
						}
						String sql1 = "update trtam_paiban set pk_bb"+numday+" = '',vbbname"+numday+"='' where pk_paiban='"+paibanvo.getPk_paiban()+"'" ;
						baseDao.executeUpdate(sql1);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
			}
		
			String sql3 = " delete trtam_paiban_b where isnull(dr,0)=0 and biszb='N' and pk_psndoc='"+bvo.getPk_psndoc()+"' and pk_dept='"+bvo.getPk_dept_old()+"' and ddate>'"+bvo.getDenddate()+"'  and pk_bb not in (select pk_bclbid from tbm_bclb where (lbbm like '9903%' or lbbm like '9905%' or lbbm like '9906%') ) ";
			baseDao.executeUpdate(sql3);

		}
	}
	
	public int getDay(String str) throws ParseException{
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
		Date date =sdf.parse(str);
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		// 第几周
		int week = calendar.get(Calendar.WEEK_OF_MONTH);
		// 第几天，从周日开始
		int day = calendar.get(Calendar.DAY_OF_WEEK);
		return day;
	}
	public void onBoAudit(ArrayList<String> listupdate) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();
		if(listupdate != null){
			for(int i=0;i<listupdate.size();i++){
				String audmsg = listupdate.get(i);
				String[] msg = audmsg.split("@");
				
				String pk_dept = msg[0];
				String begindate1= msg[1];
				String enddate1= msg[2];
				String usertype= msg[3];
				String classtype= msg[4];
				String uploadnum= msg[5];
				Integer iuploadnum = Integer.valueOf(uploadnum);
				String vdate = begindate1+"至"+enddate1;
				
				if(classtype.equals("1")){
					if(iuploadnum >= 2){
						if(usertype.equals("HL") || usertype.equals("QT")){
							String sql = "update trtam_paiban_b set vbillstatus3='8' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
							baseDao.executeUpdate(sql);
						}else if(usertype.equals("MB")){
							String sql = "update trtam_paiban set vbillstatus2='5' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}else{
							String sql = "update trtam_paiban_b set vbillstatus1='2' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
							baseDao.executeUpdate(sql);
						}
						
					}else{
						if(usertype.equals("MB")){
							String sql = "update trtam_paiban_b set vbillstatus2='5' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
							baseDao.executeUpdate(sql);
							
						}else if(usertype.equals("HL") || usertype.equals("QT")){
							String sql = "update trtam_paiban_b set vbillstatus3='8' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
							baseDao.executeUpdate(sql);
						}else{
							String sql = "update trtam_paiban_b set vbillstatus1='2' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
							baseDao.executeUpdate(sql);
						}
					}
				}else{
					if(iuploadnum >= 2){
						if(usertype.equals("HL") || usertype.equals("QT")){
							String sql = "update trtam_paiban set vbillstatus3='8' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}else if(usertype.equals("MB")){
							String sql = "update trtam_paiban set vbillstatus2='5' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}else{
							String sql = "update trtam_paiban set vbillstatus1='2' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}
						
					}else{
						if(usertype.equals("MB")){
							String sql = "update trtam_paiban set vbillstatus2='5' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}else if(usertype.equals("HL") || usertype.equals("QT")){
							String sql = "update trtam_paiban set vbillstatus3='8' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}else{
							String sql = "update trtam_paiban set vbillstatus1='2' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
							baseDao.executeUpdate(sql);
						}
					}
				}
				
			}
			
		}
		
	}
	public void onBoUnAudit(ArrayList<String> listupdate) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();
		if(listupdate != null){
			for(int i=0;i<listupdate.size();i++){
				String audmsg = listupdate.get(i);
				String[] msg = audmsg.split("@");
				
				String pk_dept = msg[0];
				String begindate1= msg[1];
				String enddate1= msg[2];
				String usertype= msg[3];
				String classtype= msg[4];
				String vdate = begindate1+"至"+enddate1;
				
				if(classtype.equals("1")){// 值班
					if(usertype.equals("MB")){
						String sql = "update trtam_paiban_b set vbillstatus2='6' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}else if(usertype.equals("HL") || usertype.equals("QT")){
						String sql = "update trtam_paiban_b set vbillstatus3='9' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}else{
						String sql = "update trtam_paiban_b set vbillstatus1='3' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}
				}else{
					if(usertype.equals("MB")){
						String sql = "update trtam_paiban set vbillstatus2='6' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);
					}else if(usertype.equals("HL") || usertype.equals("QT")){
						String sql = "update trtam_paiban set vbillstatus3='9' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);
					}else{
						String sql = "update trtam_paiban set vbillstatus1='3' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);// 医务
					}
					
				}
				
				
			}
			
		}
	}
	public void onBoOaUpload(ArrayList<String> listupdate) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();
		if(listupdate != null){
			for(int i=0;i<listupdate.size();i++){
				String audmsg = listupdate.get(i);
				String[] msg = audmsg.split("@");
				
				String pk_dept = msg[0];
				String begindate1= msg[1];
				String enddate1= msg[2];
				String usertype= msg[3];
				String classtype= msg[4];
				String vdate = begindate1+"至"+enddate1;
				
				if(classtype.equals("1")){// 值班
					if(usertype.equals("MB")){
						String sql = "update trtam_paiban_b set vbillstatus2='4' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}else if(usertype.equals("HL") || usertype.equals("QT")){
						String sql = "update trtam_paiban_b set vbillstatus3='4' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}else{
						String sql = "update trtam_paiban_b set vbillstatus1='4' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
						baseDao.executeUpdate(sql);
					}
					
				}else{
					if(usertype.equals("MB")){
						String sql = "update trtam_paiban set vbillstatus2='4' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);
					}else if(usertype.equals("HL") || usertype.equals("QT")){
						String sql = "update trtam_paiban set vbillstatus3='4' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);
					}else{
						String sql = "update trtam_paiban set vbillstatus1='4' where pk_dept='"+pk_dept+"' and vdate='"+vdate+"'";
						baseDao.executeUpdate(sql);
					}
					
				}
				
				
			}
			
		}
	}
	public void onBoZbCommit(ArrayList<String> listupdate) throws BusinessException {
		// TODO Auto-generated method stub
		BaseDAO baseDao = new BaseDAO();
		if(listupdate != null){
			for(int i=0;i<listupdate.size();i++){
				String audmsg = listupdate.get(i);
				String[] msg = audmsg.split("@");
				
				String pk_dept = msg[0];
				String begindate1= msg[1];
				String enddate1= msg[2];
				String uploadnum= msg[3];
				
				String vdate = begindate1+"至"+enddate1;
				
				
				String sql = "update trtam_paiban_b set vbillstatus3='1',vbillstatus2='1',vbillstatus1='1',uploadnum='"+uploadnum+"' where pk_temp='"+pk_dept+"' and ddate>='"+begindate1+"' and ddate<='"+enddate1+"'";
				baseDao.executeUpdate(sql);
				
				
			}		
		}
	}
}
