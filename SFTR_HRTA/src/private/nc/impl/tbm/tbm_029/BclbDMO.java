package nc.impl.tbm.tbm_029;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.sql.*;
import java.math.*;
import java.util.*;

import nc.bs.pub.*;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.tbm.tbm_003.BlcbMutexVO;
import nc.vo.tbm.tbm_029.*;
/**
 * Bclb的DMO类。
 *
 * 创建日期：(2001-6-13)
 * @author：
 */
public class BclbDMO extends DataManageObject {
/**
 * BclbDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public BclbDMO() throws javax.naming.NamingException {
	super();
}
/**
 * BclbDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public BclbDMO(String dbName) throws javax.naming.NamingException {
	super(dbName);
}
/**
 * <p>删除母子表的所有内容。
 * <p>
 * 创建日期：(2001-6-13)
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(BclbVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "delete", new Object[]{vo});
	/*************************************************************/

	deleteItemsForHeader(((BclbHeaderVO)vo.getParentVO()).getPrimaryKey());
	deleteHeader((BclbHeaderVO)vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * <p>删除母子表的所有内容。
 * <p>
 * 创建日期：(2001-6-13)
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteBclb(BclbHeaderVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteBclb", new Object[]{vo});
	/*************************************************************/

	deleteItemsForHeader(vo.getPrimaryKey());
	deleteHeader(vo);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteBclb", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteHeader(BclbHeaderVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from tbm_bclb where pk_bclbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataDeleted("tbm_bclb",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItem(BclbItemVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from tbm_wt where pk_wtid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataDeleted("tbm_wt",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItemsForHeader(String headerKey) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/

	String sql = "delete from tbm_wt where pk_bclbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, headerKey);
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataDeleted("tbm_wt",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pd.pd1020.BclbHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
 // Added by liuhongjie 2004.03.20 根据人员PK及日期查找相应的班别信息
public BclbHeaderVO findBclbByPsnDate(String pk_psndoc,UFDate ufd_Date) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{pk_psndoc});
	/*************************************************************/

	String sql = "select pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq,   timebegintime, timeendtime, includenightshift, nightbegintime, nightendtime , allowlate, allowearly,largelate,largeearly , kghours from "
	           + " tbm_bclb inner join tbm_psncalendar on rtrim(pk_bclbid)=rtrim(pk_class) and calendar=? and pk_psndoc=? "; 

	BclbHeaderVO bclbHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1,ufd_Date.toString());
		stmt.setString(2,pk_psndoc);
		
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			bclbHeader = new BclbHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(1);
			bclbHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(2);
			bclbHeader.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(3);
			bclbHeader.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(4);
			bclbHeader.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(5);
			bclbHeader.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(6);
			bclbHeader.setMemo(memo == null ? null : memo.trim());

			// sfkq :
			Integer sfkq = (Integer)rs.getObject(7);
			bclbHeader.setSfkq(sfkq == null ? null : sfkq);
			// timebegintime :
			String timebegintime = rs.getString(8);
			bclbHeader.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(9);
			bclbHeader.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			 
			
			
			
			// includenightshift :
			String includenightshift = rs.getString(10);
			bclbHeader.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(11);
			bclbHeader.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(12);
			bclbHeader.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			
			
			
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(13);
			bclbHeader.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(14);
			bclbHeader.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(15);
			bclbHeader.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(16);
			bclbHeader.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(17);
			bclbHeader.setKghours(kghours == null ? null : new UFDouble(kghours));					
			}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{pk_psndoc});
	/*************************************************************/

	return bclbHeader;
}
/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2001-6-13)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 */
public BclbVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	BclbVO vo = new BclbVO();
	//
	BclbHeaderVO header = findHeaderByPrimaryKey(key);
	BclbItemVO[] items = null;
	if (header != null) {
		items = queryAllBclbItem(header);
	}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return vo;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pd.pd1020.BclbHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public BclbHeaderVO findHeaderByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/

	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	String sql = 
		"select pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq, timebegintime, timeendtime, " +
		"  includenightshift, nightbegintime, nightendtime, " + 
		"  allowlate, allowearly,largelate,largeearly, " + 
		"kghours,isautokg , useovertmrule, overtmbeyond, overtmruletype, " +
		"useontmrule,ontmbeyond,ontmruletype ,timebeginday,timeendday,defaultflag,isallowout,nightbeginday,nightendday,isblocked,bclbfl,overtmeffectbeyond,ontmeffectbeyond from tbm_bclb where rtrim(pk_bclbid) = ?";
	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	BclbHeaderVO bclbHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			bclbHeader = new BclbHeaderVO(key);
			// pk_corp :
			String pk_corp = rs.getString(1);
			bclbHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(2);
			bclbHeader.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(3);
			bclbHeader.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(4);
			bclbHeader.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(5);
			bclbHeader.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(6);
			bclbHeader.setMemo(memo == null ? null : memo.trim());

			// sfkq :
			Integer sfkq = (Integer)rs.getObject(7);
			bclbHeader.setSfkq(sfkq == null ? null : sfkq);
			// timebegintime :
			String timebegintime = rs.getString(8);
			bclbHeader.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(9);
			bclbHeader.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
		 
			
			
			// includenightshift :
			String includenightshift = rs.getString(10);
			bclbHeader.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(11);
			bclbHeader.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(12);
			bclbHeader.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			 
			
			
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(13);
			bclbHeader.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(14);
			bclbHeader.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(15);
			bclbHeader.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(16);
			bclbHeader.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(17);
			bclbHeader.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(18);
			bclbHeader.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			/**
			 *  Modified by Young 2005-09-22 Start
			 */
//			useovertmrule
			String useovertmrule = rs.getString(19);
			bclbHeader.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(20);
			bclbHeader.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(21);
			bclbHeader.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());		
//			//add by myl
			//useontmrule
			String useontmrule = rs.getString(22);
			bclbHeader.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(23);
			bclbHeader.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(24);
			bclbHeader.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());		
			/**
			 *  Modified by Young 2005-09-22 End
			 */
			
//			timebeginday
			Integer timebeginday = (Integer)rs.getObject(25);
			bclbHeader.setTimebeginday(timebeginday == null ? null : new Integer(timebeginday.intValue()));		
			
//			timeendday
			Integer timeendday = (Integer)rs.getObject(26);
			bclbHeader.setTimeendday(timeendday == null ? null : new Integer(timeendday.intValue()));
			//defaultflag
			String defaultflag = rs.getString(27);
			bclbHeader.setDefaultFlag(UFBoolean.valueOf(defaultflag));
			//isallowout
			String isallowout = rs.getString(28);
			bclbHeader.setIsallowout(UFBoolean.valueOf(isallowout));
			//nightbeginday
			int nightbeginday = rs.getInt(29);
			bclbHeader.setNightbeginday(nightbeginday);
			//nightendday
			int nightendday = rs.getInt(30);
			bclbHeader.setNightendday(nightendday);
			
			String isblocked = rs.getString(31);
			bclbHeader.setIsblocked(UFBoolean.valueOf(isblocked));
			
			bclbHeader.setBclbfl(rs.getString(32));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(33);
			bclbHeader.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclbHeader.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return bclbHeader;
}

public BclbHeaderVO findBclbHeaderByClassName(String className, String pkCorp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{className,pkCorp});
	/*************************************************************/

	String sql = 
		"select pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq, timebegintime, timeendtime, " +
		"  includenightshift, nightbegintime, nightendtime, " + 
		"  allowlate, allowearly,largelate,largeearly, " + 
		"kghours,isautokg , useovertmrule, overtmbeyond, overtmruletype, " +
		"useontmrule,ontmbeyond,ontmruletype ,timebeginday,timeendday,defaultflag,isallowout,nightbeginday,nightendday,pk_bclbid,isblocked,overtmeffectbeyond,ontmeffectbeyond  from tbm_bclb where rtrim(lbmc) = ? and pk_corp = ? ";
	
	BclbHeaderVO bclbHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, className);
		stmt.setString(2, pkCorp);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			bclbHeader = new BclbHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(1);
			bclbHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(2);
			bclbHeader.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(3);
			bclbHeader.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(4);
			bclbHeader.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(5);
			bclbHeader.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(6);
			bclbHeader.setMemo(memo == null ? null : memo.trim());

			// sfkq :
			Integer sfkq = (Integer)rs.getObject(7);
			bclbHeader.setSfkq(sfkq == null ? null : sfkq);
			// timebegintime :
			String timebegintime = rs.getString(8);
			bclbHeader.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(9);
			bclbHeader.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
		 
			
			
			// includenightshift :
			String includenightshift = rs.getString(10);
			bclbHeader.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(11);
			bclbHeader.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(12);
			bclbHeader.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			 
			
			
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(13);
			bclbHeader.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(14);
			bclbHeader.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(15);
			bclbHeader.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(16);
			bclbHeader.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(17);
			bclbHeader.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(18);
			bclbHeader.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			/**
			 *  Modified by Young 2005-09-22 Start
			 */
//			useovertmrule
			String useovertmrule = rs.getString(19);
			bclbHeader.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(20);
			bclbHeader.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(21);
			bclbHeader.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());		
//			//add by myl
			//useontmrule
			String useontmrule = rs.getString(22);
			bclbHeader.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(23);
			bclbHeader.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(24);
			bclbHeader.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());		
			/**
			 *  Modified by Young 2005-09-22 End
			 */
			
//			timebeginday
			Integer timebeginday = (Integer)rs.getObject(25);
			bclbHeader.setTimebeginday(timebeginday == null ? null : new Integer(timebeginday.intValue()));		
			
//			timeendday
			Integer timeendday = (Integer)rs.getObject(26);
			bclbHeader.setTimeendday(timeendday == null ? null : new Integer(timeendday.intValue()));
			//defaultflag
			String defaultflag = rs.getString(27);
			bclbHeader.setDefaultFlag(UFBoolean.valueOf(defaultflag));
			//isallowout
			String isallowout = rs.getString(28);
			bclbHeader.setIsallowout(UFBoolean.valueOf(isallowout));
			//nightbeginday
			int nightbeginday = rs.getInt(29);
			bclbHeader.setNightbeginday(nightbeginday);
			//nightendday
			int nightendday = rs.getInt(30);
			bclbHeader.setNightendday(nightendday);
			
			// lbbm :
			String pk_bclbid = rs.getString(31);
			bclbHeader.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			
			String isblocked = rs.getString(32);
			bclbHeader.setIsblocked(UFBoolean.valueOf(isblocked));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(33);
			bclbHeader.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclbHeader.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findHeaderByPrimaryKey", new Object[]{className,pkCorp});
	/*************************************************************/

	return bclbHeader;
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pd.pd1020.BclbItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public BclbItemVO findItemByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_corp, gcbm, pk_bclbid, kssj, jssj,timeid,ksto,jsto,wtbeginday,wtendday,kstoday,jstoday from tbm_wt where pk_wtid = ?";

	BclbItemVO bclbItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			bclbItem = new BclbItemVO(key);
			// pk_corp :
			String pk_corp = rs.getString(1);
			bclbItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(2);
			bclbItem.setGcbm(gcbm == null ? null : gcbm.trim());
			// pk_bclbid :
			String pk_bclbid = rs.getString(3);
			bclbItem.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// kssj :
			String kssj = rs.getString(4);
			bclbItem.setKssj(kssj == null ? null : kssj.trim());
			// jssj :
			String jssj = rs.getString(5);
			bclbItem.setJssj(jssj == null ? null : jssj.trim());
			 
			Integer timeid = (Integer)rs.getObject(6);
			bclbItem.setTimeid(timeid == null ? null : timeid);
			// ksto :
			String ksto = rs.getString(7);
			bclbItem.setKsto(ksto == null ? null : ksto.trim());
			// jsto :
			String jsto = rs.getString(8);
			bclbItem.setJsto(ksto == null ? null : jsto.trim());
            // wtbeginday :
            int wtbeginday = rs.getInt(9);
            bclbItem.setWtbeginday(wtbeginday);
            // wtendday :
            int wtendday = rs.getInt(10);
            bclbItem.setWtendday(wtendday);
            // kstoday :
            int kstoday = rs.getInt(11);
            bclbItem.setKstoday(kstoday);
            // jstoday :
            int jstoday = rs.getInt(12);
            bclbItem.setJstoday(jstoday);
			
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return bclbItem;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pd.pd1020.BclbItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public BclbItemVO[] findItemsForHeader(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "findItemsForHeader", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_wtid, pk_corp, gcbm, pk_bclbid, kssj, jssj,timeid,ksto,jsto,wtbeginday,wtendday,kstoday,jstoday from tbm_wt where rtrim(pk_bclbid) = ? and dr = 0 order by timeid ";

	BclbItemVO[] bclbItems = null;
	Vector<BclbItemVO> v = new Vector<BclbItemVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			BclbItemVO bclbItem = new BclbItemVO();
			//
			String pk_wtid = rs.getString(1);
			bclbItem.setPk_wtid(pk_wtid == null ? null : pk_wtid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			bclbItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclbItem.setGcbm(gcbm == null ? null : gcbm.trim());
			// pk_bclbid :
			String pk_bclbid = rs.getString(4);
			bclbItem.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// kssj :
			String kssj = rs.getString(5);
			bclbItem.setKssj(kssj == null ? null : kssj.trim());
			// jssj :
			String jssj = rs.getString(6);
			bclbItem.setJssj(jssj == null ? null : jssj.trim());
			 
			//Timeid
			Integer timeid = (Integer)rs.getObject(7);
			bclbItem.setTimeid(timeid == null ? null : timeid);
			// ksto :
			String ksto = rs.getString(8);
			bclbItem.setKsto(ksto == null ? null : ksto.trim());
			// jsto :
			String jsto = rs.getString(9);
			bclbItem.setJsto(jsto == null ? null : jsto.trim());
            // wtbeginday :
            int wtbeginday = rs.getInt(10);
            bclbItem.setWtbeginday(wtbeginday);
            // wtendday :
            int wtendday = rs.getInt(11);
            bclbItem.setWtendday(wtendday);
            // kstoday :
            int kstoday = rs.getInt(12);
            bclbItem.setKstoday(kstoday);
            // jstoday :
            int jstoday = rs.getInt(13);
            bclbItem.setJstoday(jstoday);
			
			v.addElement(bclbItem);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbItems = new BclbItemVO[v.size()];
	if (v.size() > 0){
		v.copyInto(bclbItems);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "findItemsForHeader", new Object[]{key});
	/*************************************************************/

	return bclbItems;
}
/**
 * <p>将VO插入母子表。
 * <p>
 * 创建日期：(2001-6-13)
 * @param vo nc.vo.pd.pd1020.BclbVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(BclbVO vo) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "insert", new Object[]{vo});
	/*************************************************************/

	if (((BclbHeaderVO) vo.getParentVO()).getDefaultFlag()!=null && ((BclbHeaderVO) vo.getParentVO()).getDefaultFlag().booleanValue()){
		//如果将一个班别设为默认班别
		updateHeaderForDefault((BclbHeaderVO) vo.getParentVO());
	}
	
	// 插入表头：
	String key = insertHeader((BclbHeaderVO) vo.getParentVO());
	// 插入表体各项：
	BclbItemVO[] items = (BclbItemVO[]) vo.getChildrenVO();
	for ( int i = 0; i < items.length; i++ ) {
		insertItem(items[i], key);
	}
	
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "insert", new Object[]{vo});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2001-6-13)
 * @param node nc.vo.pd.pd1020.BclbHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertHeader(BclbHeaderVO bclbHeader) throws java.sql.SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "insertHeader", new Object[]{bclbHeader});
	/*************************************************************/

	/**
	 *  Modified by Young 2005-09-22 Start
	 *  Modified by 刘鹏飞 2011-04-25 Start 新增最后一个变量
	 */
	String sql = 
		"insert into tbm_bclb(pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo, sfkq," + 
		"timebegintime, timeendtime, includenightshift, nightbegintime, " + 
		"nightendtime, allowlate, allowearly,largelate,largeearly," + 
		"kghours,isautokg, useovertmrule,overtmbeyond,overtmruletype," +
		"useontmrule,ontmbeyond,ontmruletype,defaultFlag,timebeginday,timeendday,isallowout,nightbeginday,nightendday,nightgzsj,isblocked,bclbfl,overtmeffectbeyond,ontmeffectbeyond,iscancel,pk_dd,pk_bbz,lbjc,pk_bbmb ) values" + 
		"(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		key = getOID(bclbHeader.getPk_corp());
		stmt.setString(1, key);
		// set non PK fields:
		if (bclbHeader.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, bclbHeader.getPk_corp());
		}
		if (bclbHeader.getGcbm() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, bclbHeader.getGcbm());
		}
		if (bclbHeader.getLbbm() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, bclbHeader.getLbbm());
		}
		if (bclbHeader.getLbmc() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, bclbHeader.getLbmc());
		}
		if (bclbHeader.getGzsj() == null) {
			stmt.setNull(6, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(6, bclbHeader.getGzsj().toBigDecimal());
		}
		if (bclbHeader.getMemo() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, bclbHeader.getMemo());
		}
		if (bclbHeader.getSfkq() == null) {
			stmt.setNull(8, Types.INTEGER);
		}
		else {
			stmt.setInt(8, bclbHeader.getSfkq().intValue());
		}
		//Add
		if (bclbHeader.getTimebegintime() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, bclbHeader.getTimebegintime());
		}
		if (bclbHeader.getTimeendtime() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, bclbHeader.getTimeendtime());
		}
		if (bclbHeader.getIncludenightshift() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, bclbHeader.getIncludenightshift().toString());
		}
		if (bclbHeader.getNightbegintime() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, bclbHeader.getNightbegintime());
		}
		if (bclbHeader.getNightendtime() == null) {
			stmt.setNull(13, Types.CHAR);
		}
		else {
			stmt.setString(13, bclbHeader.getNightendtime());
		}
		 
		if (bclbHeader.getAllowlate() == null) {
			stmt.setNull(14, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(14, bclbHeader.getAllowlate().toBigDecimal());
		}
		if (bclbHeader.getAllowearly() == null) {
			stmt.setNull(15, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(15, bclbHeader.getAllowearly().toBigDecimal());
		}
		if (bclbHeader.getLargelate() == null) {
			stmt.setNull(16, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(16, bclbHeader.getLargelate().toBigDecimal());
		}
		if (bclbHeader.getLargeearly() == null) {
			stmt.setNull(17, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(17, bclbHeader.getLargeearly().toBigDecimal());
		}		
		//
		if (bclbHeader.getKghours() == null) {
			stmt.setNull(18, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(18, bclbHeader.getKghours().toBigDecimal());
		}
		//	
		if (bclbHeader.getIsautokg() == null) {
			stmt.setNull(19, Types.CHAR);
		}
		else {
			stmt.setString(19, bclbHeader.getIsautokg());
		}
		
		/**
		 *  Modified by Young 2005-09-22 Start
		 */
		if (bclbHeader.getUseovertmrule() == null) {
			stmt.setNull(20, Types.CHAR);
		}
		else {
			stmt.setString(20, bclbHeader.getUseovertmrule().toString());
		}
		if (bclbHeader.getOvertmbeyond() == null) {
			stmt.setNull(21, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(21, bclbHeader.getOvertmbeyond().toBigDecimal());
		}
		if (bclbHeader.getOvertmruletype() == null) {
			stmt.setNull(22, Types.CHAR);
		}
		else {
			stmt.setString(22, bclbHeader.getOvertmruletype().toString());
		}
//		add by myl 
		if (bclbHeader.getUseontmrule() == null) {
			stmt.setNull(23, Types.CHAR);
		}
		else {
			stmt.setString(23, bclbHeader.getUseontmrule().toString());
		}
		if (bclbHeader.getOntmbeyond() == null) {
			stmt.setNull(24, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(24, bclbHeader.getOntmbeyond().toBigDecimal());
		}
		if (bclbHeader.getOntmruletype() == null) {
			stmt.setNull(25, Types.CHAR);
		}
		else {
			stmt.setString(25, bclbHeader.getOntmruletype().toString());
		}
		if (bclbHeader.getDefaultFlag() == null) {
			stmt.setNull(26, Types.CHAR);
		}
		else {
			stmt.setString(26, bclbHeader.getDefaultFlag().toString());
		}
		/**
		 *  Modified by Young 2005-09-22 End
		 */		
		
		if (bclbHeader.getTimebeginday() == null) {
			stmt.setNull(27, Types.INTEGER);
		}
		else {
			stmt.setInt(27, bclbHeader.getTimebeginday().intValue());
		}
		
		if (bclbHeader.getTimeendday() == null) {
			stmt.setNull(28, Types.INTEGER);
		}
		else {
			stmt.setInt(28, bclbHeader.getTimeendday().intValue());
		}
		
		if (bclbHeader.getIsallowout() == null) {
			stmt.setNull(29, Types.CHAR);
		}
		else {
			stmt.setString(29, bclbHeader.getIsallowout().toString());
		}
		
		if (bclbHeader.getNightbeginday() == null) {
			stmt.setNull(30, Types.INTEGER);
		}
		else {
			stmt.setInt(30, bclbHeader.getNightbeginday().intValue());
		}
		
		if (bclbHeader.getNightendday() == null) {
			stmt.setNull(31, Types.INTEGER);
		}
		else {
			stmt.setInt(31, bclbHeader.getNightendday().intValue());
		}
		if (bclbHeader.getNightgzsj() == null) {
			stmt.setNull(32, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(32, bclbHeader.getNightgzsj().toBigDecimal());
		}
		if (bclbHeader.getIsblocked() == null) {
			stmt.setNull(33, Types.CHAR);
		}
		else {
			stmt.setString(33, bclbHeader.getIsblocked().toString());
		}
		if (bclbHeader.getBclbfl() == null) {
			stmt.setNull(34, Types.CHAR);
		}
		else {
			stmt.setString(34, bclbHeader.getBclbfl());
		}
		if (bclbHeader.getOvertmeffectbeyond() == null) {
			stmt.setNull(35, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(35, bclbHeader.getOvertmeffectbeyond().toBigDecimal());
		}
		if (bclbHeader.getOntmeffectbeyond() == null) {
			stmt.setNull(36, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(36, bclbHeader.getOntmeffectbeyond().toBigDecimal());
		}
		
		//new 刘鹏飞 2011-04-25
		if (bclbHeader.getIscancel() == null) {
			stmt.setNull(37, Types.CHAR);
		}
		else {
			stmt.setString(37, bclbHeader.getIscancel().toString());
		}//end
		if (bclbHeader.getPk_dd() == null) {
			stmt.setNull(38, Types.CHAR);
		}
		else {
			stmt.setString(38, bclbHeader.getPk_dd());
		}//en
		if (bclbHeader.getPk_bbz() == null) {
			stmt.setNull(39, Types.CHAR);
		}
		else {
			stmt.setString(39, bclbHeader.getPk_bbz());
		}//en
		if (bclbHeader.getLbjc() == null) {
			stmt.setNull(40, Types.CHAR);
		}
		else {
			stmt.setString(40, bclbHeader.getLbjc());
		}//en
		
		if (bclbHeader.getPk_bbmb() == null) {
			stmt.setNull(41, Types.CHAR);
		}
		else {
			stmt.setString(41, bclbHeader.getPk_bbmb());
		}
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataInserted("tbm_bclb",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "insertHeader", new Object[]{bclbHeader});
	/*************************************************************/

	return key;
}

public void updateBlcbMutex(String pkBclbHeaderVO,BlcbMutexVO[] blcbMutexVOs) throws java.sql.SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.impl.tbm.tbm_029.BclbDMO", "updateBlcbMutex", new Object[]{pkBclbHeaderVO,blcbMutexVOs});
	/*************************************************************/

	String sql = "insert into tbm_blcbmutex(pk_blcbmutexid, pk_corp, firstblcbid, firstblcbname, nextblcbid, nextblcbname, mutextime) values(?,?,?,?,?,?,?)";
	String sql2 = "delete from tbm_blcbmutex where (firstblcbid = ? or nextblcbid = ?)";
	
	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		
		stmt = con.prepareStatement(sql2);
		stmt.setString(1, pkBclbHeaderVO);
		stmt.setString(2, pkBclbHeaderVO);
		stmt.executeUpdate();
		
		if (blcbMutexVOs != null && blcbMutexVOs.length >0){
			keys = getOIDs(blcbMutexVOs.length);
			stmt = con.prepareStatement(sql);
			for (int i = 0; i < blcbMutexVOs.length; i++) {
				
				stmt.setString(1, keys[i]);
				if (blcbMutexVOs[i].getPk_corp() == null) {
					stmt.setNull(2, Types.CHAR);
				}
				else {
					stmt.setString(2, blcbMutexVOs[i].getPk_corp());
				}
				if (blcbMutexVOs[i].getFirstblcbid() == null) {
					stmt.setNull(3, Types.CHAR);
				}
				else {
					stmt.setString(3, blcbMutexVOs[i].getFirstblcbid());
				}
				if (blcbMutexVOs[i].getFirstblcbname() == null) {
					stmt.setNull(4, Types.CHAR);
				}
				else {
					stmt.setString(4, blcbMutexVOs[i].getFirstblcbname());
				}
				if (blcbMutexVOs[i].getNextblcbid() == null) {
					stmt.setNull(5, Types.CHAR);
				}
				else {
					stmt.setString(5, blcbMutexVOs[i].getNextblcbid());
				}
				if (blcbMutexVOs[i].getNextblcbname() == null) {
					stmt.setNull(6, Types.CHAR);
				}
				else {
					stmt.setString(6, blcbMutexVOs[i].getNextblcbname());
				}
				if (blcbMutexVOs[i].getMutextime() == null) {
					//stmt.setNull(7, Types.INTEGER);
					stmt.setInt(7, 0);
				}
				else {
					stmt.setInt(7, blcbMutexVOs[i].getMutextime().intValue());
				}
				stmt.addBatch();
			}
			stmt.executeBatch(); 
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.impl.tbm.tbm_029.BclbDMO", "updateBlcbMutex", new Object[]{pkBclbHeaderVO,blcbMutexVOs});
	/*************************************************************/

}

/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2001-6-6)
 * @param node nc.vo.pd.pd1020.BclbItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItem(BclbItemVO bclbItem)
	throws java.sql.SQLException{
	if (bclbItem.getKssj() == null || bclbItem.getKssj().length() != 8)
		return "";
	if (bclbItem.getJssj() == null || bclbItem.getJssj().length() != 8)
		return "";

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.pd.pd1020.BclbDMO",
		"insertItem",
		new Object[] { bclbItem });
	/*************************************************************/

	/**
	 *   Modified by Young 2005-07-20 Start
	 *   
	 *   alter by zhoulan  增加字段zsts
	 */
	String sql =
		"insert into tbm_wt(pk_wtid, pk_corp, gcbm, pk_bclbid, kssj, jssj, " + 
		"timeid, ksto, jsto, checkInFlag, checkoutFlag,wtbeginday,wtendday,kstoday,jstoday,wtresttime,zsts) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
	/**
	 *   Modified by Young 2005-07-20 End
	 */
	
	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		key = getOID(bclbItem.getPk_corp());
		stmt.setString(1, key);
		// set non PK fields:
		if (bclbItem.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, bclbItem.getPk_corp());
		}
		if (bclbItem.getGcbm() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, bclbItem.getGcbm());
		}
		if (bclbItem.getPk_bclbid() == null) {
			stmt.setNull(4, Types.CHAR);
		} else {
			stmt.setString(4, bclbItem.getPk_bclbid());
		}
		if (bclbItem.getKssj() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, bclbItem.getKssj());
		}
		if (bclbItem.getJssj() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, bclbItem.getJssj());
		}
		 
		//Add
		if (bclbItem.getTimeid() == null) {
			stmt.setNull(7, Types.INTEGER);
		}
		else {
			stmt.setInt(7, bclbItem.getTimeid().intValue());
		}
		

		/**
		 *   Added by Young 2005-07-20  Start
		 */
		if (bclbItem.getKsto() == null){
			stmt.setNull(8, Types.CHAR);
		}else{
			stmt.setString(8, bclbItem.getKsto().toString());
		}

		if (bclbItem.getJsto()==null){
			stmt.setNull(9, Types.CHAR);
		}else{
			stmt.setString(9, bclbItem.getJsto().toString());
		}
		/**
		 *   Added by Young 2005-07-20  End
		 */
		
		if (bclbItem.getCheckInFlag()==null){
			stmt.setNull(10, Types.CHAR);
		}else{
			stmt.setString(10, bclbItem.getCheckInFlag().toString());
		}
		if (bclbItem.getCheckoutFlag()==null){
			stmt.setNull(11, Types.CHAR);
		}else{
			stmt.setString(11, bclbItem.getCheckoutFlag().toString());
		}
		
		if (bclbItem.getWtbeginday() == null) {
			stmt.setNull(12, Types.INTEGER);
		}
		else {
			stmt.setInt(12, bclbItem.getWtbeginday().intValue());
		}
		
		if (bclbItem.getWtendday() == null) {
			stmt.setNull(13, Types.INTEGER);
		}
		else {
			stmt.setInt(13, bclbItem.getWtendday().intValue());
		}
		if (bclbItem.getKstoday() == null) {
			stmt.setNull(14, Types.INTEGER);
		}
		else {
			stmt.setInt(14, bclbItem.getKstoday().intValue());
		}
		if (bclbItem.getJstoday() == null) {
			stmt.setNull(15, Types.INTEGER);
		}
		else {
			stmt.setInt(15, bclbItem.getJstoday().intValue());
		}
		
		if (bclbItem.getWtresttime() == null) {
			stmt.setNull(16, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(16, new UFDouble(bclbItem.getWtresttime()).toBigDecimal());
		}
		
		//zhoulan add -----beg-----功能实现 增加字段（折算天数）-----------
		if(bclbItem.getZsts() == null){
			stmt.setNull(17, Types.DOUBLE);
		}
		else {
			stmt.setDouble(17, bclbItem.getZsts().toDouble());
		}
		//----zhoulan------------end
		
		//
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	nc.bs.bd.cache.CacheProxy.fireDataInserted("tbm_wt",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.pd.pd1020.BclbDMO",
		"insertItem",
		new Object[] { bclbItem });
	/*************************************************************/

	return key;
}
/**
 * <p>向数据库插入一个VO对象。
 * <p>
 * 创建日期：(2001-6-13)
 * @param BclbItem nc.vo.pd.pd1020.BclbItemVO
 * @param foreignKey String
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItem(BclbItemVO bclbItem, String foreignKey) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "insertItem", new Object[]{bclbItem, foreignKey});
	/*************************************************************/

	bclbItem.setPk_bclbid(foreignKey);
	String key = insertItem(bclbItem);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "insertItem", new Object[]{bclbItem, foreignKey});
	/*************************************************************/

	return key;
}
	/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-4)
 * @return nc.vo.pd.pd1020.BclbVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public BclbHeaderVO[] queryAllBclbHeader(String pk_corp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	String sql = "";
	
	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	sql = 
		"select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq,timebegintime, " + 
		"timeendtime,  includenightshift, nightbegintime, nightendtime, " + 
		"  allowlate, allowearly,largelate,largeearly," +
		"useovertmrule,overtmbeyond,overtmruletype,useontmrule,ontmbeyond,ontmruletype,defaultFlag,"+
		"timebeginday,timeendday, nightbeginday, nightendday, isallowout,nightgzsj,isblocked,overtmeffectbeyond,ontmeffectbeyond ,pk_dd,pk_bbz,lbjc,pk_bbmb  " + 
		"from tbm_bclb where pk_corp = '"+pk_corp+"' and dr = 0 order by lbmc ";

	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	BclbHeaderVO bclbs[] = null;
	Vector<BclbHeaderVO> v = new Vector<BclbHeaderVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			BclbHeaderVO bclb = new BclbHeaderVO();
			// pk_bclbid :
			String pk_bclbid = rs.getString(1);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// pk_corp :
			String pk_corp2 = rs.getString(2);
			bclb.setPk_corp(pk_corp2 == null ? null : pk_corp2.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			//SFKQ
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : new Integer(sfkq.intValue()));
			//Add
			// timebegintime :
			String timebegintime = rs.getString(9);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(10);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			 
			// includenightshift :
			String includenightshift = rs.getString(11);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(12);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(13);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			 

			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(14);
			bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(15);
			bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(16);
			bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(17);
			bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			//// kghours :
			//BigDecimal kghours = (BigDecimal)rs.getObject(21);
			//bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
			////isautokg
			//String isautokg = rs.getString(22);
			//bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			/**
			 *  Modified by Young 2005-09-22 Start
			 */
//			useovertmrule
			String useovertmrule = rs.getString(18);
			bclb.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(19);
			bclb.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(20);
			bclb.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());
			//add by myl
			//useontmrule
			String useontmrule = rs.getString(21);
			bclb.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(22);
			bclb.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(23);
			bclb.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());

			/**
			 *  Modified by Young 2005-09-22 End
			 */
			String defaultFlag = rs.getString(24);
			bclb.setDefaultFlag(defaultFlag == null ? null : UFBoolean.valueOf(defaultFlag.trim()));

			// timebeginday :
			int timebeginday = rs.getInt(25);
			bclb.setTimebeginday(timebeginday);
			// timeendday :
			int timeendday = rs.getInt(26);
			bclb.setTimeendday(timeendday);
			// nightbeginday :
			int nightbeginday = rs.getInt(27);
			bclb.setNightbeginday(nightbeginday);
			// nightendday :
			int nightendday = rs.getInt(28);
			bclb.setNightendday(nightendday);
			// isallowout :
			String isallowout = rs.getString(29);
			bclb.setIsallowout(isallowout==null?UFBoolean.TRUE:UFBoolean.valueOf(isallowout));
			
			BigDecimal nightgzsj = (BigDecimal)rs.getObject(30);
			bclb.setNightgzsj(nightgzsj == null ? null : new UFDouble(nightgzsj));
			
			String isblocked = rs.getString(31);
			bclb.setIsblocked(isblocked==null?UFBoolean.TRUE:UFBoolean.valueOf(isblocked));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(32);
			bclb.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(33);
			bclb.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			String pk_dd = rs.getString(34);
			bclb.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(35);
			bclb.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(36);
			bclb.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(37);
			bclb.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());
			v.addElement(bclb);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbs = new BclbHeaderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(bclbs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	return bclbs;
}

/**
 * 查询集团中预设的预置班别
 * @return
 * @throws SQLException
 */
public BclbHeaderVO queryPresetBclbHeader() throws SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryPresetBclbHeader", new Object[]{});
	/*************************************************************/
	
	 String sql = 
		"select pk_corp, gcbm, pk_bclbid, lbbm, lbmc, gzsj, memo,sfkq,timebeginday, timebegintime," + 
		"timeendday,timeendtime, includenightshift, nightbeginday, nightbegintime,nightendday,nightendtime, " + 
		" allowlate, largelate,  allowearly,  largeearly, " + 
		"isautokg,kghours,useovertmrule,overtmbeyond,overtmruletype,useontmrule,ontmbeyond,"+
		"ontmruletype,defaultflag ,isallowout,isblocked,overtmeffectbeyond,ontmeffectbeyond,pk_dd,pk_bbz,lbjc,pk_bbmb   " + 
		"from tbm_bclb where pk_corp = '@@@@' and defaultflag = 'Y' and dr = 0 order by lbmc ";

	BclbHeaderVO bclb = new BclbHeaderVO();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			// pk_corp :
			String pk_corp = rs.getString(1);
			bclb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(2);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// pk_bclbid :
			String pk_bclbid = rs.getString(3);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			//SFKQ
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : new Integer(sfkq.intValue()));
			 //timebeginday
			Integer timebeginday = (Integer)rs.getObject(9);
			bclb.setTimebeginday(timebeginday == null ? null : new Integer(timebeginday.intValue()));
			// timebegintime :
			String timebegintime = rs.getString(10);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			//timeendday
			Integer timeendday = (Integer)rs.getObject(11);
			bclb.setTimeendday(timeendday == null ? null : new Integer(timeendday.intValue()));
			// timeendtime :
			String timeendtime = rs.getString(12);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
		 
			// includenightshift :
			String includenightshift = rs.getString(13);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			//nightbeginday
			Integer nightbeginday = (Integer)rs.getObject(14);
			bclb.setNightbeginday(nightbeginday == null ? null : new Integer(nightbeginday.intValue()));
			// nightbegintime :
			String nightbegintime = rs.getString(15);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			//nightendday
			Integer nightendday = (Integer)rs.getObject(16);
			bclb.setNightendday(nightendday == null ? null : new Integer(nightendday.intValue()));
			// nightendtime :
			String nightendtime = rs.getString(17);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());

			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(18);
			bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(19);
			bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(20);
			bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(21);
			bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			//isautokg
			String isautokg = rs.getString(22);
			bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(23);
			bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
			
//			useovertmrule
			String useovertmrule = rs.getString(24);
			bclb.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(25);
			bclb.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(26);
			bclb.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());

			//add by myl
			//useontmrule
			String useontmrule = rs.getString(27);
			bclb.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(28);
			bclb.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(29);
			bclb.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());

			String defaultFlag = rs.getString(30);
			bclb.setDefaultFlag(defaultFlag == null ? null : UFBoolean.valueOf(defaultFlag.trim()));

			// isallowout :
			String isallowout = rs.getString(31);
			bclb.setIsallowout(isallowout == null ? null : UFBoolean.valueOf(isallowout.trim()));
			
			String isblocked = rs.getString(32);
			bclb.setIsblocked(isblocked == null ? null : UFBoolean.valueOf(isblocked.trim()));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(33);
			bclb.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclb.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			String pk_dd = rs.getString(35);
			bclb.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(36);
			bclb.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(37);
			bclb.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(38);
			bclb.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());

		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryPresetBclbHeader", new Object[]{});
	/*************************************************************/

	return bclb;
}

/**
 * 查询是否有满足条件的记录
 * @return
 * @throws SQLException
 */
public boolean isHadRecord(String whereSql) throws SQLException{

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "isHadRecord", new Object[]{whereSql});
	/*************************************************************/
	 String sql = 
		"select 1 from tbm_bclb where dr = 0 and " + whereSql;

	Connection con = null;
	PreparedStatement stmt = null;
	boolean result = false;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			result = true;
		}
		
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "isHadRecord", new Object[]{whereSql});
	/*************************************************************/
	return result;
}


/**
 * 查询公司中的默认班别
 * @param pkCorp
 * @return BclbHeaderVO
 * @throws SQLException
 */
public BclbHeaderVO queryDefaultBclbHeader(String pkCorp) throws SQLException{


	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryDefaultBclbHeader", new Object[]{pkCorp});
	/*************************************************************/

	String sql = "";
	
	sql = 
		"select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq,timebegintime, " + 
		"timeendtime, includenightshift, nightbegintime, nightendtime, " + 
		" allowlate, allowearly,  largelate,  largeearly, " + 
		"kghours,isautokg,useovertmrule,overtmbeyond,overtmruletype,useontmrule,ontmbeyond,"+
		"ontmruletype,defaultFlag,timebeginday,timeendday, nightbeginday, nightendday, isallowout,isblocked,overtmeffectbeyond,ontmeffectbeyond,pk_dd,pk_bbz,lbjc,pk_bbmb    " + 
		"from tbm_bclb where pk_corp = '" + pkCorp + "' and defaultFlag = 'Y' and dr = 0 order by lbmc ";

	BclbHeaderVO bclb = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			bclb = new BclbHeaderVO();
			// pk_bclbid :
			String pk_bclbid = rs.getString(1);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			bclb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			//SFKQ
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : new Integer(sfkq.intValue()));
			//v.addElement(bclb);
			//Add
			// timebegintime :
			String timebegintime = rs.getString(9);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(10);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
		 
			// includenightshift :
			String includenightshift = rs.getString(11);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(12);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(13);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			 

			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(14);
			bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(15);
			bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(16);
			bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(17);
			bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(18);
			bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(19);
			bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
//			useovertmrule
			String useovertmrule = rs.getString(20);
			bclb.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(21);
			bclb.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(22);
			bclb.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());

			//add by myl
			//useontmrule
			String useontmrule = rs.getString(23);
			bclb.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(24);
			bclb.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(25);
			bclb.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());

			String defaultFlag = rs.getString(26);
			bclb.setDefaultFlag(defaultFlag == null ? null : UFBoolean.valueOf(defaultFlag.trim()));

			// timebeginday :
			int timebeginday = rs.getInt(27);
			bclb.setTimebeginday(timebeginday);
			// timeendday :
			int timeendday = rs.getInt(28);
			bclb.setTimeendday(timeendday);
			// nightbeginday :
			int nightbeginday = rs.getInt(29);
			bclb.setNightbeginday(nightbeginday);
			// nightendday :
			int nightendday = rs.getInt(30);
			bclb.setNightendday(nightendday);
			// isallowout :
			String isallowout = rs.getString(31);
			bclb.setIsallowout(isallowout==null?UFBoolean.TRUE:UFBoolean.valueOf(isallowout));
			
			String isblocked = rs.getString(32);
			bclb.setIsblocked(isblocked==null?UFBoolean.TRUE:UFBoolean.valueOf(isblocked));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(33);
			bclb.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclb.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			String pk_dd = rs.getString(35);
			bclb.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(36);
			bclb.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(37);
			bclb.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(38);
			bclb.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());
			
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryDefaultBclbHeader", new Object[]{pkCorp});
	/*************************************************************/

	return bclb;
}


/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-6-4)
 * @return nc.vo.pd.pd1020.BclbVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public BclbHeaderVO[] queryAllBclbHeader(String unitCode,String gcbmid) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{unitCode});
	/*************************************************************/

	String sql = "";
	
	/**
	 *  Modified by Young 2005-09-22 Start
	 *  Modified by 刘鹏飞 2011-04-25 Start 新增iscancel变量
	 */
	sql = 
		"select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq,timebegintime, " + 
		"timeendtime, includenightshift, nightbegintime, nightendtime, " + 
		" allowlate, allowearly,  largelate,  largeearly, " + 
		"kghours,isautokg,useovertmrule,overtmbeyond,overtmruletype,useontmrule,ontmbeyond,"+
		"ontmruletype,defaultFlag,timebeginday,timeendday,isallowout,nightbeginday,nightendday,isblocked,bclbfl,overtmeffectbeyond,ontmeffectbeyond,iscancel,pk_dd,pk_bbz,lbjc,pk_bbmb  " + 
		"from tbm_bclb where pk_corp = '"+unitCode+"' and dr = 0";
	
	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	if(gcbmid==null || gcbmid.equals("")) 
		//sql=sql+" and gcbm is null ";
		;
	else
		sql=sql+ " and gcbm= '"+gcbmid+"'";
	
	sql = sql +" order by lbbm asc ";

	BclbHeaderVO bclbs[] = null;
	Vector<BclbHeaderVO> v = new Vector<BclbHeaderVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			BclbHeaderVO bclb = new BclbHeaderVO();
			// pk_bclbid :
			String pk_bclbid = rs.getString(1);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			bclb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			//SFKQ
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : new Integer(sfkq.intValue()));
			//Add
			// timebegintime :
			String timebegintime = rs.getString(9);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(10);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			 
			// includenightshift :
			String includenightshift = rs.getString(11);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(12);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(13);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());
		 
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(14);
			bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(15);
			bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(16);
			bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(17);
			bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(18);
			bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(19);
			bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			/**
			 *  Modified by Young 2005-09-22 Start
			 */
//			useovertmrule
			String useovertmrule = rs.getString(20);
			bclb.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(21);
			bclb.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(22);
			bclb.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());

			//add by myl
			//useontmrule
			String useontmrule = rs.getString(23);
			bclb.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(24);
			bclb.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(25);
			bclb.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());

			/**
			 *  Modified by 刘鹏飞 2011-04-25 End
			 */
			String iscancel = rs.getString("iscancel");
			bclb.setIscancel(iscancel == null ? null : UFBoolean.valueOf(iscancel.trim()));
			//end
			
			/**
			 *  Modified by Young 2005-09-22 End
			 */
			String defaultFlag = rs.getString("defaultFlag");
			bclb.setDefaultFlag(defaultFlag == null ? null : UFBoolean.valueOf(defaultFlag.trim()));
			
			Integer timebeginday = (Integer)rs.getObject(27);
			bclb.setTimebeginday(timebeginday == null ? null : timebeginday);
			
			Integer timeendday = (Integer)rs.getObject(28);
			bclb.setTimeendday(timeendday == null ? null : timeendday);
			
			String isallowout = rs.getString(29);
			bclb.setIsallowout(isallowout == null ? null : UFBoolean.valueOf(isallowout.trim()));
			
			Integer nightbeginday = (Integer)rs.getObject(30);
			bclb.setNightbeginday(nightbeginday == null ? null : nightbeginday);
			
			Integer nightendday = (Integer)rs.getObject(31);
			bclb.setNightendday(nightendday == null ? null : nightendday);
			
			String isblocked = rs.getString(32);
			bclb.setIsblocked(isblocked == null ? null : UFBoolean.valueOf(isblocked.trim()));
			
			//add by caizl
			String bclbfl = rs.getString(33);
			bclb.setBclbfl(bclbfl == null ? null : bclbfl);
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclb.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(35);
			bclb.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			String pk_dd = rs.getString(37);
			bclb.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(38);
			bclb.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(39);
			bclb.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(40);
			bclb.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());
			
			v.addElement(bclb);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbs = new BclbHeaderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(bclbs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{unitCode});
	/*************************************************************/

	return bclbs;
}
//刘鹏飞新增，只新增sql变量
public BclbHeaderVO[] queryAllBclbHeaderBySqlWhe(String unitCode,String gcbmid,String sqlwhe) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{unitCode});
	/*************************************************************/

	String sql = "";
	
	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	sql = 
		"select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo,sfkq,timebegintime, " + 
		"timeendtime, includenightshift, nightbegintime, nightendtime, " + 
		" allowlate, allowearly,  largelate,  largeearly, " + 
		"kghours,isautokg,useovertmrule,overtmbeyond,overtmruletype,useontmrule,ontmbeyond,"+
		"ontmruletype,defaultFlag,timebeginday,timeendday,isallowout,nightbeginday,nightendday,isblocked,bclbfl,overtmeffectbeyond,ontmeffectbeyond,iscancel,pk_dd,pk_bbz,lbjc,pk_bbmb  " + 
		"from tbm_bclb where pk_corp = '"+unitCode+"' and dr = 0 " + sqlwhe;
	
	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	if(gcbmid==null || gcbmid.equals("")) 
		//sql=sql+" and gcbm is null ";
		;
	else
		sql=sql+ " and gcbm= '"+gcbmid+"'";
	
	sql = sql +" order by lbbm asc ";

	BclbHeaderVO bclbs[] = null;
	Vector<BclbHeaderVO> v = new Vector<BclbHeaderVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			BclbHeaderVO bclb = new BclbHeaderVO();
			// pk_bclbid :
			String pk_bclbid = rs.getString(1);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			bclb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			//SFKQ
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : new Integer(sfkq.intValue()));
			//Add
			// timebegintime :
			String timebegintime = rs.getString(9);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(10);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			 
			// includenightshift :
			String includenightshift = rs.getString(11);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(12);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(13);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());
		 
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(14);
			bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(15);
			bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(16);
			bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(17);
			bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(18);
			bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(19);
			bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
			
			/**
			 *  Modified by 刘鹏飞 2011-04-25 End
			 */
			String iscancel = rs.getString("iscancel");
			bclb.setIscancel(iscancel == null ? null : UFBoolean.valueOf(iscancel.trim()));
			
			/**
			 *  Modified by Young 2005-09-22 Start
			 */
//			useovertmrule
			String useovertmrule = rs.getString(20);
			bclb.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(21);
			bclb.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(22);
			bclb.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());

			//add by myl
			//useontmrule
			String useontmrule = rs.getString(23);
			bclb.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(24);
			bclb.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(25);
			bclb.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());

			/**
			 *  Modified by Young 2005-09-22 End
			 */
			String defaultFlag = rs.getString("defaultFlag");
			bclb.setDefaultFlag(defaultFlag == null ? null : UFBoolean.valueOf(defaultFlag.trim()));
			
			Integer timebeginday = (Integer)rs.getObject(27);
			bclb.setTimebeginday(timebeginday == null ? null : timebeginday);
			
			Integer timeendday = (Integer)rs.getObject(28);
			bclb.setTimeendday(timeendday == null ? null : timeendday);
			
			String isallowout = rs.getString(29);
			bclb.setIsallowout(isallowout == null ? null : UFBoolean.valueOf(isallowout.trim()));
			
			Integer nightbeginday = (Integer)rs.getObject(30);
			bclb.setNightbeginday(nightbeginday == null ? null : nightbeginday);
			
			Integer nightendday = (Integer)rs.getObject(31);
			bclb.setNightendday(nightendday == null ? null : nightendday);
			
			String isblocked = rs.getString(32);
			bclb.setIsblocked(isblocked == null ? null : UFBoolean.valueOf(isblocked.trim()));
			
			//add by caizl
			String bclbfl = rs.getString(33);
			bclb.setBclbfl(bclbfl == null ? null : bclbfl);
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(34);
			bclb.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(35);
			bclb.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			
			String pk_dd = rs.getString(37);
			bclb.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(38);
			bclb.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(39);
			bclb.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(40);
			bclb.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());
			
			v.addElement(bclb);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbs = new BclbHeaderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(bclbs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "queryAll", new Object[]{unitCode});
	/*************************************************************/

	return bclbs;
}


public BclbItemVO[] queryAllBclbItem(BclbHeaderVO bhvo) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.pd.pd1020.BclbDMO",
		"queryAllBclbItem",
		new Object[] { bhvo });
	/*************************************************************/

	/*
	 * alter by zhoulan 增加zsts(折算天数)
	 * */
	String sql = "select pk_wtid, pk_corp, gcbm, pk_bclbid, kssj, jssj,timeid, ksto, jsto, checkInFlag, checkoutFlag,wtbeginday,wtendday,kstoday,jstoday,wtresttime,zsts from tbm_wt where pk_bclbid= '"+bhvo.getPk_bclbid()+"' and dr = 0 order by timeid ";
		
	BclbItemVO wts[] = null;
	Vector<BclbItemVO> v = new Vector<BclbItemVO>();
	Connection con = null;
	Statement stmt = null;
	try {
		con = getConnection();
		stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		
		while (rs.next()) {
			BclbItemVO wt = new BclbItemVO();
			// pk_wtid :
			String pk_wtid = rs.getString(1);
			wt.setPk_wtid(pk_wtid == null ? null : pk_wtid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			wt.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			wt.setGcbm(gcbm == null ? null : gcbm.trim());
			// bclbid :
			String bclbid = rs.getString(4);
			wt.setPk_bclbid(bclbid == null ? null : bclbid.trim());
			// kssj :
			String kssj = rs.getString(5);
			wt.setKssj(kssj == null ? null : kssj.trim());
			// jssj :
			String jssj = rs.getString(6);
			wt.setJssj(jssj == null ? null : jssj.trim());

			 
			//Add
			//Timeid
			Integer timeid = (Integer)rs.getObject(7);
			wt.setTimeid(timeid == null ? null : timeid);
			
			/**
			 *   Added by Young 2005-07-20  Start
			 */
			//  ksto
			String ksto = rs.getString("ksto");
			wt.setKsto(ksto == null ? null : ksto.trim());

			//  jsto
			String jsto = rs.getString("jsto");
			wt.setJsto(jsto == null ? null : jsto.trim());
			/**
			 *   Added by Young 2005-07-20  End
			 */
			
			String checkInFlag = rs.getString("checkInFlag");
			wt.setCheckInFlag(checkInFlag == null ? null : UFBoolean.valueOf(checkInFlag.trim()));
			
			String checkoutFlag = rs.getString("checkoutFlag");
			wt.setCheckoutFlag(checkoutFlag == null ? null : UFBoolean.valueOf(checkoutFlag.trim()));
			
			Integer wtbeginday = (Integer)rs.getObject("wtbeginday");
			wt.setWtbeginday(wtbeginday == null ? null : wtbeginday);
			
			Integer wtendday = (Integer)rs.getObject("wtendday");
			wt.setWtendday(wtendday == null ? null : wtendday);
			
			Integer kstoday = (Integer)rs.getObject("kstoday");
			wt.setKstoday(kstoday == null ? null : kstoday);
			
			Integer jstoday = (Integer)rs.getObject("jstoday");
			wt.setJstoday(jstoday == null ? null : jstoday);
			
			BigDecimal wtresttime = (BigDecimal)rs.getObject("wtresttime");
			wt.setWtresttime(wtresttime == null ? null : new UFDouble(wtresttime).intValue());
			
			//add by zhoulan   
			BigDecimal zsts = (BigDecimal)rs.getObject("zsts");
			wt.setZsts(zsts == null ? null : new UFDouble(zsts.doubleValue(),1));

			v.addElement(wt);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	wts = new BclbItemVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(wts);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.pd.pd1020.BclbDMO",
		"queryAllBclbItem",
		new Object[] { bhvo });
	/*************************************************************/

	return wts;
}
/**
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2001-6-6)
 * @param vo nc.vo.pd.pd1020.BclbVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(BclbVO vo)
	throws SQLException, BusinessException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "update", new Object[] { vo });
	/*************************************************************/
	deleteItemsForHeader(vo.getParentVO().getPrimaryKey());
	BclbItemVO[] items = (BclbItemVO[]) vo.getChildrenVO();
	for (int i = 0; i < items.length; i++) {
		insertItem(items[i],vo.getParentVO().getPrimaryKey());

	}
	
	if (((BclbHeaderVO) vo.getParentVO()).getDefaultFlag().booleanValue()){
		//如果将一个班别设为默认班别
		updateHeaderForDefault((BclbHeaderVO) vo.getParentVO());
	}
	updateHeader((BclbHeaderVO) vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "update", new Object[] { vo });
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-6-13)
 * @param bclbHeader nc.vo.pd.pd1020.BclbHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateHeader(BclbHeaderVO bclbHeader) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateHeader", new Object[]{bclbHeader});
	/*************************************************************/

	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	String sql = 
		"update tbm_bclb set pk_corp = ?, gcbm = ?, lbbm = ?, lbmc = ?, gzsj = ?, " + 
		"memo = ?, sfkq= ?, timebegintime = ?, timeendtime = ?, " + 
		"includenightshift = ?, nightbegintime = ?, nightendtime = ?, " + 
		" allowlate = ? ,allowearly= ? ,largelate = ? ," + 
		"largeearly = ? ,kghours = ?, isautokg=?, " +
		"useovertmrule = ? ,overtmbeyond =? ,  overtmruletype = ?, " +
		"useontmrule = ?,ontmbeyond = ?,ontmruletype = ?,defaultFlag = ?,timebeginday = ?,"+
		"timeendday = ?,isallowout = ?,nightbeginday = ?,nightendday =?,nightgzsj =?,isblocked =?,bclbfl = ? ,overtmeffectbeyond = ? ,ontmeffectbeyond = ?,iscancel = ?,pk_dd=?,pk_bbz=?,lbjc=?,pk_bbmb=? " + 
		"where pk_bclbid = ?";
	/**
	 *  Modified by Young 2005-09-22 End
	 */
	
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (bclbHeader.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, bclbHeader.getPk_corp());
		}
		if (bclbHeader.getGcbm() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, bclbHeader.getGcbm());
		}
		if (bclbHeader.getLbbm() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, bclbHeader.getLbbm());
		}
		if (bclbHeader.getLbmc() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, bclbHeader.getLbmc());
		}
		if (bclbHeader.getGzsj() == null) {
			stmt.setNull(5, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(5, bclbHeader.getGzsj().toBigDecimal());
		}
		if (bclbHeader.getMemo() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, bclbHeader.getMemo());
		}
		if (bclbHeader.getSfkq() == null) {
			stmt.setNull(7, Types.INTEGER);
		}
		else {
			stmt.setInt(7, bclbHeader.getSfkq().intValue());
		}

		//Add
		if (bclbHeader.getTimebegintime() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, bclbHeader.getTimebegintime());
		}
		if (bclbHeader.getTimeendtime() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, bclbHeader.getTimeendtime());
		}
		 
		
		
		if (bclbHeader.getIncludenightshift() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, bclbHeader.getIncludenightshift().toString());
		}
		if (bclbHeader.getNightbegintime() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, bclbHeader.getNightbegintime());
		}
		if (bclbHeader.getNightendtime() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, bclbHeader.getNightendtime());
		}
		 
		
		
		
		if (bclbHeader.getAllowlate() == null) {
			stmt.setNull(13, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(13, bclbHeader.getAllowlate().toBigDecimal());
		}
		if (bclbHeader.getAllowearly() == null) {
			stmt.setNull(14, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(14, bclbHeader.getAllowearly().toBigDecimal());
		}
		//
		if (bclbHeader.getLargelate() == null) {
			stmt.setNull(15, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(15, bclbHeader.getLargelate().toBigDecimal());
		}
		if (bclbHeader.getLargeearly() == null) {
			stmt.setNull(16, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(16, bclbHeader.getLargeearly().toBigDecimal());
		}	
		//
		if (bclbHeader.getKghours() == null) {
			stmt.setNull(17, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(17, bclbHeader.getKghours().toBigDecimal());
		}
		//	
		if (bclbHeader.getIsautokg() == null) {
			stmt.setNull(18, Types.CHAR);
		}
		else {
			stmt.setString(18, bclbHeader.getIsautokg());
		}
		
		/**
		 *  Modified by Young 2005-09-22 Start
		 */
		if (bclbHeader.getUseovertmrule() == null) {
			stmt.setNull(19, Types.CHAR);
		}
		else {
			stmt.setString(19, bclbHeader.getUseovertmrule().toString());
		}
		if (bclbHeader.getOvertmbeyond() == null) {
			stmt.setNull(20, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(20, bclbHeader.getOvertmbeyond().toBigDecimal());
		}
		if (bclbHeader.getOvertmruletype() == null) {
			stmt.setNull(21, Types.CHAR);
		}
		else {
			stmt.setString(21, bclbHeader.getOvertmruletype().toString());
		}
//		add by myl
		if (bclbHeader.getUseontmrule() == null) {
			stmt.setNull(22, Types.CHAR);
		}
		else {
			stmt.setString(22, bclbHeader.getUseontmrule().toString());
		}
		if (bclbHeader.getOntmbeyond() == null) {
			stmt.setNull(23, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(23, bclbHeader.getOntmbeyond().toBigDecimal());
		}
		if (bclbHeader.getOntmruletype() == null) {
			stmt.setNull(24, Types.CHAR);
		}
		else {
			stmt.setString(24, bclbHeader.getOntmruletype().toString());
		}
		if (bclbHeader.getDefaultFlag() == null) {
			stmt.setNull(25, Types.CHAR);
		}
		else {
			stmt.setString(25, bclbHeader.getDefaultFlag().toString());
		}
		/**
		 *  Modified by Young 2005-09-22 End
		 */
		
		if (bclbHeader.getTimebeginday() == null) {
			stmt.setNull(26, Types.INTEGER);
		}
		else {
			stmt.setInt(26, bclbHeader.getTimebeginday().intValue());
		}
		
		if (bclbHeader.getTimeendday() == null) {
			stmt.setNull(27, Types.INTEGER);
		}
		else {
			stmt.setInt(27, bclbHeader.getTimeendday().intValue());
		}
		
		if (bclbHeader.getIsallowout() == null) {
			stmt.setNull(28, Types.CHAR);
		}
		else {
			stmt.setString(28, bclbHeader.getIsallowout().toString());
		}
		
		if (bclbHeader.getNightbeginday() == null) {
			stmt.setNull(29, Types.INTEGER);
		}
		else {
			stmt.setInt(29, bclbHeader.getNightbeginday().intValue());
		}
		
		if (bclbHeader.getNightendday() == null) {
			stmt.setNull(30, Types.INTEGER);
		}
		else {
			stmt.setInt(30, bclbHeader.getNightendday().intValue());
		}
		if (bclbHeader.getNightgzsj() == null) {
			stmt.setNull(31, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(31, bclbHeader.getNightgzsj().toBigDecimal());
		}
		
		if (bclbHeader.getIsblocked() == null) {
			stmt.setNull(32, Types.CHAR);
		}
		else {
			stmt.setString(32, bclbHeader.getIsblocked().toString());
		}
		
		//add by caizl
		stmt.setString(33, bclbHeader.getBclbfl());
		
		if (bclbHeader.getOvertmeffectbeyond() == null) {
			stmt.setNull(34, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(34, bclbHeader.getOvertmeffectbeyond().toBigDecimal());
		}
		
		if (bclbHeader.getOntmeffectbeyond() == null) {
			stmt.setNull(35, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(35, bclbHeader.getOntmeffectbeyond().toBigDecimal());
		}
		
		if (bclbHeader.getIscancel() == null) {
			stmt.setNull(36, Types.CHAR);
		}
		else {
			stmt.setString(36, bclbHeader.getIscancel().toString());
		}
		
		if (bclbHeader.getPk_dd() == null) {
			stmt.setNull(37, Types.CHAR);
		}
		else {
			stmt.setString(37, bclbHeader.getPk_dd());
		}
		
		if (bclbHeader.getPk_bbz() == null) {
			stmt.setNull(38, Types.CHAR);
		}
		else {
			stmt.setString(38, bclbHeader.getPk_bbz());
		}
		
		if (bclbHeader.getLbjc() == null) {
			stmt.setNull(39, Types.CHAR);
		}
		else {
			stmt.setString(39, bclbHeader.getLbjc().toString());
		}
		
		if (bclbHeader.getPk_bbmb() == null) {
			stmt.setNull(40, Types.CHAR);
		}
		else {
			stmt.setString(40, bclbHeader.getPk_bbmb().toString());
		}
		
		
		stmt.setString(41, bclbHeader.getPrimaryKey());

		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataUpdated("tbm_bclb",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateHeader", new Object[]{bclbHeader});
	/*************************************************************/
}

/**
 * 当将一个班别设为默认班别时，调用此方法将此公司内所有班别设为非默认班别
 * @param bclbHeader
 * @throws java.sql.SQLException
 */
public void updateHeaderForDefault(BclbHeaderVO bclbHeader) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateHeaderForDefault", new Object[]{bclbHeader});
	/*************************************************************/

	String sql = 
		"update tbm_bclb set defaultFlag = 'N' " + 
		"where pk_corp = ? ";
	
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		
		if (bclbHeader.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, bclbHeader.getPk_corp());
		}
		
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataUpdated("tbm_bclb",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateHeaderForDefault", new Object[]{bclbHeader});
	/*************************************************************/
}

/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-6-13)
 * @param bclbItem nc.vo.pd.pd1020.BclbItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateItem(BclbItemVO bclbItem) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateItem", new Object[]{bclbItem});
	/*************************************************************/

	/**
	 *   Modified by Young   2005-07-20 Start
	 */
	String sql = 
		"update tbm_wt set pk_corp = ?, gcbm = ?, pk_bclbid = ?, kssj = ?, " + 
		"jssj = ?,timeid=?, ksto = ?, jsto = ? ,wtbeginday= ?,wtendday= ?,kstoday= ?,jstoday= ? "+
		"where pk_wtid = ?";
	/**
	 *   Modified by Young 2005-07-20  End
	 */
	
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (bclbItem.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, bclbItem.getPk_corp());
		}
		if (bclbItem.getGcbm() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, bclbItem.getGcbm());
		}
		if (bclbItem.getPk_bclbid() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, bclbItem.getPk_bclbid());
		}
		if (bclbItem.getKssj() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, bclbItem.getKssj());
		}
		if (bclbItem.getJssj() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, bclbItem.getJssj());
		}
		 
		
		if (bclbItem.getTimeid() == null) {
			stmt.setNull(6, Types.INTEGER);
		}
		else {
			stmt.setInt(6, bclbItem.getTimeid().intValue());
		}
		

		/**
		 *  Added by Young 2005-07-20  Start
		 */
		if (bclbItem.getKsto() == null){
			stmt.setNull(7, Types.CHAR);
		}else{
			stmt.setString(7, bclbItem.getKsto());
		}

		if (bclbItem.getJsto() == null){
			stmt.setNull(8, Types.CHAR);
		}
		else{
			stmt.setString(8, bclbItem.getJsto());
		}
		/**
		 *  Added by Young 2005-07-20  End
		 */
		
		if (bclbItem.getWtbeginday() == null) {
			stmt.setNull(9, Types.INTEGER);
		}
		else {
			stmt.setInt(9, bclbItem.getWtbeginday().intValue());
		}
		if (bclbItem.getWtendday() == null) {
			stmt.setNull(10, Types.INTEGER);
		}
		else {
			stmt.setInt(10, bclbItem.getWtendday().intValue());
		}
		if (bclbItem.getKstoday() == null) {
			stmt.setNull(11, Types.INTEGER);
		}
		else {
			stmt.setInt(11, bclbItem.getKstoday().intValue());
		}
		if (bclbItem.getJstoday() == null) {
			stmt.setNull(12, Types.INTEGER);
		}
		else {
			stmt.setInt(12, bclbItem.getJstoday().intValue());
		}
		
		// find record by PK fields:
		stmt.setString(13, bclbItem.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	nc.bs.bd.cache.CacheProxy.fireDataUpdated("tbm_wt",null);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.pd.pd1020.BclbDMO", "updateItem", new Object[]{bclbItem});
	/*************************************************************/
}

/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2002-1-22)
 * @return nc.vo.tbm.tbm_002.BclbVO[]
 * @param bclbVO nc.vo.tbm.tbm_002.BclbVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public BclbVO[] queryByVO(BclbVO condBclbVO, Boolean isAnd) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.tbm.tbm_029.BclbDMO", "queryByVO", new Object[]{condBclbVO, isAnd});
	/*************************************************************/

	String strSql = 
		"select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo, sfkq, timebegintime, " + 
		"timeendtime, timebeginday,timeendday, nightbeginday, nightendday, isallowout , includenightshift, nightbegintime, nightendtime, " + 
		" dr, allowlate, allowearly, largelate, largeearly, " + 
		"kghours,isautokg, useovertmrule  ,overtmbeyond,  overtmruletype, " +
		"useontmrule, ontmbeyond, ontmruletype,isblocked,overtmeffectbeyond,ontmeffectbeyond,pk_dd,pk_bbz,lbjc,pk_bbmb  from tbm_bclb ";
	
	String strConditionNames = "";
	String strAndOr = "and ";
	if (!isAnd.booleanValue()) {
		strAndOr = "or  ";
	}
	if (condBclbVO.getPk_corp() != null) {
		strConditionNames += strAndOr + "pk_corp=? ";
	}
	if (condBclbVO.getGcbm() != null) {
		strConditionNames += strAndOr + "gcbm=? ";
	}
	if (condBclbVO.getLbbm() != null) {
		strConditionNames += strAndOr + "lbbm=? ";
	}
	if (condBclbVO.getLbmc() != null) {
		strConditionNames += strAndOr + "lbmc=? ";
	}
	if (condBclbVO.getGzsj() != null) {
		strConditionNames += strAndOr + "gzsj=? ";
	}
	if (condBclbVO.getMemo() != null) {
		strConditionNames += strAndOr + "memo=? ";
	}
	if (condBclbVO.getSfkq() != null) {
		strConditionNames += strAndOr + "sfkq=? ";
	}
	if (condBclbVO.getTimebegintime() != null) {
		strConditionNames += strAndOr + "timebegintime=? ";
	}
	if (condBclbVO.getTimeendtime() != null) {
		strConditionNames += strAndOr + "timeendtime=? ";
	}
	if (condBclbVO.getTimebeginday() != null) {
		strConditionNames += strAndOr + "timebeginday=? ";
	}
	if (condBclbVO.getTimeendday() != null) {
		strConditionNames += strAndOr + "timeendday=? ";
	}
	if (condBclbVO.getNightbeginday() != null) {
		strConditionNames += strAndOr + "nightbeginday=? ";
	}
	if (condBclbVO.getNightendday() != null) {
		strConditionNames += strAndOr + "nightendday=? ";
	}
	if (condBclbVO.getIsallowout() != null) {
		strConditionNames += strAndOr + "isallowout=? ";
	}
	if (condBclbVO.getIncludenightshift() != null) {
		strConditionNames += strAndOr + "includenightshift=? ";
	}
	if (condBclbVO.getNightbegintime() != null) {
		strConditionNames += strAndOr + "nightbegintime=? ";
	}
	if (condBclbVO.getNightendtime() != null) {
		strConditionNames += strAndOr + "nightendtime=? ";
	}
	if (condBclbVO.getDr() != null) {
		strConditionNames += strAndOr + "dr=? ";
	}
	if (strConditionNames.length() > 0) {
		strConditionNames = strConditionNames.substring(3, strConditionNames.length() - 1);
	}
	else {
		return queryAll(null);
	}
	//拼接后的SQL语句
	strSql = strSql + " where " + strConditionNames + " and pk_bclbid <> 'GX' and pk_bclbid <> 'KB'";
	//
	int index = 0;
	BclbVO bclbs[] = null;
	Vector<BclbVO> v = new Vector<BclbVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condBclbVO.getPk_corp() != null) {
			stmt.setString(++index, condBclbVO.getPk_corp());
		}
		if (condBclbVO.getGcbm() != null) {
			stmt.setString(++index, condBclbVO.getGcbm());
		}
		if (condBclbVO.getLbbm() != null) {
			stmt.setString(++index, condBclbVO.getLbbm().toString());
		}
		if (condBclbVO.getLbmc() != null) {
			stmt.setString(++index, condBclbVO.getLbmc());
		}
		if (condBclbVO.getGzsj() != null) {
			stmt.setBigDecimal(++index, condBclbVO.getGzsj().toBigDecimal());
		}
		if (condBclbVO.getMemo() != null) {
			stmt.setString(++index, condBclbVO.getMemo());
		}
		if (condBclbVO.getSfkq() != null) {
			stmt.setInt(++index, condBclbVO.getSfkq().intValue());
		}
		if (condBclbVO.getTimebegintime() != null) {
			stmt.setString(++index, condBclbVO.getTimebegintime());
		}
		if (condBclbVO.getTimeendtime() != null) {
			stmt.setString(++index, condBclbVO.getTimeendtime());
		}
		if (condBclbVO.getTimebeginday() != null) {
			stmt.setString(++index, condBclbVO.getTimebeginday().toString());
		}
		if (condBclbVO.getTimeendday() != null) {
			stmt.setString(++index, condBclbVO.getTimeendday().toString());
		}
		if (condBclbVO.getNightbeginday() != null) {
			stmt.setString(++index, condBclbVO.getNightbeginday().toString());
		}
		if (condBclbVO.getNightendday() != null) {
			stmt.setString(++index, condBclbVO.getNightendday().toString());
		}
		if (condBclbVO.getIsallowout() != null) {
			stmt.setString(++index, condBclbVO.getIsallowout().toString());
		}
		if (condBclbVO.getIncludenightshift() != null) {
			stmt.setString(++index, condBclbVO.getIncludenightshift().toString());
		}
		if (condBclbVO.getNightbegintime() != null) {
			stmt.setString(++index, condBclbVO.getNightbegintime());
		}
		if (condBclbVO.getNightendtime() != null) {
			stmt.setString(++index, condBclbVO.getNightendtime());
		}
		if (condBclbVO.getDr() != null) {
			stmt.setInt(++index, condBclbVO.getDr().intValue());
		}
		
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			BclbVO aBclbVO = new BclbVO();
			BclbHeaderVO aBclbHeaderVO = new BclbHeaderVO();
			//
			String pk_bclbid = rs.getString(1);
			aBclbHeaderVO.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			//
			String pk_corp = rs.getString(2);
			aBclbHeaderVO.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String gcbm = rs.getString(3);
			aBclbHeaderVO.setGcbm(gcbm == null ? null : gcbm.trim());
			//
			String lbbm = rs.getString(4);
			aBclbHeaderVO.setLbbm(lbbm == null ? null : lbbm.trim());
			//
			String lbmc = rs.getString(5);
			aBclbHeaderVO.setLbmc(lbmc == null ? null : lbmc.trim());
			//
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			aBclbHeaderVO.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			//
			String memo = rs.getString(7);
			aBclbHeaderVO.setMemo(memo == null ? null : memo.trim());
			//
			Integer sfkq = (Integer)rs.getObject(8);
			aBclbHeaderVO.setSfkq(sfkq == null ? null : sfkq);
			//
			String timebegintime = rs.getString(9);
			aBclbHeaderVO.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			//
			String timeendtime = rs.getString(10);
			aBclbHeaderVO.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			// timebeginday :
			int timebeginday = rs.getInt(11);
			aBclbHeaderVO.setTimebeginday(timebeginday);
			// timeendday :
			int timeendday = rs.getInt(12);
			aBclbHeaderVO.setTimeendday(timeendday);
			// nightbeginday :
			int nightbeginday = rs.getInt(13);
			aBclbHeaderVO.setNightbeginday(nightbeginday);
			// nightendday :
			int nightendday = rs.getInt(14);
			aBclbHeaderVO.setNightendday(nightendday);
			// isallowout :
			String isallowout = rs.getString(15);
			aBclbHeaderVO.setIsallowout(isallowout==null?UFBoolean.TRUE:UFBoolean.valueOf(isallowout));
			//
			String includenightshift = rs.getString(16);
			aBclbHeaderVO.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			//
			String nightbegintime = rs.getString(17);
			aBclbHeaderVO.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			//
			String nightendtime = rs.getString(18);
			aBclbHeaderVO.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			//
			Integer dr = (Integer)rs.getObject(19);
			aBclbHeaderVO.setDr(dr == null ? null : dr);
			// allowlate :
			BigDecimal allowlate = (BigDecimal)rs.getObject(20);
			aBclbHeaderVO.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
			// allowearly :
			BigDecimal allowearly = (BigDecimal)rs.getObject(21);
			aBclbHeaderVO.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
			// largelate :
			BigDecimal largelate = (BigDecimal)rs.getObject(22);
			aBclbHeaderVO.setLargelate(largelate == null ? null : new UFDouble(largelate));
			// largeearly :
			BigDecimal largeearly = (BigDecimal)rs.getObject(23);
			aBclbHeaderVO.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));

			// kghours :
			BigDecimal kghours = (BigDecimal)rs.getObject(24);
			aBclbHeaderVO.setKghours(kghours == null ? null : new UFDouble(kghours));
			//isautokg
			String isautokg = rs.getString(25);
			aBclbHeaderVO.setIsautokg(isautokg == null ? null : isautokg.trim());
			//, ishalfday,kghours,isautokg		
			
//			useovertmrule
			String useovertmrule = rs.getString(26);
			aBclbHeaderVO.setUseovertmrule(useovertmrule == null ? null: UFBoolean.valueOf(useovertmrule.trim()));
			// overtmbeyond :
			BigDecimal overtmbeyond = (BigDecimal)rs.getObject(27);
			aBclbHeaderVO.setOvertmbeyond(overtmbeyond == null ? null : new UFDouble(overtmbeyond));
			//overtmruletype
			String overtmruletype = rs.getString(28);
			aBclbHeaderVO.setOvertmruletype(overtmruletype == null ? null : overtmruletype.trim());
			
//			useontmrule
			String useontmrule = rs.getString(29);
			aBclbHeaderVO.setUseontmrule(useontmrule == null ? null: UFBoolean.valueOf(useontmrule.trim()));
			// ontmbeyond :
			BigDecimal ontmbeyond = (BigDecimal)rs.getObject(30);
			aBclbHeaderVO.setOntmbeyond(ontmbeyond == null ? null : new UFDouble(ontmbeyond));
			//ontmruletype
			String ontmruletype = rs.getString(31);
			aBclbHeaderVO.setOntmruletype(ontmruletype == null ? null : ontmruletype.trim());
			
			String isblocked = rs.getString(32);
			aBclbHeaderVO.setIsblocked(isblocked==null?UFBoolean.TRUE:UFBoolean.valueOf(isblocked));
			
			BigDecimal overtmeffectbeyond = (BigDecimal)rs.getObject(33);
			aBclbHeaderVO.setOvertmeffectbeyond(overtmeffectbeyond == null ? null : new UFDouble(overtmeffectbeyond));
			
			BigDecimal ontmeffectbeyond = (BigDecimal)rs.getObject(34);
			aBclbHeaderVO.setOntmeffectbeyond(ontmeffectbeyond == null ? null : new UFDouble(ontmeffectbeyond));
			//
			String pk_dd = rs.getString(35);
			aBclbHeaderVO.setPk_dd(pk_dd==null?null:pk_dd.trim());
			String pk_bbz = rs.getString(36);
			aBclbHeaderVO.setPk_bbz(pk_bbz==null?null:pk_bbz.trim());
			String lbjc = rs.getString(37);
			aBclbHeaderVO.setLbjc(lbjc==null?null:lbjc.trim());
			String pk_bbmb = rs.getString(38);
			aBclbHeaderVO.setPk_bbmb(pk_bbmb==null?null:pk_bbmb.trim());
			
			aBclbVO.setParentVO(aBclbHeaderVO);
			v.addElement(aBclbVO);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbs = new BclbVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(bclbs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.tbm.tbm_029.BclbDMO", "queryByVO", new Object[]{condBclbVO, isAnd});
	/*************************************************************/

	return bclbs;
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2002-1-22)
 * @return nc.vo.tbm.tbm_002.BclbVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public BclbVO[] queryAll(String pk_corp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.tbm.tbm_029.BclbDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	String sql = "";
	if (pk_corp != null) {
		sql = "select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo, sfkq, timebegintime, timeendtime, timebeginday,timeendday, nightbeginday, nightendday, isallowout, includenightshift, nightbegintime, nightendtime, dr, isblocked, allowlate, allowearly, largelate,  largeearly,kghours,isautok	 from tbm_bclb where pk_corp = ?";
	}
	else {
		sql ="select pk_bclbid, pk_corp, gcbm, lbbm, lbmc, gzsj, memo, sfkq, timebegintime, timeendtime, timebeginday,timeendday, nightbeginday, nightendday, isallowout, includenightshift, nightbegintime, nightendtime, dr,isblocked from tbm_bclb";
	}

	BclbVO bclbs[] = null;
	Vector<BclbVO> v = new Vector<BclbVO>();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (pk_corp != null) {
			stmt.setString(1, pk_corp);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			BclbVO bclb = new BclbVO();
			BclbHeaderVO aBclbHeaderVO = new BclbHeaderVO();
			bclb.setParentVO(aBclbHeaderVO);
			// pk_bclbid :
			String pk_bclbid = rs.getString(1);
			bclb.setPk_bclbid(pk_bclbid == null ? null : pk_bclbid.trim());
			// pk_corp :
			String spk_corp = rs.getString(2);
			bclb.setPk_corp(spk_corp == null ? null : spk_corp.trim());
			// gcbm :
			String gcbm = rs.getString(3);
			bclb.setGcbm(gcbm == null ? null : gcbm.trim());
			// lbbm :
			String lbbm = rs.getString(4);
			bclb.setLbbm(lbbm == null ? null : lbbm.trim());
			// lbmc :
			String lbmc = rs.getString(5);
			bclb.setLbmc(lbmc == null ? null : lbmc.trim());
			// gzsj :
			BigDecimal gzsj = (BigDecimal)rs.getObject(6);
			bclb.setGzsj(gzsj == null ? null : new UFDouble(gzsj));
			// memo :
			String memo = rs.getString(7);
			bclb.setMemo(memo == null ? null : memo.trim());
			// sfkq :
			Integer sfkq = (Integer)rs.getObject(8);
			bclb.setSfkq(sfkq == null ? null : sfkq);
			// timebegintime :
			String timebegintime = rs.getString(9);
			bclb.setTimebegintime(timebegintime == null ? null : timebegintime.trim());
			// timeendtime :
			String timeendtime = rs.getString(10);
			bclb.setTimeendtime(timeendtime == null ? null : timeendtime.trim());
			// timebeginday :
			int timebeginday = rs.getInt(11);
			bclb.setTimebeginday(timebeginday);
			// timeendday :
			int timeendday = rs.getInt(12);
			bclb.setTimeendday(timeendday);
			// nightbeginday :
			int nightbeginday = rs.getInt(13);
			bclb.setNightbeginday(nightbeginday);
			// nightendday :
			int nightendday = rs.getInt(14);
			bclb.setNightbeginday(nightendday);
			// isallowout :
			String isallowout = rs.getString(15);
			bclb.setIsallowout(UFBoolean.valueOf(isallowout));
			// includenightshift :
			String includenightshift = rs.getString(16);
			bclb.setIncludenightshift(includenightshift == null ? null : UFBoolean.valueOf(includenightshift.trim()));
			// nightbegintime :
			String nightbegintime = rs.getString(17);
			bclb.setNightbegintime(nightbegintime == null ? null : nightbegintime.trim());
			// nightendtime :
			String nightendtime = rs.getString(18);
			bclb.setNightendtime(nightendtime == null ? null : nightendtime.trim());
			// dr :
			Integer dr = (Integer)rs.getObject(19);
			bclb.setDr(dr == null ? null : dr);
			
			String isblocked = rs.getString(20);
			bclb.setIsblocked(UFBoolean.valueOf(isblocked));
			
			
			if (pk_corp != null) { //注意两个SQL语句之间的不同
				// allowlate :
				BigDecimal allowlate = (BigDecimal)rs.getObject(21);
				bclb.setAllowlate(allowlate == null ? null : new UFDouble(allowlate));
				// allowearly :
				BigDecimal allowearly = (BigDecimal)rs.getObject(22);
				bclb.setAllowearly(allowearly == null ? null : new UFDouble(allowearly));
				// largelate :
				BigDecimal largelate = (BigDecimal)rs.getObject(23);
				bclb.setLargelate(largelate == null ? null : new UFDouble(largelate));
				// largeearly :
				BigDecimal largeearly = (BigDecimal)rs.getObject(24);
				bclb.setLargeearly(largeearly == null ? null : new UFDouble(largeearly));
			
				// kghours :
				BigDecimal kghours = (BigDecimal)rs.getObject(25);
				bclb.setKghours(kghours == null ? null : new UFDouble(kghours));
				//isautokg
				String isautokg = rs.getString(26);
				bclb.setIsautokg(isautokg == null ? null : isautokg.trim());
				//, ishalfday,kghours,isautokg		
			}	
			v.addElement(bclb);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	bclbs = new BclbVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(bclbs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.tbm.tbm_002.BclbDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	return bclbs;
}
}
