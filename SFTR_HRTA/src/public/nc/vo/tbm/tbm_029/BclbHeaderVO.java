package nc.vo.tbm.tbm_029;
import nc.hr.utils.ResHelper;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.util.ArrayList;

import nc.itf.hr.ta.algorithm.IRelativeTimeScope;
import nc.itf.hr.ta.algorithm.ITimeScope;
import nc.itf.hr.ta.algorithm.TimeScopeUtils;
import nc.vo.hr.utils.ml.HRPubRes;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
/**
 * 此处插入类型说明。
 *
 * 创建日期：(2001-6-13)
 * @author：
 */
public class BclbHeaderVO extends CircularlyAccessibleValueObject implements IRelativeTimeScope {
	public String m_pk_bclbid;
	public String m_pk_corp;
	public String m_gcbm;
	public String m_lbbm;
	
	public String lbjc;
	public String pk_dd;
	public String pk_bbz;
	public String pk_bbmb;
	
	
	
	
	public String getPk_bbmb() {
		return pk_bbmb;
	}
	public void setPk_bbmb(String pk_bbmb) {
		this.pk_bbmb = pk_bbmb;
	}
	public String getLbjc() {
		return lbjc;
	}
	public void setLbjc(String lbjc) {
		this.lbjc = lbjc;
	}
	public String getPk_dd() {
		return pk_dd;
	}
	public void setPk_dd(String pk_dd) {
		this.pk_dd = pk_dd;
	}
	public String getPk_bbz() {
		return pk_bbz;
	}
	public void setPk_bbz(String pk_bbz) {
		this.pk_bbz = pk_bbz;
	}
	public String m_lbmc;
	public UFDouble m_gzsj;
	public UFDouble nightgzsj;
	public String m_memo;
	public Integer m_sfkq;
	public String m_Timebegintime;
	public String m_Timeendtime;
//	public UFBoolean m_Timenextdayend;
	public UFBoolean m_Includenightshift;
	public String m_Nightbegintime;
	public String m_Nightendtime;
//	public UFBoolean m_Nightnextdayend;
	public UFDouble m_allowlate;
	public UFDouble m_allowearly;
	public BclbItemVO[] bbItemVOs = null;
	public Integer m_dr;

	//add start
	public UFBoolean m_DefaultFlag;
	//add end

	public Integer timebeginday;
	public Integer timeendday;
	public UFBoolean isallowout;
	public Integer nightbeginday;
	public Integer nightendday;
	
	public UFBoolean isblocked;
	public UFBoolean iscancel;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_bclbidField;
	private static StringField m_pk_corpField;
	private static StringField m_gcbmField;
	private static StringField m_lbbmField;
	private static StringField m_lbmcField;
	private static UFDoubleField m_gzsjField;
	private static StringField m_memoField;
	private static IntegerField m_sfkqField;

	public UFDouble m_largelate;
	public UFDouble m_largeearly;

	public nc.vo.pub.lang.UFDouble kghours;

	public java.lang.String isautokg;

	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	public UFDouble ontmbeyond;
	public UFDouble ontmeffectbeyond;
	public java.lang.String ontmruletype;
//	add by myl
	public UFBoolean useontmrule;

	public UFDouble overtmbeyond;
	public UFDouble overtmeffectbeyond;
	public java.lang.String overtmruletype;
	//add by myl
	public UFBoolean useovertmrule;
	
	//add by caizl
	public String bclbfl;
	public String s_bclbfl;
	public String sm_lbbm;
	public String sm_lbmc;
	/**
	 *  Modified by Young 2005-09-22 End
	 */


	public String getBclbfl() {
		return bclbfl;
	}
	public void setBclbfl(String bclbfl) {
		this.bclbfl = bclbfl;
	}
	public String getS_bclbfl() {
		return s_bclbfl;
	}
	public void setS_bclbfl(String s_bclbfl) {
		this.s_bclbfl = s_bclbfl;
	}
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2001-6-13)
 */
public BclbHeaderVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2001-6-13)
 * @param ??fieldNameForMethod?? 主键值
 */
public BclbHeaderVO(String newPk_bclbid) {

	// 为主键字段赋值:
	m_pk_bclbid = newPk_bclbid;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2001-6-13)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	BclbHeaderVO bclb = (BclbHeaderVO)o;

	// 你在下面复制本VO对象的所有属性：

	return bclb;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2002-1-22)
 * @return UFDouble
 */
public UFDouble getAllowearly() {
	return m_allowearly;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2002-1-22)
 * @return UFDouble
 */
public UFDouble getAllowlate() {
	return m_allowlate;
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {
	return new String[]{ "pk_corp", "gcbm", "m_lbbm", "m_lbmc", "gzsj", "memo", "sfkq", "timebegintime", "timeendtime", "timenextdayend", "includenightshift", "nightbegintime", "nightendtime", "nightnextdayend", "defaultFlag","timebeginday","timeendday","isallowout","isblocked","nightbeginday","nightendday","ontmbeyond","ontmeffectbeyond","overtmbeyond","overtmeffectbeyond","pk_defdoc","iscancel","lbbm","lbmc"};
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2001-6-13)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_bclbid")) {
		return m_pk_bclbid;
	}
	else if (attributeName.equals("pk_corp")) {
		return m_pk_corp;
	}
	else if (attributeName.equals("gcbm")) {
		return m_gcbm;
	}
	else if (attributeName.equals("m_lbbm")) {
		return m_lbbm;
	}
	else if (attributeName.equals("m_lbmc")) {
	    //zengcheng 2005.05.24,恢复了lbmc的写法:return getLbmc()还原成return m_lbmc
		return m_lbmc;
	    //return getLbmc();
	}
	else if (attributeName.equals("lbbm")) {//刘鹏飞新增
		return m_lbbm;
	}
	else if (attributeName.equals("lbmc")) {//刘鹏飞新增
		return m_lbmc;
	}
	else if (attributeName.equals("gzsj")) {
		return m_gzsj;
	}
	else if (attributeName.equals("nightgzsj")) {
		return nightgzsj;
	}
	else if (attributeName.equals("memo")) {
		return m_memo;
	}
	else if (attributeName.equals("sfkq")) {
		return m_sfkq;
	}
	else if (attributeName.equals("timebegintime")) {
		return m_Timebegintime;
	}
	else if (attributeName.equals("timeendtime")) {
		return m_Timeendtime;
	}
	else if (attributeName.equals("timebeginday")) {
		if (timebeginday==-1){
			return ResHelper.getString("6017","UPP6017-000330")//@res "前一日"
;
		}else if (timebeginday==1){
			return ResHelper.getString("6017","UPP6017-000331")//@res "后一日"
;
		}
		return ResHelper.getString("6017","UPP6017-000329")//@res "当日"
;
		//return timebeginday;
	}
	else if (attributeName.equals("timeendday")) {
		if (timeendday==-1){
			return ResHelper.getString("6017","UPP6017-000330")//@res "前一日"
;
		}else if (timeendday==1){
			return ResHelper.getString("6017","UPP6017-000331")//@res "后一日"
;
		}
		return ResHelper.getString("6017","UPP6017-000329")//@res "当日"
;
		//return timeendday;
	}
	else if (attributeName.equals("nightbeginday")) {
		if (m_Includenightshift != null && m_Includenightshift.booleanValue()){
			if (nightbeginday==-1){
				return ResHelper.getString("6017","UPP6017-000330")//@res "前一日"
;
			}else if (nightbeginday==1){
				return ResHelper.getString("6017","UPP6017-000331")//@res "后一日"
;
			}else{
				return ResHelper.getString("6017","UPP6017-000329")//@res "当日"
;
			}
		}
		return "";
		//return nightbeginday;
	}
	else if (attributeName.equals("nightendday")) {
		if (m_Includenightshift != null && m_Includenightshift.booleanValue()){
			if (nightendday==-1){
				return ResHelper.getString("6017","UPP6017-000330")//@res "前一日"
;
			}else if (nightendday==1){
				return ResHelper.getString("6017","UPP6017-000331")//@res "后一日"
;
			}else{
				return ResHelper.getString("6017","UPP6017-000329")//@res "当日"
;
			}
		}
		return "";
		//return nightendday;
	}
	else if (attributeName.equals("isallowout")) {
		return isallowout;
	}
	else if (attributeName.equals("isblocked")) {
		return isblocked;
	}
	else if(attributeName.equals("iscancel")){
		return iscancel;
	}
	else if (attributeName.equals("includenightshift")) {
		return m_Includenightshift;
	}
	else if (attributeName.equals("nightbegintime")) {
		return m_Nightbegintime;
	}
	else if (attributeName.equals("nightendtime")) {
		return m_Nightendtime;
	}
	else if (attributeName.equals("defaultFlag")) {
		return m_DefaultFlag;
	}
	else if (attributeName.equals("ontmbeyond")) {
		return ontmbeyond;
	}
	else if (attributeName.equals("ontmeffectbeyond")) {
		return ontmeffectbeyond;
	}
	else if (attributeName.equals("overtmbeyond")) {
		return overtmbeyond;
	}
	else if (attributeName.equals("overtmeffectbeyond")) {
		return overtmeffectbeyond;
	}
	else if (attributeName.equals("bclbfl")) {
		return bclbfl;
	}
	else if (attributeName.equals("s_bclbfl")) {
		return s_bclbfl;
	}
	else if (attributeName.equals("sm_lbbm")) {
		return sm_lbbm;
	}
	else if (attributeName.equals("sm_lbmc")) {
		return sm_lbmc;
	}else if (attributeName.equals("pk_dd")) {
		return pk_dd;
	}else if (attributeName.equals("pk_bbz")) {
		return pk_bbz;
	}else if (attributeName.equals("lbjc")) {
		return lbjc;
	}
	return null;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2004-4-13 16:35:45)
 * @return java.lang.String
 */
public BclbItemVO[] getBclbItemVOs() {
	return bbItemVOs;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2001-6-13)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Bclb";
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_bclbidField(), getPk_corpField(), getGcbmField(), getLbbmField(), getLbmcField(), getGzsjField(), getMemoField()};

	return fields;
}
/**
 * 属性m_gcbm的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getGcbm() {
	return m_gcbm;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getGcbmField() {

	if(m_gcbmField == null){
		try{
			m_gcbmField = new StringField();
			// 属性的名称
			m_gcbmField.setName("gcbm");
			// 属性的描述
			m_gcbmField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_gcbmField;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return UFDouble
 */
public UFDouble getGzsj() {
	return m_gzsj;
}

public UFDouble getNightgzsj() {
	return nightgzsj;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static UFDoubleField getGzsjField() {

	if(m_gzsjField == null){
		try{
			m_gzsjField = new UFDoubleField();
			// 属性的名称
			m_gzsjField.setName("gzsj");
			// 属性的描述
			m_gzsjField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_gzsjField;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return nc.vo.pub.lang.UFBoolean
 */
public nc.vo.pub.lang.UFBoolean getIncludenightshift() {
	return m_Includenightshift;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2004-4-13 16:35:45)
 * @return java.lang.String
 */
public java.lang.String getIsautokg() {
	return isautokg;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2004-4-12 18:25:21)
 * @return nc.vo.pub.lang.UFDouble
 */
public nc.vo.pub.lang.UFDouble getKghours() {
	return kghours;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2002-1-22)
 * @return UFDouble
 */
public UFDouble getLargeearly() {
	return m_largeearly;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2002-1-22)
 * @return UFDouble
 */
public UFDouble getLargelate() {
	return m_largelate;
}
/**
 * 属性m_lbbm的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getLbbm() {
	return m_lbbm;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getLbbmField() {

	if(m_lbbmField == null){
		try{
			m_lbbmField = new StringField();
			// 属性的名称
			m_lbbmField.setName("lbbm");
			// 属性的描述
			m_lbbmField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_lbbmField;
}
/**
 * 属性m_lbmc的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getLbmc() {
    //2005.05.24,zengcheng 将方法体改为最初的写法,因为已经决定用多套预制脚本的方法来实现预制脚本的多语化
    /*if(m_lbmc == null || m_lbmc.equals(""))
        return m_lbmc;
    String resID = null;
    if(m_lbmc.equals("公休"))
        resID = "TBM@@@@GX";
    else if(m_lbmc.equals("空班"))
        resID = "TBM@@@@KB";
    else
        return m_lbmc;

    return nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("tbm_pub",resID);*/
    return m_lbmc;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getLbmcField() {

	if(m_lbmcField == null){
		try{
			m_lbmcField = new StringField();
			// 属性的名称
			m_lbmcField.setName("lbmc");
			// 属性的描述
			m_lbmcField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_lbmcField;
}
/**
 * 属性m_memo的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getMemo() {
	return m_memo;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getMemoField() {

	if(m_memoField == null){
		try{
			m_memoField = new StringField();
			// 属性的名称
			m_memoField.setName("memo");
			// 属性的描述
			m_memoField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_memoField;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return java.lang.String
 */
public java.lang.String getNightbegintime() {
	return m_Nightbegintime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return java.lang.String
 */
public java.lang.String getNightendtime() {
	return m_Nightendtime;
}
/**
 * TODO:此方法应该删除
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return nc.vo.pub.lang.UFBoolean
 */
public nc.vo.pub.lang.UFBoolean getNightnextdayend() {
	return UFBoolean.FALSE;
}
/**
 * 属性m_pk_bclbid的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getPk_bclbid() {
	return m_pk_bclbid;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_bclbidField() {

	if(m_pk_bclbidField == null){
		try{
			m_pk_bclbidField = new StringField();
			// 属性的名称
			m_pk_bclbidField.setName("pk_bclbid");
			// 属性的描述
			m_pk_bclbidField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_bclbidField;
}
/**
 * 属性m_pk_corp的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getPk_corp() {
	return m_pk_corp;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_corpField() {

	if(m_pk_corpField == null){
		try{
			m_pk_corpField = new StringField();
			// 属性的名称
			m_pk_corpField.setName("pk_corp");
			// 属性的描述
			m_pk_corpField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_corpField;
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2001-6-13)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_bclbid;
}
/**
 * 属性m_gzsj的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return UFDouble
 */
public Integer getSfkq() {
	return m_sfkq;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-6-13)
 * @return nc.vo.pub.FieldObject
 */
public static IntegerField getSfkqField() {

	if(m_sfkqField == null){
		try{
			m_sfkqField = new IntegerField();
			// 属性的名称
			m_sfkqField.setName("sfkq");
			// 属性的描述
			m_sfkqField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_sfkqField;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return java.lang.String
 */
public java.lang.String getTimebegintime() {
	return m_Timebegintime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return java.lang.String
 */
public java.lang.String getTimeendtime() {
	return m_Timeendtime;
}
/**
 * TODO:此方法应该删除
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @return nc.vo.pub.lang.UFBoolean
 */
//public nc.vo.pub.lang.UFBoolean getTimenextdayend() {
//	return UFBoolean.FALSE;
//}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2002-1-22)
 * @param newM_gzsj UFDouble
 */
public void setAllowearly(UFDouble newAllowearly) {

	m_allowearly = newAllowearly;
}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2002-1-22)
 * @param newM_gzsj UFDouble
 */
public void setAllowlate(UFDouble newAllowlate) {

	m_allowlate = newAllowlate;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2001-6-13)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_bclbid")) {
			m_pk_bclbid = (String) value;
		}
		else if (name.equals("pk_corp")) {
			m_pk_corp = (String) value;
		}
		else if (name.equals("gcbm")) {
			m_gcbm = (String) value;
		}
		else if (name.equals("m_lbbm")) {
			m_lbbm = (String) value;
		}
		else if (name.equals("m_lbmc")) {
			m_lbmc = (String) value;
		}
		else if (name.equals("pk_dd")) {
			pk_dd = (String) value;
		}
		else if (name.equals("pk_bbz")) {
			pk_bbz = (String) value;
		}
		else if (name.equals("lbjc")) {
			lbjc = (String) value;
		}
		
		else if (name.equals("lbbm")) {
			m_lbbm = (String) value;
		}
		else if (name.equals("lbmc")) {
			m_lbmc = (String) value;
		}
		else if (name.equals("gzsj")) {
			m_gzsj = new UFDouble(((UFDouble) value).doubleValue(),-2);
		}
		else if (name.equals("nightgzsj")) {
			nightgzsj = new UFDouble(((UFDouble) value).doubleValue(),-2);
		}
		else if (name.equals("memo")) {
			m_memo = (String) value;
		}
		else if (name.equals("sfkq")) {
			m_sfkq = (Integer) value;
		}
		else if (name.equals("timebegintime")) {
			m_Timebegintime = (String) value;
		}
		else if (name.equals("timeendtime")) {
			m_Timeendtime = (String) value;
		}
		else if (name.equals("timebeginday")) {
			timebeginday = (Integer) value;
		}
		else if (name.equals("timeendday")) {
			timeendday = (Integer) value;
		}
		else if (name.equals("nightbeginday")) {
			nightbeginday = (Integer) value;
		}
		else if (name.equals("nightendday")) {
			nightendday = (Integer) value;
		}
		else if (name.equals("isallowout")) {
			isallowout = (UFBoolean) value;
		}
		else if (name.equals("isblocked")) {
			isblocked = (UFBoolean) value;
		}
		else if (name.equals("iscancel")) {
			iscancel = (UFBoolean) value;
		}
		else if (name.equals("includenightshift")) {
			m_Includenightshift = (UFBoolean) value;
		}
		else if (name.equals("nightbegintime")) {
			m_Nightbegintime = (String) value;
		}
		else if (name.equals("nightendtime")) {
			m_Nightendtime = (String) value;
		}
		else if (name.equals("bclbfl")) {
			bclbfl = (String) value;
		}
		else if (name.equals("s_bclbfl")) {
			s_bclbfl = (String) value;
		}
		else if (name.equals("sm_lbbm")) {
			sm_lbbm = (String) value;
		}
		else if (name.equals("sm_lbmc")) {
			sm_lbmc = (String) value;
		}
	}catch (ClassCastException e) {
		throw new ClassCastException(HRPubRes.getClassCastErrMsg(name,value));
	}
}
	public void setBclbItemVOs(BclbItemVO[] newbbItemVOs)
	{
	   bbItemVOs = newbbItemVOs;
	}
/**
 * 属性m_gcbm的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_gcbm String
 */
public void setGcbm(String newGcbm) {

	m_gcbm = newGcbm;
}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_gzsj UFDouble
 */
public void setGzsj(UFDouble newGzsj) {
    //added by zengcheng 2005.03.30 ,防止抛出NullPointerException
    if(newGzsj == null){
        m_gzsj = null;
        return;
    }
	m_gzsj = new UFDouble(newGzsj.doubleValue(),-2);
}

public void setNightgzsj(UFDouble newNightgzsj) {
	if(newNightgzsj == null){
		nightgzsj = null;
		return;
	}
	nightgzsj = new UFDouble(newNightgzsj.doubleValue(),-2);
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newIncludenightshift nc.vo.pub.lang.UFBoolean
 */
public void setIncludenightshift(nc.vo.pub.lang.UFBoolean newIncludenightshift) {
	m_Includenightshift = newIncludenightshift;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2004-4-13 16:35:45)
 * @param newIsautokg java.lang.String
 */
public void setIsautokg(java.lang.String newIsautokg) {
	isautokg = newIsautokg;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2004-4-12 18:25:21)
 * @param newKghours nc.vo.pub.lang.UFDouble
 */
public void setKghours(nc.vo.pub.lang.UFDouble newKghours) {
	kghours = newKghours;
}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2002-1-22)
 * @param newM_gzsj UFDouble
 */
public void setLargeearly(UFDouble newLargeearly) {

	m_largeearly = newLargeearly;
}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2002-1-22)
 * @param newM_gzsj UFDouble
 */
public void setLargelate(UFDouble newLargelate) {

	m_largelate = newLargelate;
}
/**
 * 属性m_lbbm的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_lbbm String
 */
public void setLbbm(String newLbbm) {

	m_lbbm = newLbbm;
}
/**
 * 属性m_lbmc的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_lbmc String
 */
public void setLbmc(String newLbmc) {

	m_lbmc = newLbmc;
}
/**
 * 属性m_memo的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_memo String
 */
public void setMemo(String newMemo) {

	m_memo = newMemo;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newNightbegintime java.lang.String
 */
public void setNightbegintime(java.lang.String newNightbegintime) {
	m_Nightbegintime = newNightbegintime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newNightendtime java.lang.String
 */
public void setNightendtime(java.lang.String newNightendtime) {
	m_Nightendtime = newNightendtime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newNightnextdayend nc.vo.pub.lang.UFBoolean
 */
//public void setNightnextdayend(nc.vo.pub.lang.UFBoolean newNightnextdayend) {
//	m_Nightnextdayend = newNightnextdayend;
//}
/**
 * 属性m_pk_bclbid的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_pk_bclbid String
 */
public void setPk_bclbid(String newPk_bclbid) {

	m_pk_bclbid = newPk_bclbid;
}
/**
 * 属性m_pk_corp的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_pk_corp String
 */
public void setPk_corp(String newPk_corp) {

	m_pk_corp = newPk_corp;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2001-6-13)
 * @param m_pk_bclbid String
 */
public void setPrimaryKey(String newPk_bclbid) {

	m_pk_bclbid = newPk_bclbid;
}
/**
 * 属性m_gzsj的setter方法。
 *
 * 创建日期：(2001-6-13)
 * @param newM_gzsj UFDouble
 */
public void setSfkq(Integer newsfkq) {

	m_sfkq = newsfkq;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newTimebegintime java.lang.String
 */
public void setTimebegintime(java.lang.String newTimebegintime) {
	m_Timebegintime = newTimebegintime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newTimeendtime java.lang.String
 */
public void setTimeendtime(java.lang.String newTimeendtime) {
	m_Timeendtime = newTimeendtime;
}
/**
 * 此处插入方法说明。
 * 创建日期：(02-4-15 10:38:22)
 * @param newTimenextdayend nc.vo.pub.lang.UFBoolean
 */
//public void setTimenextdayend(nc.vo.pub.lang.UFBoolean newTimenextdayend) {
//	m_Timenextdayend = newTimenextdayend;
//}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-6-13)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_bclbid == null) {
		errFields.add(new String("m_pk_bclbid"));
	}
	if (m_pk_corp == null) {
		errFields.add(new String("m_pk_corp"));
	}
	if (m_lbbm == null) {
		errFields.add(new String("m_lbbm"));
	}
	if (m_lbmc == null) {
		errFields.add(new String("m_lbmc"));
	}
	if (timebeginday == null) {
		errFields.add(new String("timebeginday"));
	}
	if (timeendday == null) {
		errFields.add(new String("timeendday"));
	}
	if (isallowout == null) {
		errFields.add(new String("isallowout"));
	}
	if (nightbeginday == null) {
		errFields.add(new String("nightbeginday"));
	}
	if (nightendday == null) {
		errFields.add(new String("nightendday"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.bd.BDMsg.MSG_NULL_FIELD());
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}

	/**
	 *  Modified by Young 2005-09-22 Start
	 */
	public UFDouble getOntmbeyond() {
		return ontmbeyond;
	}

	public java.lang.String getOntmruletype() {
		return ontmruletype;
	}

	/**
	*/
	public UFBoolean getUseontmrule() {
		return useontmrule;
	}

	public void setOntmbeyond(UFDouble newOntmbeyond) {
		ontmbeyond = newOntmbeyond;
	}

	public void setOntmruletype(java.lang.String newOntmruletype) {
		ontmruletype = newOntmruletype;
	}

	public void setUseontmrule(UFBoolean newUseontmrule) {
		useontmrule = newUseontmrule;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:04:53)
	 * @return double
	 */
	public UFDouble getOvertmbeyond() {
		return overtmbeyond;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:04:53)
	 * @param newOvertmbeyond double
	 */
	public void setOvertmbeyond(UFDouble newOvertmbeyond) {
		overtmbeyond = newOvertmbeyond;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:05:39)
	 * @return java.lang.String
	 */
	public java.lang.String getOvertmruletype() {
		return overtmruletype;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:05:39)
	 * @param newOvertmruletype java.lang.String
	 */
	public void setOvertmruletype(java.lang.String newOvertmruletype) {
		overtmruletype = newOvertmruletype;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:03:38)
	 * @return boolean
	 */
	public UFBoolean getUseovertmrule() {
		return useovertmrule;
	}

	/**
	 * 此处插入方法描述。
	 * 创建日期：(2004-6-27 16:03:38)
	 * @param newUseovertmrule boolean
	 */
	public void setUseovertmrule(UFBoolean newUseovertmrule) {
		useovertmrule = newUseovertmrule;
	}

	/**
	 *  Modified by Young 2005-09-22 End
	 */
	public UFBoolean getDefaultFlag() {
		return m_DefaultFlag;
	}

	public void setDefaultFlag(UFBoolean _defaultFlag) {
		m_DefaultFlag = _defaultFlag;
	}
	public UFBoolean getIsallowout() {
		return isallowout;
	}
	public UFBoolean getIsblocked() {
		return isblocked;
	}
	public UFBoolean getIscancel() {
		return iscancel;
	}
	public void setIsallowout(UFBoolean m_isallowout) {
		this.isallowout = m_isallowout;
	}
	public void setIsblocked(UFBoolean m_isblocked) {
		this.isblocked = m_isblocked;
	}
	public void setIscancel(UFBoolean m_iscancel) {
		this.iscancel = m_iscancel;
	}
	public Integer getNightbeginday() {
		return nightbeginday;
	}
	public void setNightbeginday(Integer m_nightbeginday) {
		this.nightbeginday = m_nightbeginday;
	}
	public Integer getNightendday() {
		return nightendday;
	}
	public void setNightendday(Integer m_nightendday) {
		this.nightendday = m_nightendday;
	}
	public Integer getTimebeginday() {
		return timebeginday;
	}
	public void setTimebeginday(Integer m_timebeginday) {
		this.timebeginday = m_timebeginday;
	}
	public Integer getTimeendday() {
		return timeendday;
	}
	public void setTimeendday(Integer m_timeendday) {
		this.timeendday = m_timeendday;
	}
	public Integer getDr() {
		return m_dr;
	}
	public void setDr(Integer m_dr) {
		this.m_dr = m_dr;
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#getEndDate()
	 */
	public int getScopeEndDate() {
		return timeendday==null?0:timeendday;
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#getEndTime()
	 */
	public String getScopeEndTime() {
		return m_Timeendtime;
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#getStartDate()
	 */
	public int getScopeStartDate() {
		return timebeginday==null?0:timebeginday;
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#getStartTime()
	 */
	public String getScopeStartTime() {
		return m_Timebegintime;
	}
	public String getSm_lbbm() {
		return sm_lbbm;
	}
	public void setSm_lbbm(String sm_lbbm) {
		this.sm_lbbm = sm_lbbm;
	}
	public String getSm_lbmc() {
		return sm_lbmc;
	}
	public void setSm_lbmc(String sm_lbmc) {
		this.sm_lbmc = sm_lbmc;
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#toTimeScope(java.lang.String)
	 */
	public ITimeScope toTimeScope(String date) {
		return TimeScopeUtils.toTimeScope(this, date);
	}
	/* （非 Javadoc）
	 * @see nc.itf.hr.ta.algorithm.IRelativeTimeScope#containsLastSecond()
	 */
	public boolean containsLastSecond() {
		return false;
	}
	
	public String toString() {
		return m_lbbm+" "+m_lbmc;
	}
	public UFDouble getOntmeffectbeyond() {
		return ontmeffectbeyond;
	}
	public void setOntmeffectbeyond(UFDouble ontmeffectbeyond) {
		this.ontmeffectbeyond = ontmeffectbeyond;
	}
	public UFDouble getOvertmeffectbeyond() {
		return overtmeffectbeyond;
	}
	public void setOvertmeffectbeyond(UFDouble overtmeffectbeyond) {
		this.overtmeffectbeyond = overtmeffectbeyond;
	}
}